

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Thu Dec  8 09:37:40 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1517
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	intentry,global,class=CODE,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	dabs	1,0x7E,2
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  0007                     	;# 
   104  0008                     	;# 
   105  0009                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000D                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0015                     	;# 
   116  0016                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001B                     	;# 
   123  001C                     	;# 
   124  008C                     	;# 
   125  008D                     	;# 
   126  008E                     	;# 
   127  008F                     	;# 
   128  0090                     	;# 
   129  0091                     	;# 
   130  0092                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0097                     	;# 
   134  0099                     	;# 
   135  009A                     	;# 
   136  009B                     	;# 
   137  009B                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  0110                     	;# 
   146  0116                     	;# 
   147  0117                     	;# 
   148  011D                     	;# 
   149  018C                     	;# 
   150  018D                     	;# 
   151  018E                     	;# 
   152  018F                     	;# 
   153  0190                     	;# 
   154  0191                     	;# 
   155  0191                     	;# 
   156  0192                     	;# 
   157  0193                     	;# 
   158  0193                     	;# 
   159  0194                     	;# 
   160  0195                     	;# 
   161  0196                     	;# 
   162  0197                     	;# 
   163  0199                     	;# 
   164  019A                     	;# 
   165  019B                     	;# 
   166  019B                     	;# 
   167  019B                     	;# 
   168  019B                     	;# 
   169  019C                     	;# 
   170  019C                     	;# 
   171  019D                     	;# 
   172  019E                     	;# 
   173  019F                     	;# 
   174  020D                     	;# 
   175  0210                     	;# 
   176  0211                     	;# 
   177  0211                     	;# 
   178  0212                     	;# 
   179  0212                     	;# 
   180  0213                     	;# 
   181  0213                     	;# 
   182  0214                     	;# 
   183  0214                     	;# 
   184  0215                     	;# 
   185  0215                     	;# 
   186  0215                     	;# 
   187  0216                     	;# 
   188  0216                     	;# 
   189  0217                     	;# 
   190  0217                     	;# 
   191  0291                     	;# 
   192  0291                     	;# 
   193  0292                     	;# 
   194  0293                     	;# 
   195  0298                     	;# 
   196  0298                     	;# 
   197  0299                     	;# 
   198  029A                     	;# 
   199  0394                     	;# 
   200  0395                     	;# 
   201  0396                     	;# 
   202  0FE4                     	;# 
   203  0FE5                     	;# 
   204  0FE6                     	;# 
   205  0FE7                     	;# 
   206  0FE8                     	;# 
   207  0FE9                     	;# 
   208  0FEA                     	;# 
   209  0FEB                     	;# 
   210  0FED                     	;# 
   211  0FEE                     	;# 
   212  0FEF                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0008                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  008C                     	;# 
   242  008D                     	;# 
   243  008E                     	;# 
   244  008F                     	;# 
   245  0090                     	;# 
   246  0091                     	;# 
   247  0092                     	;# 
   248  0095                     	;# 
   249  0096                     	;# 
   250  0097                     	;# 
   251  0099                     	;# 
   252  009A                     	;# 
   253  009B                     	;# 
   254  009B                     	;# 
   255  009C                     	;# 
   256  009D                     	;# 
   257  009E                     	;# 
   258  010C                     	;# 
   259  010D                     	;# 
   260  010E                     	;# 
   261  010F                     	;# 
   262  0110                     	;# 
   263  0116                     	;# 
   264  0117                     	;# 
   265  011D                     	;# 
   266  018C                     	;# 
   267  018D                     	;# 
   268  018E                     	;# 
   269  018F                     	;# 
   270  0190                     	;# 
   271  0191                     	;# 
   272  0191                     	;# 
   273  0192                     	;# 
   274  0193                     	;# 
   275  0193                     	;# 
   276  0194                     	;# 
   277  0195                     	;# 
   278  0196                     	;# 
   279  0197                     	;# 
   280  0199                     	;# 
   281  019A                     	;# 
   282  019B                     	;# 
   283  019B                     	;# 
   284  019B                     	;# 
   285  019B                     	;# 
   286  019C                     	;# 
   287  019C                     	;# 
   288  019D                     	;# 
   289  019E                     	;# 
   290  019F                     	;# 
   291  020D                     	;# 
   292  0210                     	;# 
   293  0211                     	;# 
   294  0211                     	;# 
   295  0212                     	;# 
   296  0212                     	;# 
   297  0213                     	;# 
   298  0213                     	;# 
   299  0214                     	;# 
   300  0214                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0215                     	;# 
   304  0216                     	;# 
   305  0216                     	;# 
   306  0217                     	;# 
   307  0217                     	;# 
   308  0291                     	;# 
   309  0291                     	;# 
   310  0292                     	;# 
   311  0293                     	;# 
   312  0298                     	;# 
   313  0298                     	;# 
   314  0299                     	;# 
   315  029A                     	;# 
   316  0394                     	;# 
   317  0395                     	;# 
   318  0396                     	;# 
   319  0FE4                     	;# 
   320  0FE5                     	;# 
   321  0FE6                     	;# 
   322  0FE7                     	;# 
   323  0FE8                     	;# 
   324  0FE9                     	;# 
   325  0FEA                     	;# 
   326  0FEB                     	;# 
   327  0FED                     	;# 
   328  0FEE                     	;# 
   329  0FEF                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0008                     	;# 
   339  0009                     	;# 
   340  000A                     	;# 
   341  000B                     	;# 
   342  000C                     	;# 
   343  000D                     	;# 
   344  000E                     	;# 
   345  000F                     	;# 
   346  0010                     	;# 
   347  0011                     	;# 
   348  0012                     	;# 
   349  0015                     	;# 
   350  0016                     	;# 
   351  0016                     	;# 
   352  0017                     	;# 
   353  0018                     	;# 
   354  0019                     	;# 
   355  001A                     	;# 
   356  001B                     	;# 
   357  001C                     	;# 
   358  008C                     	;# 
   359  008D                     	;# 
   360  008E                     	;# 
   361  008F                     	;# 
   362  0090                     	;# 
   363  0091                     	;# 
   364  0092                     	;# 
   365  0095                     	;# 
   366  0096                     	;# 
   367  0097                     	;# 
   368  0099                     	;# 
   369  009A                     	;# 
   370  009B                     	;# 
   371  009B                     	;# 
   372  009C                     	;# 
   373  009D                     	;# 
   374  009E                     	;# 
   375  010C                     	;# 
   376  010D                     	;# 
   377  010E                     	;# 
   378  010F                     	;# 
   379  0110                     	;# 
   380  0116                     	;# 
   381  0117                     	;# 
   382  011D                     	;# 
   383  018C                     	;# 
   384  018D                     	;# 
   385  018E                     	;# 
   386  018F                     	;# 
   387  0190                     	;# 
   388  0191                     	;# 
   389  0191                     	;# 
   390  0192                     	;# 
   391  0193                     	;# 
   392  0193                     	;# 
   393  0194                     	;# 
   394  0195                     	;# 
   395  0196                     	;# 
   396  0197                     	;# 
   397  0199                     	;# 
   398  019A                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019B                     	;# 
   402  019B                     	;# 
   403  019C                     	;# 
   404  019C                     	;# 
   405  019D                     	;# 
   406  019E                     	;# 
   407  019F                     	;# 
   408  020D                     	;# 
   409  0210                     	;# 
   410  0211                     	;# 
   411  0211                     	;# 
   412  0212                     	;# 
   413  0212                     	;# 
   414  0213                     	;# 
   415  0213                     	;# 
   416  0214                     	;# 
   417  0214                     	;# 
   418  0215                     	;# 
   419  0215                     	;# 
   420  0215                     	;# 
   421  0216                     	;# 
   422  0216                     	;# 
   423  0217                     	;# 
   424  0217                     	;# 
   425  0291                     	;# 
   426  0291                     	;# 
   427  0292                     	;# 
   428  0293                     	;# 
   429  0298                     	;# 
   430  0298                     	;# 
   431  0299                     	;# 
   432  029A                     	;# 
   433  0394                     	;# 
   434  0395                     	;# 
   435  0396                     	;# 
   436  0FE4                     	;# 
   437  0FE5                     	;# 
   438  0FE6                     	;# 
   439  0FE7                     	;# 
   440  0FE8                     	;# 
   441  0FE9                     	;# 
   442  0FEA                     	;# 
   443  0FEB                     	;# 
   444  0FED                     	;# 
   445  0FEE                     	;# 
   446  0FEF                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000D                     	;# 
   461  000E                     	;# 
   462  000F                     	;# 
   463  0010                     	;# 
   464  0011                     	;# 
   465  0012                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0016                     	;# 
   469  0017                     	;# 
   470  0018                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  008F                     	;# 
   479  0090                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0095                     	;# 
   483  0096                     	;# 
   484  0097                     	;# 
   485  0099                     	;# 
   486  009A                     	;# 
   487  009B                     	;# 
   488  009B                     	;# 
   489  009C                     	;# 
   490  009D                     	;# 
   491  009E                     	;# 
   492  010C                     	;# 
   493  010D                     	;# 
   494  010E                     	;# 
   495  010F                     	;# 
   496  0110                     	;# 
   497  0116                     	;# 
   498  0117                     	;# 
   499  011D                     	;# 
   500  018C                     	;# 
   501  018D                     	;# 
   502  018E                     	;# 
   503  018F                     	;# 
   504  0190                     	;# 
   505  0191                     	;# 
   506  0191                     	;# 
   507  0192                     	;# 
   508  0193                     	;# 
   509  0193                     	;# 
   510  0194                     	;# 
   511  0195                     	;# 
   512  0196                     	;# 
   513  0197                     	;# 
   514  0199                     	;# 
   515  019A                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019D                     	;# 
   523  019E                     	;# 
   524  019F                     	;# 
   525  020D                     	;# 
   526  0210                     	;# 
   527  0211                     	;# 
   528  0211                     	;# 
   529  0212                     	;# 
   530  0212                     	;# 
   531  0213                     	;# 
   532  0213                     	;# 
   533  0214                     	;# 
   534  0214                     	;# 
   535  0215                     	;# 
   536  0215                     	;# 
   537  0215                     	;# 
   538  0216                     	;# 
   539  0216                     	;# 
   540  0217                     	;# 
   541  0217                     	;# 
   542  0291                     	;# 
   543  0291                     	;# 
   544  0292                     	;# 
   545  0293                     	;# 
   546  0298                     	;# 
   547  0298                     	;# 
   548  0299                     	;# 
   549  029A                     	;# 
   550  0394                     	;# 
   551  0395                     	;# 
   552  0396                     	;# 
   553  0FE4                     	;# 
   554  0FE5                     	;# 
   555  0FE6                     	;# 
   556  0FE7                     	;# 
   557  0FE8                     	;# 
   558  0FE9                     	;# 
   559  0FEA                     	;# 
   560  0FEB                     	;# 
   561  0FED                     	;# 
   562  0FEE                     	;# 
   563  0FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0015                     	;# 
   584  0016                     	;# 
   585  0016                     	;# 
   586  0017                     	;# 
   587  0018                     	;# 
   588  0019                     	;# 
   589  001A                     	;# 
   590  001B                     	;# 
   591  001C                     	;# 
   592  008C                     	;# 
   593  008D                     	;# 
   594  008E                     	;# 
   595  008F                     	;# 
   596  0090                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0095                     	;# 
   600  0096                     	;# 
   601  0097                     	;# 
   602  0099                     	;# 
   603  009A                     	;# 
   604  009B                     	;# 
   605  009B                     	;# 
   606  009C                     	;# 
   607  009D                     	;# 
   608  009E                     	;# 
   609  010C                     	;# 
   610  010D                     	;# 
   611  010E                     	;# 
   612  010F                     	;# 
   613  0110                     	;# 
   614  0116                     	;# 
   615  0117                     	;# 
   616  011D                     	;# 
   617  018C                     	;# 
   618  018D                     	;# 
   619  018E                     	;# 
   620  018F                     	;# 
   621  0190                     	;# 
   622  0191                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0194                     	;# 
   628  0195                     	;# 
   629  0196                     	;# 
   630  0197                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019C                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020D                     	;# 
   643  0210                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0291                     	;# 
   660  0291                     	;# 
   661  0292                     	;# 
   662  0293                     	;# 
   663  0298                     	;# 
   664  0298                     	;# 
   665  0299                     	;# 
   666  029A                     	;# 
   667  0394                     	;# 
   668  0395                     	;# 
   669  0396                     	;# 
   670  0FE4                     	;# 
   671  0FE5                     	;# 
   672  0FE6                     	;# 
   673  0FE7                     	;# 
   674  0FE8                     	;# 
   675  0FE9                     	;# 
   676  0FEA                     	;# 
   677  0FEB                     	;# 
   678  0FED                     	;# 
   679  0FEE                     	;# 
   680  0FEF                     	;# 
   681  0000                     	;# 
   682  0001                     	;# 
   683  0002                     	;# 
   684  0003                     	;# 
   685  0004                     	;# 
   686  0005                     	;# 
   687  0006                     	;# 
   688  0007                     	;# 
   689  0008                     	;# 
   690  0009                     	;# 
   691  000A                     	;# 
   692  000B                     	;# 
   693  000C                     	;# 
   694  000D                     	;# 
   695  000E                     	;# 
   696  000F                     	;# 
   697  0010                     	;# 
   698  0011                     	;# 
   699  0012                     	;# 
   700  0015                     	;# 
   701  0016                     	;# 
   702  0016                     	;# 
   703  0017                     	;# 
   704  0018                     	;# 
   705  0019                     	;# 
   706  001A                     	;# 
   707  001B                     	;# 
   708  001C                     	;# 
   709  008C                     	;# 
   710  008D                     	;# 
   711  008E                     	;# 
   712  008F                     	;# 
   713  0090                     	;# 
   714  0091                     	;# 
   715  0092                     	;# 
   716  0095                     	;# 
   717  0096                     	;# 
   718  0097                     	;# 
   719  0099                     	;# 
   720  009A                     	;# 
   721  009B                     	;# 
   722  009B                     	;# 
   723  009C                     	;# 
   724  009D                     	;# 
   725  009E                     	;# 
   726  010C                     	;# 
   727  010D                     	;# 
   728  010E                     	;# 
   729  010F                     	;# 
   730  0110                     	;# 
   731  0116                     	;# 
   732  0117                     	;# 
   733  011D                     	;# 
   734  018C                     	;# 
   735  018D                     	;# 
   736  018E                     	;# 
   737  018F                     	;# 
   738  0190                     	;# 
   739  0191                     	;# 
   740  0191                     	;# 
   741  0192                     	;# 
   742  0193                     	;# 
   743  0193                     	;# 
   744  0194                     	;# 
   745  0195                     	;# 
   746  0196                     	;# 
   747  0197                     	;# 
   748  0199                     	;# 
   749  019A                     	;# 
   750  019B                     	;# 
   751  019B                     	;# 
   752  019B                     	;# 
   753  019B                     	;# 
   754  019C                     	;# 
   755  019C                     	;# 
   756  019D                     	;# 
   757  019E                     	;# 
   758  019F                     	;# 
   759  020D                     	;# 
   760  0210                     	;# 
   761  0211                     	;# 
   762  0211                     	;# 
   763  0212                     	;# 
   764  0212                     	;# 
   765  0213                     	;# 
   766  0213                     	;# 
   767  0214                     	;# 
   768  0214                     	;# 
   769  0215                     	;# 
   770  0215                     	;# 
   771  0215                     	;# 
   772  0216                     	;# 
   773  0216                     	;# 
   774  0217                     	;# 
   775  0217                     	;# 
   776  0291                     	;# 
   777  0291                     	;# 
   778  0292                     	;# 
   779  0293                     	;# 
   780  0298                     	;# 
   781  0298                     	;# 
   782  0299                     	;# 
   783  029A                     	;# 
   784  0394                     	;# 
   785  0395                     	;# 
   786  0396                     	;# 
   787  0FE4                     	;# 
   788  0FE5                     	;# 
   789  0FE6                     	;# 
   790  0FE7                     	;# 
   791  0FE8                     	;# 
   792  0FE9                     	;# 
   793  0FEA                     	;# 
   794  0FEB                     	;# 
   795  0FED                     	;# 
   796  0FEE                     	;# 
   797  0FEF                     	;# 
   798  0000                     	;# 
   799  0001                     	;# 
   800  0002                     	;# 
   801  0003                     	;# 
   802  0004                     	;# 
   803  0005                     	;# 
   804  0006                     	;# 
   805  0007                     	;# 
   806  0008                     	;# 
   807  0009                     	;# 
   808  000A                     	;# 
   809  000B                     	;# 
   810  000C                     	;# 
   811  000D                     	;# 
   812  000E                     	;# 
   813  000F                     	;# 
   814  0010                     	;# 
   815  0011                     	;# 
   816  0012                     	;# 
   817  0015                     	;# 
   818  0016                     	;# 
   819  0016                     	;# 
   820  0017                     	;# 
   821  0018                     	;# 
   822  0019                     	;# 
   823  001A                     	;# 
   824  001B                     	;# 
   825  001C                     	;# 
   826  008C                     	;# 
   827  008D                     	;# 
   828  008E                     	;# 
   829  008F                     	;# 
   830  0090                     	;# 
   831  0091                     	;# 
   832  0092                     	;# 
   833  0095                     	;# 
   834  0096                     	;# 
   835  0097                     	;# 
   836  0099                     	;# 
   837  009A                     	;# 
   838  009B                     	;# 
   839  009B                     	;# 
   840  009C                     	;# 
   841  009D                     	;# 
   842  009E                     	;# 
   843  010C                     	;# 
   844  010D                     	;# 
   845  010E                     	;# 
   846  010F                     	;# 
   847  0110                     	;# 
   848  0116                     	;# 
   849  0117                     	;# 
   850  011D                     	;# 
   851  018C                     	;# 
   852  018D                     	;# 
   853  018E                     	;# 
   854  018F                     	;# 
   855  0190                     	;# 
   856  0191                     	;# 
   857  0191                     	;# 
   858  0192                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0197                     	;# 
   865  0199                     	;# 
   866  019A                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019C                     	;# 
   872  019C                     	;# 
   873  019D                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  020D                     	;# 
   877  0210                     	;# 
   878  0211                     	;# 
   879  0211                     	;# 
   880  0212                     	;# 
   881  0212                     	;# 
   882  0213                     	;# 
   883  0213                     	;# 
   884  0214                     	;# 
   885  0214                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0216                     	;# 
   890  0216                     	;# 
   891  0217                     	;# 
   892  0217                     	;# 
   893  0291                     	;# 
   894  0291                     	;# 
   895  0292                     	;# 
   896  0293                     	;# 
   897  0298                     	;# 
   898  0298                     	;# 
   899  0299                     	;# 
   900  029A                     	;# 
   901  0394                     	;# 
   902  0395                     	;# 
   903  0396                     	;# 
   904  0FE4                     	;# 
   905  0FE5                     	;# 
   906  0FE6                     	;# 
   907  0FE7                     	;# 
   908  0FE8                     	;# 
   909  0FE9                     	;# 
   910  0FEA                     	;# 
   911  0FEB                     	;# 
   912  0FED                     	;# 
   913  0FEE                     	;# 
   914  0FEF                     	;# 
   915                           
   916                           	psect	idataBANK1
   917  0801                     __pidataBANK1:	
   918                           
   919                           ;initializer for _ldr_sensitivity1
   920  0801  341E               	retlw	30
   921  0802  3400               	retlw	0
   922                           
   923                           ;initializer for _ldr_sensitivity2
   924  0803  3432               	retlw	50
   925  0804  3400               	retlw	0
   926                           
   927                           ;initializer for _ldr_sensitivity3
   928  0805  3446               	retlw	70
   929  0806  3400               	retlw	0
   930                           
   931                           ;initializer for _motion_sensitivity
   932  0807  3414               	retlw	20
   933  0808  3400               	retlw	0
   934                           
   935                           ;initializer for _sensor0_sensitivity
   936  0809  3414               	retlw	20
   937  080A  3400               	retlw	0
   938                           
   939                           ;initializer for _sensor1_sensitivity
   940  080B  3414               	retlw	20
   941  080C  3400               	retlw	0
   942                           
   943                           	psect	idataBANK2
   944  1525                     __pidataBANK2:	
   945                           
   946                           ;initializer for _i2c_reg_add_word
   947  1525  34D0               	retlw	208
   948  1526  34D1               	retlw	209
   949  1527  34D2               	retlw	210
   950  1528  34D3               	retlw	211
   951  1529  34D4               	retlw	212
   952  152A  34D5               	retlw	213
   953                           
   954                           	psect	idataBANK3
   955  1706                     __pidataBANK3:	
   956                           
   957                           ;initializer for _i2c_reg_add_byte
   958  1706  34AA               	retlw	170
   959  1707  34BB               	retlw	187
   960  1708  34BC               	retlw	188
   961  1709  34BD               	retlw	189
   962  170A  34BE               	retlw	190
   963  170B  34C0               	retlw	192
   964  170C  34E1               	retlw	225
   965  170D  34E2               	retlw	226
   966  170E  34E3               	retlw	227
   967  170F  34E4               	retlw	228
   968  1710  34E5               	retlw	229
   969  1711  34E6               	retlw	230
   970  1712  34E7               	retlw	231
   971  1713  34E8               	retlw	232
   972  1714  34E9               	retlw	233
   973  1715  34EA               	retlw	234
   974  1716  34EB               	retlw	235
   975  1717  3430               	retlw	48
   976  1718  3431               	retlw	49
   977  1719  3432               	retlw	50
   978  171A  3434               	retlw	52
   979  171B  3436               	retlw	54
   980  171C  3437               	retlw	55
   981  171D  3438               	retlw	56
   982  171E  3433               	retlw	51
   983  171F  3440               	retlw	64
   984  1720  3441               	retlw	65
   985  1721  3442               	retlw	66
   986  1722  3450               	retlw	80
   987  1723  3451               	retlw	81
   988  1724  3452               	retlw	82
   989  1725  3453               	retlw	83
   990  1726  3460               	retlw	96
   991  1727  3490               	retlw	144
   992  1728  3470               	retlw	112
   993  1729  3471               	retlw	113
   994                           
   995                           	psect	strings
   996  1000                     __pstrings:	
   997  1000                     __stringtab:	
   998  1000  3400               	retlw	0
   999  1001                     __end_of__stringtab:	
  1000  1001                     _keyPadMatrix:	
  1001  1001  3431               	retlw	49
  1002  1002  3432               	retlw	50
  1003  1003  3433               	retlw	51
  1004  1004  3434               	retlw	52
  1005  1005  3435               	retlw	53
  1006  1006  3436               	retlw	54
  1007  1007  3437               	retlw	55
  1008  1008  3438               	retlw	56
  1009  1009  3439               	retlw	57
  1010  100A  342A               	retlw	42
  1011  100B  3430               	retlw	48
  1012  100C  3423               	retlw	35
  1013  100D  34FF               	retlw	255
  1014  100E                     __end_of_keyPadMatrix:	
  1015  000B                     _INTCON	set	11
  1016  000B                     _INTCONbits	set	11
  1017  0011                     _PIR1bits	set	17
  1018  000C                     _PORTAbits	set	12
  1019  000D                     _PORTBbits	set	13
  1020  000E                     _PORTCbits	set	14
  1021  000F                     _PORTDbits	set	15
  1022  0010                     _PORTEbits	set	16
  1023  009D                     _ADCON0	set	157
  1024  009E                     _ADCON1	set	158
  1025  009C                     _ADRESH	set	156
  1026  0099                     _OSCCONbits	set	153
  1027  0091                     _PIE1bits	set	145
  1028  0092                     _PIE2	set	146
  1029  008C                     _TRISAbits	set	140
  1030  008D                     _TRISBbits	set	141
  1031  008E                     _TRISCbits	set	142
  1032  008F                     _TRISDbits	set	143
  1033  0090                     _TRISEbits	set	144
  1034  04E9                     _GO_nDONE	set	1257
  1035  010C                     _LATAbits	set	268
  1036  010D                     _LATBbits	set	269
  1037  010E                     _LATCbits	set	270
  1038  0110                     _LATEbits	set	272
  1039  018C                     _ANSELA	set	396
  1040  018C                     _ANSELAbits	set	396
  1041  018D                     _ANSELB	set	397
  1042  018D                     _ANSELBbits	set	397
  1043  018E                     _ANSELC	set	398
  1044  018E                     _ANSELCbits	set	398
  1045  018F                     _ANSELD	set	399
  1046  018F                     _ANSELDbits	set	399
  1047  0190                     _ANSELEbits	set	400
  1048  0212                     _SSPADD	set	530
  1049  0211                     _SSPBUF	set	529
  1050  0215                     _SSPCON1	set	533
  1051  0215                     _SSPCON1bits	set	533
  1052  0216                     _SSPCON2	set	534
  1053  0217                     _SSPCON3	set	535
  1054  0213                     _SSPMSK	set	531
  1055  0214                     _SSPSTAT	set	532
  1056  0214                     _SSPSTATbits	set	532
  1057  10B5                     _ACKDT	set	4277
  1058  10B4                     _ACKEN	set	4276
  1059  10BC                     _BOEN	set	4284
  1060  10AC                     _CKP	set	4268
  1061  10BE                     _PCIE	set	4286
  1062  10BA                     _SBCDE	set	4282
  1063  10BD                     _SCIE	set	4285
  1064  10BB                     _SDAHT	set	4283
  1065  10B0                     _SEN	set	4272
  1066  10AD                     _SSPEN	set	4269
  1067  10AE                     _SSPOV	set	4270
  1068  10AF                     _WCOL	set	4271
  1069                           
  1070                           ; #config settings
  1071  0000                     
  1072                           	psect	cinit
  1073  003C                     start_initialization:	
  1074  003C                     __initialization:	
  1075                           
  1076                           ; Clear objects allocated to BANK0
  1077  003C  3056               	movlw	low __pbssBANK0
  1078  003D  0084               	movwf	4
  1079  003E  3000               	movlw	high __pbssBANK0
  1080  003F  0085               	movwf	5
  1081  0040  300D               	movlw	13
  1082  0041  3195  251F  3180   	fcall	clear_ram0
  1083                           
  1084                           ; Clear objects allocated to BANK1
  1085  0044  30A0               	movlw	low __pbssBANK1
  1086  0045  0084               	movwf	4
  1087  0046  3000               	movlw	high __pbssBANK1
  1088  0047  0085               	movwf	5
  1089  0048  3038               	movlw	56
  1090  0049  3195  251F  3180   	fcall	clear_ram0
  1091                           
  1092                           ; Clear objects allocated to BANK2
  1093  004C  3020               	movlw	low __pbssBANK2
  1094  004D  0084               	movwf	4
  1095  004E  3001               	movlw	high __pbssBANK2
  1096  004F  0085               	movwf	5
  1097  0050  3048               	movlw	72
  1098  0051  3195  251F  3180   	fcall	clear_ram0
  1099                           
  1100                           ; Clear objects allocated to BANK3
  1101  0054  30C4               	movlw	low __pbssBANK3
  1102  0055  0084               	movwf	4
  1103  0056  3001               	movlw	high __pbssBANK3
  1104  0057  0085               	movwf	5
  1105  0058  301B               	movlw	27
  1106  0059  3195  251F  3180   	fcall	clear_ram0
  1107                           
  1108                           ; Clear objects allocated to BANK4
  1109  005C  3020               	movlw	low __pbssBANK4
  1110  005D  0084               	movwf	4
  1111  005E  3002               	movlw	high __pbssBANK4
  1112  005F  0085               	movwf	5
  1113  0060  3024               	movlw	36
  1114  0061  3195  251F  3180   	fcall	clear_ram0
  1115                           
  1116                           ; Initialize objects allocated to BANK1
  1117  0064  3001               	movlw	low __pidataBANK1
  1118  0065  0084               	movwf	4
  1119  0066  3088               	movlw	(high __pidataBANK1)| (0+128)
  1120  0067  0085               	movwf	5
  1121  0068  30D8               	movlw	low __pdataBANK1
  1122  0069  0086               	movwf	6
  1123  006A  3000               	movlw	high __pdataBANK1
  1124  006B  0087               	movwf	7
  1125  006C  300C               	movlw	12
  1126  006D  3195  2519  3180   	fcall	init_ram
  1127                           
  1128                           ; Initialize objects allocated to BANK2
  1129  0070  3025               	movlw	low __pidataBANK2
  1130  0071  0084               	movwf	4
  1131  0072  3095               	movlw	(high __pidataBANK2)| (0+128)
  1132  0073  0085               	movwf	5
  1133  0074  3068               	movlw	low __pdataBANK2
  1134  0075  0086               	movwf	6
  1135  0076  3001               	movlw	high __pdataBANK2
  1136  0077  0087               	movwf	7
  1137  0078  3006               	movlw	6
  1138  0079  3195  2519  3180   	fcall	init_ram
  1139                           
  1140                           ; Initialize objects allocated to BANK3
  1141  007C  3006               	movlw	low __pidataBANK3
  1142  007D  0084               	movwf	4
  1143  007E  3097               	movlw	(high __pidataBANK3)| (0+128)
  1144  007F  0085               	movwf	5
  1145  0080  30A0               	movlw	low __pdataBANK3
  1146  0081  0086               	movwf	6
  1147  0082  3001               	movlw	high __pdataBANK3
  1148  0083  0087               	movwf	7
  1149  0084  3024               	movlw	36
  1150  0085  3195  2519         	fcall	init_ram
  1151  0087                     end_of_initialization:	
  1152                           ;End of C runtime variable initialization code
  1153                           
  1154  0087                     __end_of__initialization:	
  1155  0087  0020               	movlb	0
  1156  0088  3186  2E2D         	ljmp	_main	;jump to C main() function
  1157                           
  1158                           	psect	bssBANK0
  1159  0056                     __pbssBANK0:	
  1160  0056                     _ldr_en:	
  1161  0056                     	ds	2
  1162  0058                     _motion_en:	
  1163  0058                     	ds	2
  1164  005A                     _sensor0_en:	
  1165  005A                     	ds	2
  1166  005C                     _sensor0_status:	
  1167  005C                     	ds	2
  1168  005E                     _sensor1_en:	
  1169  005E                     	ds	2
  1170  0060                     _sensor1_status:	
  1171  0060                     	ds	2
  1172  0062                     _old_key:	
  1173  0062                     	ds	1
  1174                           
  1175                           	psect	bssBANK1
  1176  00A0                     __pbssBANK1:	
  1177  00A0                     _adc_flag:	
  1178  00A0                     	ds	2
  1179  00A2                     _debug:	
  1180  00A2                     	ds	2
  1181  00A4                     _debug_reg:	
  1182  00A4                     	ds	2
  1183  00A6                     _i2c_interrupt_flag:	
  1184  00A6                     	ds	2
  1185  00A8                     _i2c_interrupt_prescaler:	
  1186  00A8                     	ds	2
  1187  00AA                     _i2c_start_flag:	
  1188  00AA                     	ds	2
  1189  00AC                     _ir_en:	
  1190  00AC                     	ds	2
  1191  00AE                     _ir_level:	
  1192  00AE                     	ds	2
  1193  00B0                     _keypad_en:	
  1194  00B0                     	ds	2
  1195  00B2                     _ldr_value:	
  1196  00B2                     	ds	2
  1197  00B4                     _motion_counter:	
  1198  00B4                     	ds	2
  1199  00B6                     _relay0_en:	
  1200  00B6                     	ds	2
  1201  00B8                     _relay0_status:	
  1202  00B8                     	ds	2
  1203  00BA                     _relay1_en:	
  1204  00BA                     	ds	2
  1205  00BC                     _relay1_status:	
  1206  00BC                     	ds	2
  1207  00BE                     _sensor0_counter:	
  1208  00BE                     	ds	2
  1209  00C0                     _sensor1_counter:	
  1210  00C0                     	ds	2
  1211  00C2                     _shock_counter:	
  1212  00C2                     	ds	2
  1213  00C4                     _shutdown_counter:	
  1214  00C4                     	ds	2
  1215  00C6                     _shutdown_flag:	
  1216  00C6                     	ds	2
  1217  00C8                     _wtimer:	
  1218  00C8                     	ds	2
  1219  00CA                     _wtimer_flag:	
  1220  00CA                     	ds	2
  1221  00CC                     _wtimer_prescale:	
  1222  00CC                     	ds	2
  1223  00CE                     _debug_lsb:	
  1224  00CE                     	ds	1
  1225  00CF                     _debug_msb:	
  1226  00CF                     	ds	1
  1227  00D0                     _keypress:	
  1228  00D0                     	ds	1
  1229  00D1                     _i2c_tx_radd_buff_byte:	
  1230  00D1                     	ds	7
  1231                           
  1232                           	psect	dataBANK1
  1233  00D8                     __pdataBANK1:	
  1234  00D8                     _ldr_sensitivity1:	
  1235  00D8                     	ds	2
  1236  00DA                     _ldr_sensitivity2:	
  1237  00DA                     	ds	2
  1238  00DC                     _ldr_sensitivity3:	
  1239  00DC                     	ds	2
  1240  00DE                     _motion_sensitivity:	
  1241  00DE                     	ds	2
  1242  00E0                     _sensor0_sensitivity:	
  1243  00E0                     	ds	2
  1244  00E2                     _sensor1_sensitivity:	
  1245  00E2                     	ds	2
  1246                           
  1247                           	psect	bssBANK2
  1248  0120                     __pbssBANK2:	
  1249  0120                     _ec_lsb:	
  1250  0120                     	ds	12
  1251  012C                     _ec_msb:	
  1252  012C                     	ds	12
  1253  0138                     _i2c_reg_dataword_msb:	
  1254  0138                     	ds	6
  1255  013E                     _i2c_rx_radd_buff_byte:	
  1256  013E                     	ds	14
  1257  014C                     _i2c_rx_data_buff_byte:	
  1258  014C                     	ds	7
  1259  0153                     _i2c_rx_data_buff_word_lsb:	
  1260  0153                     	ds	7
  1261  015A                     _i2c_rx_data_buff_word_msb:	
  1262  015A                     	ds	7
  1263  0161                     _i2c_tx_data_buff_byte:	
  1264  0161                     	ds	7
  1265                           
  1266                           	psect	dataBANK2
  1267  0168                     __pdataBANK2:	
  1268  0168                     _i2c_reg_add_word:	
  1269  0168                     	ds	6
  1270                           
  1271                           	psect	bssBANK3
  1272  01C4                     __pbssBANK3:	
  1273  01C4                     _i2c_tx_data_buff_word:	
  1274  01C4                     	ds	7
  1275  01CB                     _i2c_reg_dataword_lsb:	
  1276  01CB                     	ds	6
  1277  01D1                     _i2c_rx_radd_buff_word:	
  1278  01D1                     	ds	14
  1279                           
  1280                           	psect	dataBANK3
  1281  01A0                     __pdataBANK3:	
  1282  01A0                     _i2c_reg_add_byte:	
  1283  01A0                     	ds	36
  1284                           
  1285                           	psect	bssBANK4
  1286  0220                     __pbssBANK4:	
  1287  0220                     _i2c_reg_databyte:	
  1288  0220                     	ds	36
  1289                           
  1290                           	psect	clrtext
  1291  151F                     clear_ram0:	
  1292                           ;	Called with FSR0 containing the base address, and
  1293                           ;	WREG with the size to clear
  1294                           
  1295  151F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1296  1520                     clrloop0:	
  1297  1520  0180               	clrf	0	;clear RAM location pointed to by FSR
  1298  1521  3101               	addfsr 0,1
  1299  1522  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1300  1523  2D20               	goto	clrloop0	;have we reached the end yet?
  1301  1524  3400               	retlw	0	;all done for this memory range, return
  1302                           
  1303                           	psect	inittext
  1304  1519                     init_ram:	
  1305  1519  00FE               	movwf	126
  1306  151A                     initloop:	
  1307  151A  0012               	moviw fsr0++
  1308  151B  001E               	movwi fsr1++
  1309  151C  0BFE               	decfsz	126,f
  1310  151D  2D1A               	goto	initloop
  1311  151E  3400               	retlw	0
  1312                           
  1313                           	psect	cstackBANK3
  1314  01DF                     __pcstackBANK3:	
  1315  01DF                     ??_main:	
  1316                           
  1317                           ; 0 bytes @ 0x0
  1318  01DF                     	ds	3
  1319  01E2                     main@shk_prescale:	
  1320                           
  1321                           ; 2 bytes @ 0x3
  1322  01E2                     	ds	2
  1323  01E4                     main@mtn_prescale:	
  1324                           
  1325                           ; 2 bytes @ 0x5
  1326  01E4                     	ds	2
  1327  01E6                     main@sen0_prescale:	
  1328                           
  1329                           ; 2 bytes @ 0x7
  1330  01E6                     	ds	2
  1331  01E8                     main@sen1_prescale:	
  1332                           
  1333                           ; 2 bytes @ 0x9
  1334  01E8                     	ds	2
  1335  01EA                     main@i2c_prescaler_ctr:	
  1336                           
  1337                           ; 2 bytes @ 0xB
  1338  01EA                     	ds	2
  1339  01EC                     main@adc_prescale:	
  1340                           
  1341                           ; 2 bytes @ 0xD
  1342  01EC                     	ds	2
  1343                           
  1344                           	psect	cstackBANK1
  1345  00E4                     __pcstackBANK1:	
  1346  00E4                     ___fttol@sign1:	
  1347                           
  1348                           ; 1 bytes @ 0x0
  1349  00E4                     	ds	1
  1350  00E5                     ___fttol@lval:	
  1351                           
  1352                           ; 4 bytes @ 0x1
  1353  00E5                     	ds	4
  1354  00E9                     ___fttol@exp1:	
  1355                           
  1356                           ; 1 bytes @ 0x5
  1357  00E9                     	ds	1
  1358  00EA                     ?_main:	
  1359  00EA                     main@argc:	
  1360                           ; 2 bytes @ 0x6
  1361                           
  1362                           
  1363                           ; 2 bytes @ 0x6
  1364  00EA                     	ds	2
  1365  00EC                     main@argv:	
  1366                           
  1367                           ; 2 bytes @ 0x8
  1368  00EC                     	ds	2
  1369                           
  1370                           	psect	cstackCOMMON
  1371  0070                     __pcstackCOMMON:	
  1372  0070                     ?_auto_on:	
  1373  0070                     ?_work_i2c_handler:	
  1374                           ; 0 bytes @ 0x0
  1375                           
  1376  0070                     ?_init_mcu:	
  1377                           ; 0 bytes @ 0x0
  1378                           
  1379  0070                     ?_init_keypad:	
  1380                           ; 0 bytes @ 0x0
  1381                           
  1382  0070                     ?_GetKeyPressed:	
  1383                           ; 0 bytes @ 0x0
  1384                           
  1385  0070                     ?_adc_read_service:	
  1386                           ; 0 bytes @ 0x0
  1387                           
  1388  0070                     ?_ir_level_service:	
  1389                           ; 0 bytes @ 0x0
  1390                           
  1391  0070                     ?_i2c_interrupt_handler:	
  1392                           ; 0 bytes @ 0x0
  1393                           
  1394  0070                     ?_shutdown_service:	
  1395                           ; 0 bytes @ 0x0
  1396                           
  1397  0070                     ?_i2c_databyte_handler:	
  1398                           ; 0 bytes @ 0x0
  1399                           
  1400  0070                     ?_i2c_dataword_handler:	
  1401                           ; 0 bytes @ 0x0
  1402                           
  1403  0070                     ?_echo_cancel_on:	
  1404                           ; 0 bytes @ 0x0
  1405                           
  1406  0070                     ?_echo_cancel_off:	
  1407                           ; 0 bytes @ 0x0
  1408                           
  1409  0070                     ?_init_sensor0:	
  1410                           ; 0 bytes @ 0x0
  1411                           
  1412  0070                     ?_deinit_sensor0:	
  1413                           ; 0 bytes @ 0x0
  1414                           
  1415  0070                     ?_init_sensor1:	
  1416                           ; 0 bytes @ 0x0
  1417                           
  1418  0070                     ?_deinit_sensor1:	
  1419                           ; 0 bytes @ 0x0
  1420                           
  1421  0070                     ?_init_motion:	
  1422                           ; 0 bytes @ 0x0
  1423                           
  1424  0070                     ?_deinit_motion:	
  1425                           ; 0 bytes @ 0x0
  1426                           
  1427  0070                     ?_init_ldr:	
  1428                           ; 0 bytes @ 0x0
  1429                           
  1430  0070                     ?_deinit_ldr:	
  1431                           ; 0 bytes @ 0x0
  1432                           
  1433  0070                     ?_init_ir:	
  1434                           ; 0 bytes @ 0x0
  1435                           
  1436  0070                     ?_deinit_ir:	
  1437                           ; 0 bytes @ 0x0
  1438                           
  1439  0070                     ?_deinit_keypad:	
  1440                           ; 0 bytes @ 0x0
  1441                           
  1442  0070                     ?_init_auto_on:	
  1443                           ; 0 bytes @ 0x0
  1444                           
  1445  0070                     ?_init_relay1:	
  1446                           ; 0 bytes @ 0x0
  1447                           
  1448  0070                     ?_init_relay2:	
  1449                           ; 0 bytes @ 0x0
  1450                           
  1451  0070                     ?_init_led_light:	
  1452                           ; 0 bytes @ 0x0
  1453                           
  1454  0070                     ?_init_led_flash_en1:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_init_led_flash_en2:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_init_led_ol:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_init_led_lock:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_init_led_unlock:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_init_led_phone_button:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_init_audio_switch:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ?_init_internal_clock:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ?_init_i2c:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_i2c_write_handler_word:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_cpu_watchdog_handler:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_InterruptServiceRoutine:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_init_gpio:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_i2c_write_handler_byte:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_strobe_pulse:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_read_ldr:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_get_i2c_msg_from_master_byte:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_get_i2c_msg_from_master_word_msb:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_get_i2c_msg_from_master_word_lsb:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_pop_i2c_reply_status:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_sensor0_detect:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_sensor1_detect:	
  1518                           ; 2 bytes @ 0x0
  1519                           
  1520  0070                     ?_motion_detect:	
  1521                           ; 2 bytes @ 0x0
  1522                           
  1523  0070                     ?_i2c_data_rcv:	
  1524                           ; 2 bytes @ 0x0
  1525                           
  1526  0070                     ?_i2c_bit_info:	
  1527                           ; 2 bytes @ 0x0
  1528                           
  1529  0070                     ?i1_verify_word_address:	
  1530                           ; 2 bytes @ 0x0
  1531                           
  1532  0070                     ?i1_verify_byte_address:	
  1533                           ; 2 bytes @ 0x0
  1534                           
  1535  0070                     pop_i2c_reply_status@reg:	
  1536                           ; 2 bytes @ 0x0
  1537                           
  1538  0070                     i2c_write_handler_byte@reg:	
  1539                           ; 2 bytes @ 0x0
  1540                           
  1541  0070                     i2c_write_handler_word@reg:	
  1542                           ; 2 bytes @ 0x0
  1543                           
  1544                           
  1545                           ; 2 bytes @ 0x0
  1546  0070                     	ds	2
  1547  0072                     ??_i2c_data_rcv:	
  1548  0072                     ??_i2c_bit_info:	
  1549                           ; 0 bytes @ 0x2
  1550                           
  1551  0072                     ??_pop_i2c_reply_status:	
  1552                           ; 0 bytes @ 0x2
  1553                           
  1554  0072                     i2c_write_handler_byte@i2c_data:	
  1555                           ; 0 bytes @ 0x2
  1556                           
  1557  0072                     i2c_write_handler_word@i2c_data_msb:	
  1558                           ; 1 bytes @ 0x2
  1559                           
  1560                           
  1561                           ; 1 bytes @ 0x2
  1562  0072                     	ds	1
  1563  0073                     ??_i2c_write_handler_byte:	
  1564  0073                     ??i1_verify_word_address:	
  1565                           ; 0 bytes @ 0x3
  1566                           
  1567  0073                     ??i1_verify_byte_address:	
  1568                           ; 0 bytes @ 0x3
  1569                           
  1570  0073                     pop_i2c_reply_status@buff:	
  1571                           ; 0 bytes @ 0x3
  1572                           
  1573  0073                     i2c_write_handler_word@i2c_data_lsb:	
  1574                           ; 1 bytes @ 0x3
  1575                           
  1576  0073                     i1verify_word_address@register_add:	
  1577                           ; 1 bytes @ 0x3
  1578                           
  1579  0073                     i1verify_byte_address@register_add:	
  1580                           ; 1 bytes @ 0x3
  1581                           
  1582                           
  1583                           ; 1 bytes @ 0x3
  1584  0073                     	ds	1
  1585  0074                     ??_i2c_write_handler_word:	
  1586  0074                     pop_i2c_reply_status@i:	
  1587                           ; 0 bytes @ 0x4
  1588                           
  1589  0074                     i2c_write_handler_byte@i:	
  1590                           ; 2 bytes @ 0x4
  1591                           
  1592  0074                     i1verify_word_address@i:	
  1593                           ; 2 bytes @ 0x4
  1594                           
  1595  0074                     i1verify_byte_address@i:	
  1596                           ; 2 bytes @ 0x4
  1597                           
  1598                           
  1599                           ; 2 bytes @ 0x4
  1600  0074                     	ds	1
  1601  0075                     i2c_write_handler_word@i:	
  1602                           
  1603                           ; 2 bytes @ 0x5
  1604  0075                     	ds	1
  1605  0076                     ?_read_databyte:	
  1606  0076                     ?_i2c_read_handler:	
  1607                           ; 0 bytes @ 0x6
  1608                           
  1609  0076                     i2c_read_handler@reg:	
  1610                           ; 1 bytes @ 0x6
  1611                           
  1612  0076                     read_databyte@reg:	
  1613                           ; 2 bytes @ 0x6
  1614                           
  1615                           
  1616                           ; 2 bytes @ 0x6
  1617  0076                     	ds	1
  1618  0077                     ?_read_dataword:	
  1619  0077                     read_dataword@reg:	
  1620                           ; 0 bytes @ 0x7
  1621                           
  1622                           
  1623                           ; 2 bytes @ 0x7
  1624  0077                     	ds	1
  1625  0078                     ??_i2c_read_handler:	
  1626  0078                     ??_read_databyte:	
  1627                           ; 0 bytes @ 0x8
  1628                           
  1629                           
  1630                           ; 0 bytes @ 0x8
  1631  0078                     	ds	1
  1632  0079                     ??_read_dataword:	
  1633                           
  1634                           ; 0 bytes @ 0x9
  1635  0079                     	ds	2
  1636  007B                     read_dataword@lsb:	
  1637                           
  1638                           ; 1 bytes @ 0xB
  1639  007B                     	ds	1
  1640  007C                     read_dataword@msb:	
  1641                           
  1642                           ; 1 bytes @ 0xC
  1643  007C                     	ds	1
  1644  007D                     _InterruptServiceRoutine$449:	
  1645                           
  1646                           ; 1 bytes @ 0xD
  1647  007D                     	ds	1
  1648                           
  1649                           	psect	cstackBANK0
  1650  0020                     __pcstackBANK0:	
  1651  0020                     ??_work_i2c_handler:	
  1652                           
  1653                           ; 0 bytes @ 0x0
  1654  0020                     	ds	4
  1655  0024                     work_i2c_handler@reg_data:	
  1656                           
  1657                           ; 1 bytes @ 0x4
  1658  0024                     	ds	1
  1659  0025                     work_i2c_handler@garbage:	
  1660                           
  1661                           ; 1 bytes @ 0x5
  1662  0025                     	ds	1
  1663  0026                     work_i2c_handler@i2c_add:	
  1664                           
  1665                           ; 1 bytes @ 0x6
  1666  0026                     	ds	1
  1667  0027                     work_i2c_handler@reg_add:	
  1668                           
  1669                           ; 1 bytes @ 0x7
  1670  0027                     	ds	1
  1671  0028                     work_i2c_handler@reg:	
  1672                           
  1673                           ; 2 bytes @ 0x8
  1674  0028                     	ds	2
  1675  002A                     ??_InterruptServiceRoutine:	
  1676                           
  1677                           ; 0 bytes @ 0xA
  1678  002A                     	ds	3
  1679  002D                     ??_auto_on:	
  1680  002D                     ??_init_keypad:	
  1681                           ; 0 bytes @ 0xD
  1682                           
  1683  002D                     ??_ir_level_service:	
  1684                           ; 0 bytes @ 0xD
  1685                           
  1686  002D                     ??_i2c_interrupt_handler:	
  1687                           ; 0 bytes @ 0xD
  1688                           
  1689  002D                     ??_shutdown_service:	
  1690                           ; 0 bytes @ 0xD
  1691                           
  1692  002D                     ??_get_i2c_msg_from_master_byte:	
  1693                           ; 0 bytes @ 0xD
  1694                           
  1695  002D                     ??_echo_cancel_on:	
  1696                           ; 0 bytes @ 0xD
  1697                           
  1698  002D                     ??_echo_cancel_off:	
  1699                           ; 0 bytes @ 0xD
  1700                           
  1701  002D                     ??_init_sensor0:	
  1702                           ; 0 bytes @ 0xD
  1703                           
  1704  002D                     ??_deinit_sensor0:	
  1705                           ; 0 bytes @ 0xD
  1706                           
  1707  002D                     ??_init_sensor1:	
  1708                           ; 0 bytes @ 0xD
  1709                           
  1710  002D                     ??_deinit_sensor1:	
  1711                           ; 0 bytes @ 0xD
  1712                           
  1713  002D                     ??_init_motion:	
  1714                           ; 0 bytes @ 0xD
  1715                           
  1716  002D                     ??_deinit_motion:	
  1717                           ; 0 bytes @ 0xD
  1718                           
  1719  002D                     ??_init_ldr:	
  1720                           ; 0 bytes @ 0xD
  1721                           
  1722  002D                     ??_deinit_ldr:	
  1723                           ; 0 bytes @ 0xD
  1724                           
  1725  002D                     ??_init_ir:	
  1726                           ; 0 bytes @ 0xD
  1727                           
  1728  002D                     ??_deinit_ir:	
  1729                           ; 0 bytes @ 0xD
  1730                           
  1731  002D                     ??_deinit_keypad:	
  1732                           ; 0 bytes @ 0xD
  1733                           
  1734  002D                     ??_get_i2c_msg_from_master_word_msb:	
  1735                           ; 0 bytes @ 0xD
  1736                           
  1737  002D                     ??_get_i2c_msg_from_master_word_lsb:	
  1738                           ; 0 bytes @ 0xD
  1739                           
  1740  002D                     ??_init_auto_on:	
  1741                           ; 0 bytes @ 0xD
  1742                           
  1743  002D                     ??_init_relay1:	
  1744                           ; 0 bytes @ 0xD
  1745                           
  1746  002D                     ??_init_relay2:	
  1747                           ; 0 bytes @ 0xD
  1748                           
  1749  002D                     ??_init_led_light:	
  1750                           ; 0 bytes @ 0xD
  1751                           
  1752  002D                     ??_init_led_flash_en1:	
  1753                           ; 0 bytes @ 0xD
  1754                           
  1755  002D                     ??_init_led_flash_en2:	
  1756                           ; 0 bytes @ 0xD
  1757                           
  1758  002D                     ??_init_led_ol:	
  1759                           ; 0 bytes @ 0xD
  1760                           
  1761  002D                     ??_init_led_lock:	
  1762                           ; 0 bytes @ 0xD
  1763                           
  1764  002D                     ??_init_led_unlock:	
  1765                           ; 0 bytes @ 0xD
  1766                           
  1767  002D                     ??_init_led_phone_button:	
  1768                           ; 0 bytes @ 0xD
  1769                           
  1770  002D                     ??_init_audio_switch:	
  1771                           ; 0 bytes @ 0xD
  1772                           
  1773  002D                     ??_init_internal_clock:	
  1774                           ; 0 bytes @ 0xD
  1775                           
  1776  002D                     ??_init_gpio:	
  1777                           ; 0 bytes @ 0xD
  1778                           
  1779  002D                     ??_strobe_pulse:	
  1780                           ; 0 bytes @ 0xD
  1781                           
  1782  002D                     ?_data_ready:	
  1783                           ; 0 bytes @ 0xD
  1784                           
  1785  002D                     ??_read_ldr:	
  1786                           ; 0 bytes @ 0xD
  1787                           
  1788  002D                     ?_get_i2c_regadd_from_master_byte:	
  1789                           ; 0 bytes @ 0xD
  1790                           
  1791  002D                     ?_get_i2c_regadd_from_master_word:	
  1792                           ; 2 bytes @ 0xD
  1793                           
  1794  002D                     ?_memset:	
  1795                           ; 2 bytes @ 0xD
  1796                           
  1797  002D                     ?_verify_byte_address:	
  1798                           ; 2 bytes @ 0xD
  1799                           
  1800  002D                     ?_verify_word_address:	
  1801                           ; 2 bytes @ 0xD
  1802                           
  1803  002D                     ?___ftpack:	
  1804                           ; 2 bytes @ 0xD
  1805                           
  1806  002D                     data_ready@logic:	
  1807                           ; 3 bytes @ 0xD
  1808                           
  1809  002D                     memset@p1:	
  1810                           ; 2 bytes @ 0xD
  1811                           
  1812  002D                     ___ftpack@arg:	
  1813                           ; 2 bytes @ 0xD
  1814                           
  1815                           
  1816                           ; 3 bytes @ 0xD
  1817  002D                     	ds	1
  1818  002E                     ?_cs6422_write_bit:	
  1819  002E                     get_i2c_msg_from_master_byte@buff:	
  1820                           ; 0 bytes @ 0xE
  1821                           
  1822  002E                     get_i2c_msg_from_master_word_lsb@buff:	
  1823                           ; 1 bytes @ 0xE
  1824                           
  1825  002E                     get_i2c_msg_from_master_word_msb@buff:	
  1826                           ; 1 bytes @ 0xE
  1827                           
  1828  002E                     cs6422_write_bit@data_bit:	
  1829                           ; 1 bytes @ 0xE
  1830                           
  1831                           
  1832                           ; 2 bytes @ 0xE
  1833  002E                     	ds	1
  1834  002F                     ??_get_i2c_regadd_from_master_byte:	
  1835  002F                     ??_get_i2c_regadd_from_master_word:	
  1836                           ; 0 bytes @ 0xF
  1837                           
  1838  002F                     ??_data_ready:	
  1839                           ; 0 bytes @ 0xF
  1840                           
  1841  002F                     get_i2c_regadd_from_master_byte@buff:	
  1842                           ; 0 bytes @ 0xF
  1843                           
  1844  002F                     get_i2c_msg_from_master_byte@i:	
  1845                           ; 2 bytes @ 0xF
  1846                           
  1847  002F                     get_i2c_regadd_from_master_word@buff:	
  1848                           ; 2 bytes @ 0xF
  1849                           
  1850  002F                     get_i2c_msg_from_master_word_lsb@i:	
  1851                           ; 2 bytes @ 0xF
  1852                           
  1853  002F                     get_i2c_msg_from_master_word_msb@i:	
  1854                           ; 2 bytes @ 0xF
  1855                           
  1856  002F                     memset@c:	
  1857                           ; 2 bytes @ 0xF
  1858                           
  1859                           
  1860                           ; 2 bytes @ 0xF
  1861  002F                     	ds	1
  1862  0030                     ??_verify_byte_address:	
  1863  0030                     ??_verify_word_address:	
  1864                           ; 0 bytes @ 0x10
  1865                           
  1866  0030                     ??_cpu_watchdog_handler:	
  1867                           ; 0 bytes @ 0x10
  1868                           
  1869  0030                     ??_cs6422_write_bit:	
  1870                           ; 0 bytes @ 0x10
  1871                           
  1872  0030                     ?_cs6422_write_word:	
  1873                           ; 0 bytes @ 0x10
  1874                           
  1875  0030                     verify_word_address@register_add:	
  1876                           ; 2 bytes @ 0x10
  1877                           
  1878  0030                     verify_byte_address@register_add:	
  1879                           ; 1 bytes @ 0x10
  1880                           
  1881  0030                     ___ftpack@exp:	
  1882                           ; 1 bytes @ 0x10
  1883                           
  1884  0030                     cs6422_write_word@data_msb:	
  1885                           ; 1 bytes @ 0x10
  1886                           
  1887                           
  1888                           ; 2 bytes @ 0x10
  1889  0030                     	ds	1
  1890  0031                     ___ftpack@sign:	
  1891  0031                     get_i2c_regadd_from_master_byte@i:	
  1892                           ; 1 bytes @ 0x11
  1893                           
  1894  0031                     verify_word_address@i:	
  1895                           ; 2 bytes @ 0x11
  1896                           
  1897  0031                     get_i2c_regadd_from_master_word@i:	
  1898                           ; 2 bytes @ 0x11
  1899                           
  1900  0031                     verify_byte_address@i:	
  1901                           ; 2 bytes @ 0x11
  1902                           
  1903  0031                     memset@n:	
  1904                           ; 2 bytes @ 0x11
  1905                           
  1906                           
  1907                           ; 2 bytes @ 0x11
  1908  0031                     	ds	1
  1909  0032                     ??___ftpack:	
  1910  0032                     cs6422_write_word@data_lsb:	
  1911                           ; 0 bytes @ 0x12
  1912                           
  1913                           
  1914                           ; 2 bytes @ 0x12
  1915  0032                     	ds	1
  1916  0033                     ??_i2c_databyte_handler:	
  1917  0033                     ??_memset:	
  1918                           ; 0 bytes @ 0x13
  1919                           
  1920  0033                     ?_push_i2c_reply_status:	
  1921                           ; 0 bytes @ 0x13
  1922                           
  1923  0033                     push_i2c_reply_status@i2c_event:	
  1924                           ; 2 bytes @ 0x13
  1925                           
  1926                           
  1927                           ; 1 bytes @ 0x13
  1928  0033                     	ds	1
  1929  0034                     ??_cs6422_write_word:	
  1930  0034                     ??_push_i2c_reply_status:	
  1931                           ; 0 bytes @ 0x14
  1932                           
  1933  0034                     memset@p:	
  1934                           ; 0 bytes @ 0x14
  1935                           
  1936                           
  1937                           ; 2 bytes @ 0x14
  1938  0034                     	ds	1
  1939  0035                     ?___lbtoft:	
  1940  0035                     i2c_databyte_handler@reg:	
  1941                           ; 3 bytes @ 0x15
  1942                           
  1943  0035                     push_i2c_reply_status@reg:	
  1944                           ; 2 bytes @ 0x15
  1945                           
  1946                           
  1947                           ; 2 bytes @ 0x15
  1948  0035                     	ds	1
  1949  0036                     ??_init_mcu:	
  1950  0036                     ??_init_i2c:	
  1951                           ; 0 bytes @ 0x16
  1952                           
  1953                           
  1954                           ; 0 bytes @ 0x16
  1955  0036                     	ds	1
  1956  0037                     push_i2c_reply_status@reg_add:	
  1957  0037                     i2c_databyte_handler@data:	
  1958                           ; 1 bytes @ 0x17
  1959                           
  1960  0037                     cs6422_write_word@reg_num:	
  1961                           ; 2 bytes @ 0x17
  1962                           
  1963                           
  1964                           ; 2 bytes @ 0x17
  1965  0037                     	ds	1
  1966  0038                     ??___lbtoft:	
  1967  0038                     push_i2c_reply_status@i:	
  1968                           ; 0 bytes @ 0x18
  1969                           
  1970                           
  1971                           ; 2 bytes @ 0x18
  1972  0038                     	ds	1
  1973  0039                     cs6422_write_word@data_bit:	
  1974                           
  1975                           ; 2 bytes @ 0x19
  1976  0039                     	ds	1
  1977  003A                     ??_GetKeyPressed:	
  1978  003A                     ??_sensor0_detect:	
  1979                           ; 0 bytes @ 0x1A
  1980                           
  1981  003A                     ??_sensor1_detect:	
  1982                           ; 0 bytes @ 0x1A
  1983                           
  1984  003A                     ??_motion_detect:	
  1985                           ; 0 bytes @ 0x1A
  1986                           
  1987                           
  1988                           ; 0 bytes @ 0x1A
  1989  003A                     	ds	1
  1990  003B                     GetKeyPressed@keypress:	
  1991  003B                     cs6422_write_word@ctr:	
  1992                           ; 1 bytes @ 0x1B
  1993                           
  1994                           
  1995                           ; 2 bytes @ 0x1B
  1996  003B                     	ds	1
  1997  003C                     GetKeyPressed@key:	
  1998  003C                     ___lbtoft@c:	
  1999                           ; 1 bytes @ 0x1C
  2000                           
  2001                           
  2002                           ; 1 bytes @ 0x1C
  2003  003C                     	ds	1
  2004  003D                     ??_i2c_dataword_handler:	
  2005  003D                     ?___ftdiv:	
  2006                           ; 0 bytes @ 0x1D
  2007                           
  2008  003D                     GetKeyPressed@column:	
  2009                           ; 3 bytes @ 0x1D
  2010                           
  2011  003D                     ___ftdiv@f2:	
  2012                           ; 1 bytes @ 0x1D
  2013                           
  2014                           
  2015                           ; 3 bytes @ 0x1D
  2016  003D                     	ds	2
  2017  003F                     i2c_dataword_handler@reg:	
  2018                           
  2019                           ; 2 bytes @ 0x1F
  2020  003F                     	ds	1
  2021  0040                     ___ftdiv@f1:	
  2022                           
  2023                           ; 3 bytes @ 0x20
  2024  0040                     	ds	1
  2025  0041                     i2c_dataword_handler@data_lsb:	
  2026                           
  2027                           ; 2 bytes @ 0x21
  2028  0041                     	ds	2
  2029  0043                     ??___ftdiv:	
  2030  0043                     i2c_dataword_handler@data_msb:	
  2031                           ; 0 bytes @ 0x23
  2032                           
  2033                           
  2034                           ; 2 bytes @ 0x23
  2035  0043                     	ds	4
  2036  0047                     ___ftdiv@cntr:	
  2037                           
  2038                           ; 1 bytes @ 0x27
  2039  0047                     	ds	1
  2040  0048                     ___ftdiv@f3:	
  2041                           
  2042                           ; 3 bytes @ 0x28
  2043  0048                     	ds	3
  2044  004B                     ___ftdiv@exp:	
  2045                           
  2046                           ; 1 bytes @ 0x2B
  2047  004B                     	ds	1
  2048  004C                     ___ftdiv@sign:	
  2049                           
  2050                           ; 1 bytes @ 0x2C
  2051  004C                     	ds	1
  2052  004D                     ?___fttol:	
  2053  004D                     ___fttol@f1:	
  2054                           ; 4 bytes @ 0x2D
  2055                           
  2056                           
  2057                           ; 3 bytes @ 0x2D
  2058  004D                     	ds	4
  2059  0051                     ??___fttol:	
  2060                           
  2061                           ; 0 bytes @ 0x31
  2062  0051                     	ds	4
  2063  0055                     ??_adc_read_service:	
  2064                           
  2065                           ; 0 bytes @ 0x35
  2066  0055                     	ds	1
  2067                           
  2068                           	psect	maintext
  2069  062D                     __pmaintext:	
  2070 ;;
  2071 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2072 ;;
  2073 ;; *************** function _main *****************
  2074 ;; Defined at:
  2075 ;;		line 73 in file "main.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  argc            2    6[BANK1 ] int 
  2078 ;;  argv            2    8[BANK1 ] PTR PTR unsigned char 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  adc_prescale    2   13[BANK3 ] int 
  2081 ;;  i2c_prescale    2   11[BANK3 ] int 
  2082 ;;  sen1_prescal    2    9[BANK3 ] int 
  2083 ;;  sen0_prescal    2    7[BANK3 ] int 
  2084 ;;  mtn_prescale    2    5[BANK3 ] int 
  2085 ;;  shk_prescale    2    3[BANK3 ] int 
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  2    6[BANK1 ] int 
  2088 ;; Registers used:
  2089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2090 ;; Tracked objects:
  2091 ;;		On entry : 17F/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2095 ;;      Params:         0       0       4       0       0       0       0       0
  2096 ;;      Locals:         0       0       0       0      12       0       0       0
  2097 ;;      Temps:          0       0       0       0       3       0       0       0
  2098 ;;      Totals:         0       0       4       0      15       0       0       0
  2099 ;;Total ram usage:       19 bytes
  2100 ;; Hardware stack levels required when called:    8
  2101 ;; This function calls:
  2102 ;;		_cpu_watchdog_handler
  2103 ;;		_auto_on
  2104 ;;		_init_mcu
  2105 ;;		_init_keypad
  2106 ;;		_GetKeyPressed
  2107 ;;		_sensor0_detect
  2108 ;;		_sensor1_detect
  2109 ;;		_motion_detect
  2110 ;;		_adc_read_service
  2111 ;;		_ir_level_service
  2112 ;;		_i2c_interrupt_handler
  2113 ;;		_shutdown_service
  2114 ;;		_i2c_databyte_handler
  2115 ;;		_i2c_dataword_handler
  2116 ;; This function is called by:
  2117 ;;		Startup code after reset
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           
  2122                           ;psect for function _main
  2123  062D                     _main:	
  2124                           
  2125                           ;main.c: 74: int mtn_prescale = 0;
  2126                           
  2127                           ;incstack = 0
  2128                           ; Regs used in _main: [allreg]
  2129  062D  0023               	movlb	3	; select bank3
  2130  062E  01E4               	clrf	main@mtn_prescale^(0+384)
  2131  062F  01E5               	clrf	(main@mtn_prescale+1)^(0+384)
  2132                           
  2133                           ;main.c: 75: int shk_prescale = 0;
  2134  0630  01E2               	clrf	main@shk_prescale^(0+384)
  2135  0631  01E3               	clrf	(main@shk_prescale+1)^(0+384)
  2136                           
  2137                           ;main.c: 76: int sen0_prescale = 0;
  2138  0632  01E6               	clrf	main@sen0_prescale^(0+384)
  2139  0633  01E7               	clrf	(main@sen0_prescale+1)^(0+384)
  2140                           
  2141                           ;main.c: 77: int sen1_prescale = 0;
  2142  0634  01E8               	clrf	main@sen1_prescale^(0+384)
  2143  0635  01E9               	clrf	(main@sen1_prescale+1)^(0+384)
  2144                           
  2145                           ;main.c: 78: int i2c_prescaler_ctr = 0;
  2146  0636  01EA               	clrf	main@i2c_prescaler_ctr^(0+384)
  2147  0637  01EB               	clrf	(main@i2c_prescaler_ctr+1)^(0+384)
  2148                           
  2149                           ;main.c: 79: int adc_prescale = 0;
  2150  0638  01EC               	clrf	main@adc_prescale^(0+384)
  2151  0639  01ED               	clrf	(main@adc_prescale+1)^(0+384)
  2152                           
  2153                           ;main.c: 88: init_mcu();
  2154  063A  3195  2590  3186   	fcall	_init_mcu
  2155                           
  2156                           ;main.c: 90: _delay((unsigned long)((14000)*(4000000/4000.0)));
  2157  063D  3048               	movlw	72
  2158  063E  0023               	movlb	3	; select bank3
  2159  063F  00E1               	movwf	(??_main^(0+384)+2)
  2160  0640  3006               	movlw	6
  2161  0641  00E0               	movwf	(??_main^(0+384)+1)
  2162  0642  30E5               	movlw	229
  2163  0643  00DF               	movwf	??_main^(0+384)
  2164  0644                     u6317:	
  2165  0644  0BDF               	decfsz	??_main^(0+384),f
  2166  0645  2E44               	goto	u6317
  2167  0646  0BE0               	decfsz	(??_main^(0+384)+1),f
  2168  0647  2E44               	goto	u6317
  2169  0648  0BE1               	decfsz	(??_main^(0+384)+2),f
  2170  0649  2E44               	goto	u6317
  2171  064A  2E4B               	nop2
  2172                           
  2173                           ;main.c: 91: auto_on();
  2174  064B  3196  2629  3186   	fcall	_auto_on
  2175  064E                     l4756:	
  2176                           ;main.c: 93: while (1) {
  2177                           
  2178                           
  2179                           ;main.c: 113: if(keypad_en == 1)
  2180  064E  3001               	movlw	1
  2181  064F  0021               	movlb	1	; select bank1
  2182  0650  0630               	xorwf	_keypad_en^(0+128),w
  2183  0651  0431               	iorwf	(_keypad_en+1)^(0+128),w
  2184  0652  1D03               	skipz
  2185  0653  2E5A               	goto	l4762
  2186                           
  2187                           ;main.c: 114: {
  2188                           ;main.c: 115: init_keypad();
  2189  0654  3196  2608  3186   	fcall	_init_keypad
  2190                           
  2191                           ;main.c: 116: GetKeyPressed();
  2192  0657  318B  2378  3186   	fcall	_GetKeyPressed
  2193  065A                     l4762:	
  2194                           
  2195                           ;main.c: 117: }
  2196                           ;main.c: 120: if (sensor0_en >= 1) {
  2197  065A  0020               	movlb	0	; select bank0
  2198  065B  085B               	movf	_sensor0_en+1,w
  2199  065C  3A80               	xorlw	128
  2200  065D  00FF               	movwf	127
  2201  065E  3080               	movlw	128
  2202  065F  027F               	subwf	127,w
  2203  0660  1D03               	skipz
  2204  0661  2E64               	goto	u4575
  2205  0662  3001               	movlw	1
  2206  0663  025A               	subwf	_sensor0_en,w
  2207  0664                     u4575:	
  2208  0664  1C03               	skipc
  2209  0665  2E7E               	goto	l4772
  2210                           
  2211                           ;main.c: 121: if (sen0_prescale > 100) {
  2212  0666  0023               	movlb	3	; select bank3
  2213  0667  0867               	movf	(main@sen0_prescale+1)^(0+384),w
  2214  0668  3A80               	xorlw	128
  2215  0669  00FF               	movwf	127
  2216  066A  3080               	movlw	128
  2217  066B  027F               	subwf	127,w
  2218  066C  1D03               	skipz
  2219  066D  2E70               	goto	u4585
  2220  066E  3065               	movlw	101
  2221  066F  0266               	subwf	main@sen0_prescale^(0+384),w
  2222  0670                     u4585:	
  2223  0670  1C03               	skipc
  2224  0671  2E79               	goto	l4770
  2225                           
  2226                           ;main.c: 122: sensor0_detect();
  2227  0672  318B  23EC  3186   	fcall	_sensor0_detect
  2228                           
  2229                           ;main.c: 123: sen0_prescale = 0;
  2230  0675  0023               	movlb	3	; select bank3
  2231  0676  01E6               	clrf	main@sen0_prescale^(0+384)
  2232  0677  01E7               	clrf	(main@sen0_prescale+1)^(0+384)
  2233                           
  2234                           ;main.c: 124: } else {
  2235  0678  2E7E               	goto	l4772
  2236  0679                     l4770:	
  2237                           
  2238                           ;main.c: 125: sen0_prescale++;
  2239  0679  3001               	movlw	1
  2240  067A  0023               	movlb	3	; select bank3
  2241  067B  07E6               	addwf	main@sen0_prescale^(0+384),f
  2242  067C  3000               	movlw	0
  2243  067D  3DE7               	addwfc	(main@sen0_prescale+1)^(0+384),f
  2244  067E                     l4772:	
  2245                           
  2246                           ;main.c: 126: }
  2247                           ;main.c: 127: }
  2248                           ;main.c: 128: if (sensor1_en >= 1) {
  2249  067E  0020               	movlb	0	; select bank0
  2250  067F  085F               	movf	_sensor1_en+1,w
  2251  0680  3A80               	xorlw	128
  2252  0681  00FF               	movwf	127
  2253  0682  3080               	movlw	128
  2254  0683  027F               	subwf	127,w
  2255  0684  1D03               	skipz
  2256  0685  2E88               	goto	u4595
  2257  0686  3001               	movlw	1
  2258  0687  025E               	subwf	_sensor1_en,w
  2259  0688                     u4595:	
  2260  0688  1C03               	skipc
  2261  0689  2EA2               	goto	l4782
  2262                           
  2263                           ;main.c: 129: if (sen1_prescale > 100) {
  2264  068A  0023               	movlb	3	; select bank3
  2265  068B  0869               	movf	(main@sen1_prescale+1)^(0+384),w
  2266  068C  3A80               	xorlw	128
  2267  068D  00FF               	movwf	127
  2268  068E  3080               	movlw	128
  2269  068F  027F               	subwf	127,w
  2270  0690  1D03               	skipz
  2271  0691  2E94               	goto	u4605
  2272  0692  3065               	movlw	101
  2273  0693  0268               	subwf	main@sen1_prescale^(0+384),w
  2274  0694                     u4605:	
  2275  0694  1C03               	skipc
  2276  0695  2E9D               	goto	l4780
  2277                           
  2278                           ;main.c: 130: sensor1_detect();
  2279  0696  318C  2471  3186   	fcall	_sensor1_detect
  2280                           
  2281                           ;main.c: 131: sen1_prescale = 0;
  2282  0699  0023               	movlb	3	; select bank3
  2283  069A  01E8               	clrf	main@sen1_prescale^(0+384)
  2284  069B  01E9               	clrf	(main@sen1_prescale+1)^(0+384)
  2285                           
  2286                           ;main.c: 132: } else {
  2287  069C  2EA2               	goto	l4782
  2288  069D                     l4780:	
  2289                           
  2290                           ;main.c: 133: sen1_prescale++;
  2291  069D  3001               	movlw	1
  2292  069E  0023               	movlb	3	; select bank3
  2293  069F  07E8               	addwf	main@sen1_prescale^(0+384),f
  2294  06A0  3000               	movlw	0
  2295  06A1  3DE9               	addwfc	(main@sen1_prescale+1)^(0+384),f
  2296  06A2                     l4782:	
  2297                           
  2298                           ;main.c: 134: }
  2299                           ;main.c: 135: }
  2300                           ;main.c: 138: if (motion_en >= 1) {
  2301  06A2  0020               	movlb	0	; select bank0
  2302  06A3  0859               	movf	_motion_en+1,w
  2303  06A4  3A80               	xorlw	128
  2304  06A5  00FF               	movwf	127
  2305  06A6  3080               	movlw	128
  2306  06A7  027F               	subwf	127,w
  2307  06A8  1D03               	skipz
  2308  06A9  2EAC               	goto	u4615
  2309  06AA  3001               	movlw	1
  2310  06AB  0258               	subwf	_motion_en,w
  2311  06AC                     u4615:	
  2312  06AC  1C03               	skipc
  2313  06AD  2EC6               	goto	l241
  2314                           
  2315                           ;main.c: 139: if (mtn_prescale > 100) {
  2316  06AE  0023               	movlb	3	; select bank3
  2317  06AF  0865               	movf	(main@mtn_prescale+1)^(0+384),w
  2318  06B0  3A80               	xorlw	128
  2319  06B1  00FF               	movwf	127
  2320  06B2  3080               	movlw	128
  2321  06B3  027F               	subwf	127,w
  2322  06B4  1D03               	skipz
  2323  06B5  2EB8               	goto	u4625
  2324  06B6  3065               	movlw	101
  2325  06B7  0264               	subwf	main@mtn_prescale^(0+384),w
  2326  06B8                     u4625:	
  2327  06B8  1C03               	skipc
  2328  06B9  2EC1               	goto	l4790
  2329                           
  2330                           ;main.c: 140: motion_detect();
  2331  06BA  318A  2260  3186   	fcall	_motion_detect
  2332                           
  2333                           ;main.c: 141: mtn_prescale = 0;
  2334  06BD  0023               	movlb	3	; select bank3
  2335  06BE  01E4               	clrf	main@mtn_prescale^(0+384)
  2336  06BF  01E5               	clrf	(main@mtn_prescale+1)^(0+384)
  2337                           
  2338                           ;main.c: 142: } else {
  2339  06C0  2EC6               	goto	l241
  2340  06C1                     l4790:	
  2341                           
  2342                           ;main.c: 143: mtn_prescale++;
  2343  06C1  3001               	movlw	1
  2344  06C2  0023               	movlb	3	; select bank3
  2345  06C3  07E4               	addwf	main@mtn_prescale^(0+384),f
  2346  06C4  3000               	movlw	0
  2347  06C5  3DE5               	addwfc	(main@mtn_prescale+1)^(0+384),f
  2348  06C6                     l241:	
  2349                           
  2350                           ;main.c: 144: }
  2351                           ;main.c: 145: }
  2352                           ;main.c: 159: if (ldr_en == 1) {
  2353  06C6  3001               	movlw	1
  2354  06C7  0020               	movlb	0	; select bank0
  2355  06C8  0656               	xorwf	_ldr_en,w
  2356  06C9  0457               	iorwf	_ldr_en+1,w
  2357  06CA  1D03               	skipz
  2358  06CB  2EE4               	goto	l244
  2359                           
  2360                           ;main.c: 160: if (adc_prescale >8000) {
  2361  06CC  0023               	movlb	3	; select bank3
  2362  06CD  086D               	movf	(main@adc_prescale+1)^(0+384),w
  2363  06CE  3A80               	xorlw	128
  2364  06CF  00FF               	movwf	127
  2365  06D0  309F               	movlw	159
  2366  06D1  027F               	subwf	127,w
  2367  06D2  1D03               	skipz
  2368  06D3  2ED6               	goto	u4645
  2369  06D4  3041               	movlw	65
  2370  06D5  026C               	subwf	main@adc_prescale^(0+384),w
  2371  06D6                     u4645:	
  2372  06D6  1C03               	skipc
  2373  06D7  2EDF               	goto	l4798
  2374                           
  2375                           ;main.c: 161: adc_read_service();
  2376  06D8  318A  22BA  3186   	fcall	_adc_read_service
  2377                           
  2378                           ;main.c: 162: adc_prescale = 0;
  2379  06DB  0023               	movlb	3	; select bank3
  2380  06DC  01EC               	clrf	main@adc_prescale^(0+384)
  2381  06DD  01ED               	clrf	(main@adc_prescale+1)^(0+384)
  2382                           
  2383                           ;main.c: 163: } else {
  2384  06DE  2EE4               	goto	l244
  2385  06DF                     l4798:	
  2386                           
  2387                           ;main.c: 164: adc_prescale++;
  2388  06DF  3001               	movlw	1
  2389  06E0  0023               	movlb	3	; select bank3
  2390  06E1  07EC               	addwf	main@adc_prescale^(0+384),f
  2391  06E2  3000               	movlw	0
  2392  06E3  3DED               	addwfc	(main@adc_prescale+1)^(0+384),f
  2393  06E4                     l244:	
  2394                           
  2395                           ;main.c: 165: }
  2396                           ;main.c: 166: }
  2397                           ;main.c: 167: if (ir_en == 1) {
  2398  06E4  3001               	movlw	1
  2399  06E5  0021               	movlb	1	; select bank1
  2400  06E6  062C               	xorwf	_ir_en^(0+128),w
  2401  06E7  042D               	iorwf	(_ir_en+1)^(0+128),w
  2402  06E8  1D03               	skipz
  2403  06E9  2EED               	goto	l4802
  2404                           
  2405                           ;main.c: 168: ir_level_service();
  2406  06EA  3197  2750  3186   	fcall	_ir_level_service
  2407  06ED                     l4802:	
  2408                           
  2409                           ;main.c: 169: }
  2410                           ;main.c: 170: i2c_interrupt_handler();
  2411  06ED  3197  2777  3186   	fcall	_i2c_interrupt_handler
  2412                           
  2413                           ;main.c: 172: cpu_watchdog_handler();
  2414  06F0  3188  20AB  3186   	fcall	_cpu_watchdog_handler
  2415                           
  2416                           ;main.c: 174: shutdown_service();
  2417  06F3  3196  26E5  3186   	fcall	_shutdown_service
  2418                           
  2419                           ;main.c: 176: if (i2c_prescaler_ctr > 100) {
  2420  06F6  0023               	movlb	3	; select bank3
  2421  06F7  086B               	movf	(main@i2c_prescaler_ctr+1)^(0+384),w
  2422  06F8  3A80               	xorlw	128
  2423  06F9  00FF               	movwf	127
  2424  06FA  3080               	movlw	128
  2425  06FB  027F               	subwf	127,w
  2426  06FC  1D03               	skipz
  2427  06FD  2F00               	goto	u4665
  2428  06FE  3065               	movlw	101
  2429  06FF  026A               	subwf	main@i2c_prescaler_ctr^(0+384),w
  2430  0700                     u4665:	
  2431  0700  1C03               	skipc
  2432  0701  2F0B               	goto	l4816
  2433                           
  2434                           ;main.c: 177: i2c_databyte_handler();
  2435  0702  3180  208A  3186   	fcall	_i2c_databyte_handler
  2436                           
  2437                           ;main.c: 178: i2c_dataword_handler();
  2438  0705  3183  23E1  3186   	fcall	_i2c_dataword_handler
  2439                           
  2440                           ;main.c: 179: i2c_prescaler_ctr = 0;
  2441  0708  0023               	movlb	3	; select bank3
  2442  0709  01EA               	clrf	main@i2c_prescaler_ctr^(0+384)
  2443  070A  01EB               	clrf	(main@i2c_prescaler_ctr+1)^(0+384)
  2444  070B                     l4816:	
  2445                           
  2446                           ;main.c: 180: }
  2447                           ;main.c: 181: i2c_prescaler_ctr++;
  2448  070B  3001               	movlw	1
  2449  070C  0023               	movlb	3	; select bank3
  2450  070D  07EA               	addwf	main@i2c_prescaler_ctr^(0+384),f
  2451  070E  3000               	movlw	0
  2452  070F  3DEB               	addwfc	(main@i2c_prescaler_ctr+1)^(0+384),f
  2453  0710  2E4E               	goto	l4756
  2454  0711                     __end_of_main:	
  2455                           ;main.c: 185: }
  2456                           ;main.c: 186: return (0);
  2457                           ;	Return value of _main is never used
  2458                           
  2459                           
  2460                           	psect	text1
  2461  03E1                     __ptext1:	
  2462 ;; *************** function _i2c_dataword_handler *****************
  2463 ;; Defined at:
  2464 ;;		line 525 in file "main.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;		None
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  data_msb        2   35[BANK0 ] int 
  2469 ;;  data_lsb        2   33[BANK0 ] int 
  2470 ;;  reg             2   31[BANK0 ] int 
  2471 ;; Return value:  Size  Location     Type
  2472 ;;		None               void
  2473 ;; Registers used:
  2474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2480 ;;      Params:         0       0       0       0       0       0       0       0
  2481 ;;      Locals:         0       6       0       0       0       0       0       0
  2482 ;;      Temps:          0       2       0       0       0       0       0       0
  2483 ;;      Totals:         0       8       0       0       0       0       0       0
  2484 ;;Total ram usage:        8 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    7
  2487 ;; This function calls:
  2488 ;;		_get_i2c_regadd_from_master_word
  2489 ;;		_get_i2c_msg_from_master_word_msb
  2490 ;;		_get_i2c_msg_from_master_word_lsb
  2491 ;;		_cs6422_write_word
  2492 ;; This function is called by:
  2493 ;;		_main
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           
  2498                           ;psect for function _i2c_dataword_handler
  2499  03E1                     _i2c_dataword_handler:	
  2500                           
  2501                           ;main.c: 526: int data_msb, data_lsb;
  2502                           ;main.c: 527: int reg = 0xFF;
  2503                           
  2504                           ;incstack = 0
  2505                           ; Regs used in _i2c_dataword_handler: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  2506  03E1  30FF               	movlw	255
  2507  03E2  0020               	movlb	0	; select bank0
  2508  03E3  00BF               	movwf	i2c_dataword_handler@reg
  2509  03E4  3000               	movlw	0
  2510  03E5  00C0               	movwf	i2c_dataword_handler@reg+1
  2511                           
  2512                           ;main.c: 528: reg = get_i2c_regadd_from_master_word();
  2513  03E6  3187  27BA  3183   	fcall	_get_i2c_regadd_from_master_word
  2514  03E9  0020               	movlb	0	; select bank0
  2515  03EA  082E               	movf	?_get_i2c_regadd_from_master_word+1,w
  2516  03EB  01C0               	clrf	i2c_dataword_handler@reg+1
  2517  03EC  07C0               	addwf	i2c_dataword_handler@reg+1,f
  2518  03ED  082D               	movf	?_get_i2c_regadd_from_master_word,w
  2519  03EE  01BF               	clrf	i2c_dataword_handler@reg
  2520  03EF  07BF               	addwf	i2c_dataword_handler@reg,f
  2521                           
  2522                           ;main.c: 529: data_msb = get_i2c_msg_from_master_word_msb();
  2523  03F0  3189  2123  3183   	fcall	_get_i2c_msg_from_master_word_msb
  2524  03F3  0020               	movlb	0	; select bank0
  2525  03F4  00BD               	movwf	??_i2c_dataword_handler
  2526  03F5  01BE               	clrf	??_i2c_dataword_handler+1
  2527  03F6  083D               	movf	??_i2c_dataword_handler,w
  2528  03F7  00C3               	movwf	i2c_dataword_handler@data_msb
  2529  03F8  083E               	movf	??_i2c_dataword_handler+1,w
  2530  03F9  00C4               	movwf	i2c_dataword_handler@data_msb+1
  2531                           
  2532                           ;main.c: 530: data_lsb = get_i2c_msg_from_master_word_lsb();
  2533  03FA  3189  2160  3183   	fcall	_get_i2c_msg_from_master_word_lsb
  2534  03FD  0020               	movlb	0	; select bank0
  2535  03FE  00BD               	movwf	??_i2c_dataword_handler
  2536  03FF  01BE               	clrf	??_i2c_dataword_handler+1
  2537  0400  083D               	movf	??_i2c_dataword_handler,w
  2538  0401  00C1               	movwf	i2c_dataword_handler@data_lsb
  2539  0402  083E               	movf	??_i2c_dataword_handler+1,w
  2540  0403  00C2               	movwf	i2c_dataword_handler@data_lsb+1
  2541                           
  2542                           ;main.c: 531: debug_reg = reg;
  2543  0404  0840               	movf	i2c_dataword_handler@reg+1,w
  2544  0405  0021               	movlb	1	; select bank1
  2545  0406  01A5               	clrf	(_debug_reg+1)^(0+128)
  2546  0407  07A5               	addwf	(_debug_reg+1)^(0+128),f
  2547  0408  0020               	movlb	0	; select bank0
  2548  0409  083F               	movf	i2c_dataword_handler@reg,w
  2549  040A  0021               	movlb	1	; select bank1
  2550  040B  01A4               	clrf	_debug_reg^(0+128)
  2551  040C  07A4               	addwf	_debug_reg^(0+128),f
  2552                           
  2553                           ;main.c: 532: debug_msb = data_msb;
  2554  040D  0020               	movlb	0	; select bank0
  2555  040E  0843               	movf	i2c_dataword_handler@data_msb,w
  2556  040F  00BD               	movwf	??_i2c_dataword_handler
  2557  0410  083D               	movf	??_i2c_dataword_handler,w
  2558  0411  0021               	movlb	1	; select bank1
  2559  0412  00CF               	movwf	_debug_msb^(0+128)
  2560                           
  2561                           ;main.c: 533: debug_lsb = data_lsb;
  2562  0413  0020               	movlb	0	; select bank0
  2563  0414  0841               	movf	i2c_dataword_handler@data_lsb,w
  2564  0415  00BD               	movwf	??_i2c_dataword_handler
  2565  0416  083D               	movf	??_i2c_dataword_handler,w
  2566  0417  0021               	movlb	1	; select bank1
  2567  0418  00CE               	movwf	_debug_lsb^(0+128)
  2568                           
  2569                           ;main.c: 534: switch (i2c_reg_add_word[reg]) {
  2570  0419  2CF2               	goto	l5404
  2571  041A                     l5378:	
  2572                           ;main.c: 535: case 0xD0:
  2573                           
  2574                           
  2575                           ;main.c: 536: ec_msb[0] = data_msb;
  2576  041A  0020               	movlb	0	; select bank0
  2577  041B  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2578  041C  0022               	movlb	2	; select bank2
  2579  041D  01AD               	clrf	(_ec_msb+1)^(0+256)
  2580  041E  07AD               	addwf	(_ec_msb+1)^(0+256),f
  2581  041F  0020               	movlb	0	; select bank0
  2582  0420  0843               	movf	i2c_dataword_handler@data_msb,w
  2583  0421  0022               	movlb	2	; select bank2
  2584  0422  01AC               	clrf	_ec_msb^(0+256)
  2585  0423  07AC               	addwf	_ec_msb^(0+256),f
  2586                           
  2587                           ;main.c: 537: ec_lsb[0] = data_msb;
  2588  0424  0020               	movlb	0	; select bank0
  2589  0425  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2590  0426  0022               	movlb	2	; select bank2
  2591  0427  01A1               	clrf	(_ec_lsb+1)^(0+256)
  2592  0428  07A1               	addwf	(_ec_lsb+1)^(0+256),f
  2593  0429  0020               	movlb	0	; select bank0
  2594  042A  0843               	movf	i2c_dataword_handler@data_msb,w
  2595  042B  0022               	movlb	2	; select bank2
  2596  042C  01A0               	clrf	_ec_lsb^(0+256)
  2597  042D  07A0               	addwf	_ec_lsb^(0+256),f
  2598                           
  2599                           ;main.c: 538: cs6422_write_word(data_msb, data_lsb);
  2600  042E  0020               	movlb	0	; select bank0
  2601  042F  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2602  0430  01B1               	clrf	?_cs6422_write_word+1
  2603  0431  07B1               	addwf	?_cs6422_write_word+1,f
  2604  0432  0843               	movf	i2c_dataword_handler@data_msb,w
  2605  0433  01B0               	clrf	?_cs6422_write_word
  2606  0434  07B0               	addwf	?_cs6422_write_word,f
  2607  0435  0842               	movf	i2c_dataword_handler@data_lsb+1,w
  2608  0436  01B3               	clrf	?_cs6422_write_word+3
  2609  0437  07B3               	addwf	?_cs6422_write_word+3,f
  2610  0438  0841               	movf	i2c_dataword_handler@data_lsb,w
  2611  0439  01B2               	clrf	?_cs6422_write_word+2
  2612  043A  07B2               	addwf	?_cs6422_write_word+2,f
  2613  043B  318D  2583         	fcall	_cs6422_write_word
  2614                           
  2615                           ;main.c: 539: break;
  2616  043D  0008               	return
  2617  043E                     l5382:	
  2618                           ;main.c: 540: case 0xD1:
  2619                           
  2620                           
  2621                           ;main.c: 541: ec_msb[1] = data_msb;
  2622  043E  0020               	movlb	0	; select bank0
  2623  043F  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2624  0440  0022               	movlb	2	; select bank2
  2625  0441  01AF               	clrf	((_ec_msb+1)^(0+256)+2)
  2626  0442  07AF               	addwf	((_ec_msb+1)^(0+256)+2),f
  2627  0443  0020               	movlb	0	; select bank0
  2628  0444  0843               	movf	i2c_dataword_handler@data_msb,w
  2629  0445  0022               	movlb	2	; select bank2
  2630  0446  01AE               	clrf	(_ec_msb^(0+256)+2)
  2631  0447  07AE               	addwf	(_ec_msb^(0+256)+2),f
  2632                           
  2633                           ;main.c: 542: ec_lsb[1] = data_msb;
  2634  0448  0020               	movlb	0	; select bank0
  2635  0449  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2636  044A  0022               	movlb	2	; select bank2
  2637  044B  01A3               	clrf	((_ec_lsb+1)^(0+256)+2)
  2638  044C  07A3               	addwf	((_ec_lsb+1)^(0+256)+2),f
  2639  044D  0020               	movlb	0	; select bank0
  2640  044E  0843               	movf	i2c_dataword_handler@data_msb,w
  2641  044F  0022               	movlb	2	; select bank2
  2642  0450  01A2               	clrf	(_ec_lsb^(0+256)+2)
  2643  0451  07A2               	addwf	(_ec_lsb^(0+256)+2),f
  2644                           
  2645                           ;main.c: 543: cs6422_write_word(data_msb, data_lsb);
  2646  0452  0020               	movlb	0	; select bank0
  2647  0453  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2648  0454  01B1               	clrf	?_cs6422_write_word+1
  2649  0455  07B1               	addwf	?_cs6422_write_word+1,f
  2650  0456  0843               	movf	i2c_dataword_handler@data_msb,w
  2651  0457  01B0               	clrf	?_cs6422_write_word
  2652  0458  07B0               	addwf	?_cs6422_write_word,f
  2653  0459  0842               	movf	i2c_dataword_handler@data_lsb+1,w
  2654  045A  01B3               	clrf	?_cs6422_write_word+3
  2655  045B  07B3               	addwf	?_cs6422_write_word+3,f
  2656  045C  0841               	movf	i2c_dataword_handler@data_lsb,w
  2657  045D  01B2               	clrf	?_cs6422_write_word+2
  2658  045E  07B2               	addwf	?_cs6422_write_word+2,f
  2659  045F  318D  2583         	fcall	_cs6422_write_word
  2660                           
  2661                           ;main.c: 544: break;
  2662  0461  0008               	return
  2663  0462                     l5386:	
  2664                           ;main.c: 545: case 0xD2:
  2665                           
  2666                           
  2667                           ;main.c: 546: ec_msb[2] = data_msb;
  2668  0462  0020               	movlb	0	; select bank0
  2669  0463  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2670  0464  0022               	movlb	2	; select bank2
  2671  0465  01B1               	clrf	((_ec_msb+1)^(0+256)+4)
  2672  0466  07B1               	addwf	((_ec_msb+1)^(0+256)+4),f
  2673  0467  0020               	movlb	0	; select bank0
  2674  0468  0843               	movf	i2c_dataword_handler@data_msb,w
  2675  0469  0022               	movlb	2	; select bank2
  2676  046A  01B0               	clrf	(_ec_msb^(0+256)+4)
  2677  046B  07B0               	addwf	(_ec_msb^(0+256)+4),f
  2678                           
  2679                           ;main.c: 547: ec_lsb[2] = data_msb;
  2680  046C  0020               	movlb	0	; select bank0
  2681  046D  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2682  046E  0022               	movlb	2	; select bank2
  2683  046F  01A5               	clrf	((_ec_lsb+1)^(0+256)+4)
  2684  0470  07A5               	addwf	((_ec_lsb+1)^(0+256)+4),f
  2685  0471  0020               	movlb	0	; select bank0
  2686  0472  0843               	movf	i2c_dataword_handler@data_msb,w
  2687  0473  0022               	movlb	2	; select bank2
  2688  0474  01A4               	clrf	(_ec_lsb^(0+256)+4)
  2689  0475  07A4               	addwf	(_ec_lsb^(0+256)+4),f
  2690                           
  2691                           ;main.c: 548: cs6422_write_word(data_msb, data_lsb);
  2692  0476  0020               	movlb	0	; select bank0
  2693  0477  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2694  0478  01B1               	clrf	?_cs6422_write_word+1
  2695  0479  07B1               	addwf	?_cs6422_write_word+1,f
  2696  047A  0843               	movf	i2c_dataword_handler@data_msb,w
  2697  047B  01B0               	clrf	?_cs6422_write_word
  2698  047C  07B0               	addwf	?_cs6422_write_word,f
  2699  047D  0842               	movf	i2c_dataword_handler@data_lsb+1,w
  2700  047E  01B3               	clrf	?_cs6422_write_word+3
  2701  047F  07B3               	addwf	?_cs6422_write_word+3,f
  2702  0480  0841               	movf	i2c_dataword_handler@data_lsb,w
  2703  0481  01B2               	clrf	?_cs6422_write_word+2
  2704  0482  07B2               	addwf	?_cs6422_write_word+2,f
  2705  0483  318D  2583         	fcall	_cs6422_write_word
  2706                           
  2707                           ;main.c: 549: break;
  2708  0485  0008               	return
  2709  0486                     l5390:	
  2710                           ;main.c: 550: case 0xD3:
  2711                           
  2712                           
  2713                           ;main.c: 551: ec_msb[3] = data_msb;
  2714  0486  0020               	movlb	0	; select bank0
  2715  0487  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2716  0488  0022               	movlb	2	; select bank2
  2717  0489  01B3               	clrf	((_ec_msb+1)^(0+256)+6)
  2718  048A  07B3               	addwf	((_ec_msb+1)^(0+256)+6),f
  2719  048B  0020               	movlb	0	; select bank0
  2720  048C  0843               	movf	i2c_dataword_handler@data_msb,w
  2721  048D  0022               	movlb	2	; select bank2
  2722  048E  01B2               	clrf	(_ec_msb^(0+256)+6)
  2723  048F  07B2               	addwf	(_ec_msb^(0+256)+6),f
  2724                           
  2725                           ;main.c: 552: ec_lsb[3] = data_msb;
  2726  0490  0020               	movlb	0	; select bank0
  2727  0491  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2728  0492  0022               	movlb	2	; select bank2
  2729  0493  01A7               	clrf	((_ec_lsb+1)^(0+256)+6)
  2730  0494  07A7               	addwf	((_ec_lsb+1)^(0+256)+6),f
  2731  0495  0020               	movlb	0	; select bank0
  2732  0496  0843               	movf	i2c_dataword_handler@data_msb,w
  2733  0497  0022               	movlb	2	; select bank2
  2734  0498  01A6               	clrf	(_ec_lsb^(0+256)+6)
  2735  0499  07A6               	addwf	(_ec_lsb^(0+256)+6),f
  2736                           
  2737                           ;main.c: 553: cs6422_write_word(data_msb, data_lsb);
  2738  049A  0020               	movlb	0	; select bank0
  2739  049B  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2740  049C  01B1               	clrf	?_cs6422_write_word+1
  2741  049D  07B1               	addwf	?_cs6422_write_word+1,f
  2742  049E  0843               	movf	i2c_dataword_handler@data_msb,w
  2743  049F  01B0               	clrf	?_cs6422_write_word
  2744  04A0  07B0               	addwf	?_cs6422_write_word,f
  2745  04A1  0842               	movf	i2c_dataword_handler@data_lsb+1,w
  2746  04A2  01B3               	clrf	?_cs6422_write_word+3
  2747  04A3  07B3               	addwf	?_cs6422_write_word+3,f
  2748  04A4  0841               	movf	i2c_dataword_handler@data_lsb,w
  2749  04A5  01B2               	clrf	?_cs6422_write_word+2
  2750  04A6  07B2               	addwf	?_cs6422_write_word+2,f
  2751  04A7  318D  2583         	fcall	_cs6422_write_word
  2752                           
  2753                           ;main.c: 554: break;
  2754  04A9  0008               	return
  2755  04AA                     l5394:	
  2756                           ;main.c: 555: case 0xD4:
  2757                           
  2758                           
  2759                           ;main.c: 556: ec_msb[4] = data_msb;
  2760  04AA  0020               	movlb	0	; select bank0
  2761  04AB  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2762  04AC  0022               	movlb	2	; select bank2
  2763  04AD  01B5               	clrf	((_ec_msb+1)^(0+256)+8)
  2764  04AE  07B5               	addwf	((_ec_msb+1)^(0+256)+8),f
  2765  04AF  0020               	movlb	0	; select bank0
  2766  04B0  0843               	movf	i2c_dataword_handler@data_msb,w
  2767  04B1  0022               	movlb	2	; select bank2
  2768  04B2  01B4               	clrf	(_ec_msb^(0+256)+8)
  2769  04B3  07B4               	addwf	(_ec_msb^(0+256)+8),f
  2770                           
  2771                           ;main.c: 557: ec_lsb[4] = data_msb;
  2772  04B4  0020               	movlb	0	; select bank0
  2773  04B5  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2774  04B6  0022               	movlb	2	; select bank2
  2775  04B7  01A9               	clrf	((_ec_lsb+1)^(0+256)+8)
  2776  04B8  07A9               	addwf	((_ec_lsb+1)^(0+256)+8),f
  2777  04B9  0020               	movlb	0	; select bank0
  2778  04BA  0843               	movf	i2c_dataword_handler@data_msb,w
  2779  04BB  0022               	movlb	2	; select bank2
  2780  04BC  01A8               	clrf	(_ec_lsb^(0+256)+8)
  2781  04BD  07A8               	addwf	(_ec_lsb^(0+256)+8),f
  2782                           
  2783                           ;main.c: 558: cs6422_write_word(data_msb, data_lsb);
  2784  04BE  0020               	movlb	0	; select bank0
  2785  04BF  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2786  04C0  01B1               	clrf	?_cs6422_write_word+1
  2787  04C1  07B1               	addwf	?_cs6422_write_word+1,f
  2788  04C2  0843               	movf	i2c_dataword_handler@data_msb,w
  2789  04C3  01B0               	clrf	?_cs6422_write_word
  2790  04C4  07B0               	addwf	?_cs6422_write_word,f
  2791  04C5  0842               	movf	i2c_dataword_handler@data_lsb+1,w
  2792  04C6  01B3               	clrf	?_cs6422_write_word+3
  2793  04C7  07B3               	addwf	?_cs6422_write_word+3,f
  2794  04C8  0841               	movf	i2c_dataword_handler@data_lsb,w
  2795  04C9  01B2               	clrf	?_cs6422_write_word+2
  2796  04CA  07B2               	addwf	?_cs6422_write_word+2,f
  2797  04CB  318D  2583         	fcall	_cs6422_write_word
  2798                           
  2799                           ;main.c: 559: break;
  2800  04CD  0008               	return
  2801  04CE                     l5398:	
  2802                           ;main.c: 560: case 0xD5:
  2803                           
  2804                           
  2805                           ;main.c: 561: ec_msb[5] = data_msb;
  2806  04CE  0020               	movlb	0	; select bank0
  2807  04CF  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2808  04D0  0022               	movlb	2	; select bank2
  2809  04D1  01B7               	clrf	((_ec_msb+1)^(0+256)+10)
  2810  04D2  07B7               	addwf	((_ec_msb+1)^(0+256)+10),f
  2811  04D3  0020               	movlb	0	; select bank0
  2812  04D4  0843               	movf	i2c_dataword_handler@data_msb,w
  2813  04D5  0022               	movlb	2	; select bank2
  2814  04D6  01B6               	clrf	(_ec_msb^(0+256)+10)
  2815  04D7  07B6               	addwf	(_ec_msb^(0+256)+10),f
  2816                           
  2817                           ;main.c: 562: ec_lsb[5] = data_msb;
  2818  04D8  0020               	movlb	0	; select bank0
  2819  04D9  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2820  04DA  0022               	movlb	2	; select bank2
  2821  04DB  01AB               	clrf	((_ec_lsb+1)^(0+256)+10)
  2822  04DC  07AB               	addwf	((_ec_lsb+1)^(0+256)+10),f
  2823  04DD  0020               	movlb	0	; select bank0
  2824  04DE  0843               	movf	i2c_dataword_handler@data_msb,w
  2825  04DF  0022               	movlb	2	; select bank2
  2826  04E0  01AA               	clrf	(_ec_lsb^(0+256)+10)
  2827  04E1  07AA               	addwf	(_ec_lsb^(0+256)+10),f
  2828                           
  2829                           ;main.c: 563: cs6422_write_word(data_msb, data_lsb);
  2830  04E2  0020               	movlb	0	; select bank0
  2831  04E3  0844               	movf	i2c_dataword_handler@data_msb+1,w
  2832  04E4  01B1               	clrf	?_cs6422_write_word+1
  2833  04E5  07B1               	addwf	?_cs6422_write_word+1,f
  2834  04E6  0843               	movf	i2c_dataword_handler@data_msb,w
  2835  04E7  01B0               	clrf	?_cs6422_write_word
  2836  04E8  07B0               	addwf	?_cs6422_write_word,f
  2837  04E9  0842               	movf	i2c_dataword_handler@data_lsb+1,w
  2838  04EA  01B3               	clrf	?_cs6422_write_word+3
  2839  04EB  07B3               	addwf	?_cs6422_write_word+3,f
  2840  04EC  0841               	movf	i2c_dataword_handler@data_lsb,w
  2841  04ED  01B2               	clrf	?_cs6422_write_word+2
  2842  04EE  07B2               	addwf	?_cs6422_write_word+2,f
  2843  04EF  318D  2583         	fcall	_cs6422_write_word
  2844                           
  2845                           ;main.c: 567: }
  2846                           
  2847                           ;main.c: 566: break;
  2848                           
  2849                           ;main.c: 565: default:
  2850                           
  2851                           ;main.c: 564: break;
  2852  04F1  0008               	return
  2853  04F2                     l5404:	
  2854  04F2  0020               	movlb	0	; select bank0
  2855  04F3  083F               	movf	i2c_dataword_handler@reg,w
  2856  04F4  3E68               	addlw	_i2c_reg_add_word& (0+255)
  2857  04F5  0086               	movwf	6
  2858  04F6  3001               	movlw	1	; select bank2/3
  2859  04F7  0087               	movwf	7
  2860  04F8  0801               	movf	1,w
  2861                           
  2862                           ; Switch size 1, requested type "space"
  2863                           ; Number of cases is 6, Range of values is 208 to 213
  2864                           ; switch strategies available:
  2865                           ; Name         Instructions Cycles
  2866                           ; simple_byte           19    10 (average)
  2867                           ; direct_byte           21     9 (fixed)
  2868                           ; jumptable            263     9 (fixed)
  2869                           ;	Chosen strategy is simple_byte
  2870  04F9  3AD0               	xorlw	208	; case 208
  2871  04FA  1903               	skipnz
  2872  04FB  2C1A               	goto	l5378
  2873  04FC  3A01               	xorlw	1	; case 209
  2874  04FD  1903               	skipnz
  2875  04FE  2C3E               	goto	l5382
  2876  04FF  3A03               	xorlw	3	; case 210
  2877  0500  1903               	skipnz
  2878  0501  2C62               	goto	l5386
  2879  0502  3A01               	xorlw	1	; case 211
  2880  0503  1903               	skipnz
  2881  0504  2C86               	goto	l5390
  2882  0505  3A07               	xorlw	7	; case 212
  2883  0506  1903               	skipnz
  2884  0507  2CAA               	goto	l5394
  2885  0508  3A01               	xorlw	1	; case 213
  2886  0509  1903               	skipnz
  2887  050A  2CCE               	goto	l5398
  2888  050B  2D0C               	goto	l399
  2889  050C                     l399:	
  2890  050C  0008               	return
  2891  050D                     __end_of_i2c_dataword_handler:	
  2892                           
  2893                           	psect	text2
  2894  0D83                     __ptext2:	
  2895 ;; *************** function _cs6422_write_word *****************
  2896 ;; Defined at:
  2897 ;;		line 43 in file "CS6422_Api.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  data_msb        2   16[BANK0 ] int 
  2900 ;;  data_lsb        2   18[BANK0 ] int 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  ctr             2   27[BANK0 ] int 
  2903 ;;  data_bit        2   25[BANK0 ] int 
  2904 ;;  reg_num         2   23[BANK0 ] int 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  2   16[BANK0 ] int 
  2907 ;; Registers used:
  2908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2914 ;;      Params:         0       4       0       0       0       0       0       0
  2915 ;;      Locals:         0       6       0       0       0       0       0       0
  2916 ;;      Temps:          0       3       0       0       0       0       0       0
  2917 ;;      Totals:         0      13       0       0       0       0       0       0
  2918 ;;Total ram usage:       13 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    6
  2921 ;; This function calls:
  2922 ;;		_strobe_pulse
  2923 ;;		_data_ready
  2924 ;;		_cs6422_write_bit
  2925 ;; This function is called by:
  2926 ;;		_i2c_dataword_handler
  2927 ;;		_echo_write_allreg
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           
  2932                           ;psect for function _cs6422_write_word
  2933  0D83                     _cs6422_write_word:	
  2934                           
  2935                           ;CS6422_Api.c: 44: int data_bit = 0;
  2936                           
  2937                           ;incstack = 0
  2938                           ; Regs used in _cs6422_write_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2939  0D83  0020               	movlb	0	; select bank0
  2940  0D84  01B9               	clrf	cs6422_write_word@data_bit
  2941  0D85  01BA               	clrf	cs6422_write_word@data_bit+1
  2942                           
  2943                           ;CS6422_Api.c: 45: int ctr = 15;
  2944  0D86  300F               	movlw	15
  2945  0D87  00BB               	movwf	cs6422_write_word@ctr
  2946  0D88  3000               	movlw	0
  2947  0D89  00BC               	movwf	cs6422_write_word@ctr+1
  2948                           
  2949                           ;CS6422_Api.c: 46: int reg_num;
  2950                           ;CS6422_Api.c: 49: data_ready(0);
  2951  0D8A  3000               	movlw	0
  2952  0D8B  00AD               	movwf	?_data_ready
  2953  0D8C  3000               	movlw	0
  2954  0D8D  00AE               	movwf	?_data_ready+1
  2955  0D8E  3195  25DC  318D   	fcall	_data_ready
  2956                           
  2957                           ;CS6422_Api.c: 51: reg_num = (data_lsb & 0x0f) >> 1;
  2958  0D91  0020               	movlb	0	; select bank0
  2959  0D92  0833               	movf	cs6422_write_word@data_lsb+1,w
  2960  0D93  00B5               	movwf	??_cs6422_write_word+1
  2961  0D94  0832               	movf	cs6422_write_word@data_lsb,w
  2962  0D95  00B4               	movwf	??_cs6422_write_word
  2963  0D96  0D35               	rlf	??_cs6422_write_word+1,w
  2964  0D97  0CB5               	rrf	??_cs6422_write_word+1,f
  2965  0D98  0CB4               	rrf	??_cs6422_write_word,f
  2966  0D99  3007               	movlw	7
  2967  0D9A  0534               	andwf	??_cs6422_write_word,w
  2968  0D9B  00B7               	movwf	cs6422_write_word@reg_num
  2969  0D9C  3000               	movlw	0
  2970  0D9D  0535               	andwf	??_cs6422_write_word+1,w
  2971  0D9E  00B8               	movwf	cs6422_write_word@reg_num+1
  2972                           
  2973                           ;CS6422_Api.c: 53: ec_msb[reg_num] = data_msb;
  2974  0D9F  3537               	lslf	cs6422_write_word@reg_num,w
  2975  0DA0  3E2C               	addlw	_ec_msb& (0+255)
  2976  0DA1  0086               	movwf	6
  2977  0DA2  3001               	movlw	1	; select bank2/3
  2978  0DA3  0087               	movwf	7
  2979  0DA4  0830               	movf	cs6422_write_word@data_msb,w
  2980  0DA5  3FC0               	movwi [0]fsr1
  2981  0DA6  0831               	movf	cs6422_write_word@data_msb+1,w
  2982  0DA7  3FC1               	movwi [1]fsr1
  2983                           
  2984                           ;CS6422_Api.c: 54: ec_lsb[reg_num] = data_lsb;
  2985  0DA8  3537               	lslf	cs6422_write_word@reg_num,w
  2986  0DA9  3E20               	addlw	_ec_lsb& (0+255)
  2987  0DAA  0086               	movwf	6
  2988  0DAB  3001               	movlw	1	; select bank2/3
  2989  0DAC  0087               	movwf	7
  2990  0DAD  0832               	movf	cs6422_write_word@data_lsb,w
  2991  0DAE  3FC0               	movwi [0]fsr1
  2992  0DAF  0833               	movf	cs6422_write_word@data_lsb+1,w
  2993  0DB0  3FC1               	movwi [1]fsr1
  2994                           
  2995                           ;CS6422_Api.c: 55: for (ctr = 7; ctr > -1; ctr--)
  2996  0DB1  3007               	movlw	7
  2997  0DB2  00BB               	movwf	cs6422_write_word@ctr
  2998  0DB3  3000               	movlw	0
  2999  0DB4  00BC               	movwf	cs6422_write_word@ctr+1
  3000  0DB5  1BBC               	btfsc	cs6422_write_word@ctr+1,7
  3001  0DB6  2DDC               	goto	l5576
  3002  0DB7                     l5566:	
  3003                           
  3004                           ;CS6422_Api.c: 56: {
  3005                           ;CS6422_Api.c: 57: data_bit = (data_msb >> ctr);
  3006  0DB7  0A3B               	incf	cs6422_write_word@ctr,w
  3007  0DB8  00B4               	movwf	??_cs6422_write_word
  3008  0DB9  0831               	movf	cs6422_write_word@data_msb+1,w
  3009  0DBA  00B6               	movwf	??_cs6422_write_word+2
  3010  0DBB  0830               	movf	cs6422_write_word@data_msb,w
  3011  0DBC  00B5               	movwf	??_cs6422_write_word+1
  3012  0DBD  2DC1               	goto	u5824
  3013  0DBE                     u5825:	
  3014  0DBE  0D36               	rlf	??_cs6422_write_word+2,w
  3015  0DBF  0CB6               	rrf	??_cs6422_write_word+2,f
  3016  0DC0  0CB5               	rrf	??_cs6422_write_word+1,f
  3017  0DC1                     u5824:	
  3018  0DC1  0BB4               	decfsz	??_cs6422_write_word,f
  3019  0DC2  2DBE               	goto	u5825
  3020  0DC3  0020               	movlb	0	; select bank0
  3021  0DC4  0835               	movf	??_cs6422_write_word+1,w
  3022  0DC5  00B9               	movwf	cs6422_write_word@data_bit
  3023  0DC6  0836               	movf	??_cs6422_write_word+2,w
  3024  0DC7  00BA               	movwf	cs6422_write_word@data_bit+1
  3025                           
  3026                           ;CS6422_Api.c: 58: data_bit &= 0x01;
  3027  0DC8  3001               	movlw	1
  3028  0DC9  05B9               	andwf	cs6422_write_word@data_bit,f
  3029  0DCA  3000               	movlw	0
  3030  0DCB  05BA               	andwf	cs6422_write_word@data_bit+1,f
  3031                           
  3032                           ;CS6422_Api.c: 60: cs6422_write_bit(data_bit);
  3033  0DCC  083A               	movf	cs6422_write_word@data_bit+1,w
  3034  0DCD  01AF               	clrf	?_cs6422_write_bit+1
  3035  0DCE  07AF               	addwf	?_cs6422_write_bit+1,f
  3036  0DCF  0839               	movf	cs6422_write_word@data_bit,w
  3037  0DD0  01AE               	clrf	?_cs6422_write_bit
  3038  0DD1  07AE               	addwf	?_cs6422_write_bit,f
  3039  0DD2  3195  2599  318D   	fcall	_cs6422_write_bit
  3040  0DD5  30FF               	movlw	255
  3041  0DD6  0020               	movlb	0	; select bank0
  3042  0DD7  07BB               	addwf	cs6422_write_word@ctr,f
  3043  0DD8  30FF               	movlw	255
  3044  0DD9  3DBC               	addwfc	cs6422_write_word@ctr+1,f
  3045  0DDA  1FBC               	btfss	cs6422_write_word@ctr+1,7
  3046  0DDB  2DB7               	goto	l5566
  3047  0DDC                     l5576:	
  3048                           
  3049                           ;CS6422_Api.c: 61: }
  3050                           ;CS6422_Api.c: 62: for (ctr = 7; ctr > -1; ctr--)
  3051  0DDC  3007               	movlw	7
  3052  0DDD  00BB               	movwf	cs6422_write_word@ctr
  3053  0DDE  3000               	movlw	0
  3054  0DDF  00BC               	movwf	cs6422_write_word@ctr+1
  3055  0DE0  1BBC               	btfsc	cs6422_write_word@ctr+1,7
  3056  0DE1  2E07               	goto	l5592
  3057  0DE2                     l5582:	
  3058                           
  3059                           ;CS6422_Api.c: 63: {
  3060                           ;CS6422_Api.c: 64: data_bit = (data_lsb >> ctr);
  3061  0DE2  0A3B               	incf	cs6422_write_word@ctr,w
  3062  0DE3  00B4               	movwf	??_cs6422_write_word
  3063  0DE4  0833               	movf	cs6422_write_word@data_lsb+1,w
  3064  0DE5  00B6               	movwf	??_cs6422_write_word+2
  3065  0DE6  0832               	movf	cs6422_write_word@data_lsb,w
  3066  0DE7  00B5               	movwf	??_cs6422_write_word+1
  3067  0DE8  2DEC               	goto	u5854
  3068  0DE9                     u5855:	
  3069  0DE9  0D36               	rlf	??_cs6422_write_word+2,w
  3070  0DEA  0CB6               	rrf	??_cs6422_write_word+2,f
  3071  0DEB  0CB5               	rrf	??_cs6422_write_word+1,f
  3072  0DEC                     u5854:	
  3073  0DEC  0BB4               	decfsz	??_cs6422_write_word,f
  3074  0DED  2DE9               	goto	u5855
  3075  0DEE  0020               	movlb	0	; select bank0
  3076  0DEF  0835               	movf	??_cs6422_write_word+1,w
  3077  0DF0  00B9               	movwf	cs6422_write_word@data_bit
  3078  0DF1  0836               	movf	??_cs6422_write_word+2,w
  3079  0DF2  00BA               	movwf	cs6422_write_word@data_bit+1
  3080                           
  3081                           ;CS6422_Api.c: 65: data_bit &= 0x01;
  3082  0DF3  3001               	movlw	1
  3083  0DF4  05B9               	andwf	cs6422_write_word@data_bit,f
  3084  0DF5  3000               	movlw	0
  3085  0DF6  05BA               	andwf	cs6422_write_word@data_bit+1,f
  3086                           
  3087                           ;CS6422_Api.c: 67: cs6422_write_bit(data_bit);
  3088  0DF7  083A               	movf	cs6422_write_word@data_bit+1,w
  3089  0DF8  01AF               	clrf	?_cs6422_write_bit+1
  3090  0DF9  07AF               	addwf	?_cs6422_write_bit+1,f
  3091  0DFA  0839               	movf	cs6422_write_word@data_bit,w
  3092  0DFB  01AE               	clrf	?_cs6422_write_bit
  3093  0DFC  07AE               	addwf	?_cs6422_write_bit,f
  3094  0DFD  3195  2599  318D   	fcall	_cs6422_write_bit
  3095  0E00  30FF               	movlw	255
  3096  0E01  0020               	movlb	0	; select bank0
  3097  0E02  07BB               	addwf	cs6422_write_word@ctr,f
  3098  0E03  30FF               	movlw	255
  3099  0E04  3DBC               	addwfc	cs6422_write_word@ctr+1,f
  3100  0E05  1FBC               	btfss	cs6422_write_word@ctr+1,7
  3101  0E06  2DE2               	goto	l5582
  3102  0E07                     l5592:	
  3103                           
  3104                           ;CS6422_Api.c: 68: }
  3105                           ;CS6422_Api.c: 69: data_ready(1);
  3106  0E07  3001               	movlw	1
  3107  0E08  00AD               	movwf	?_data_ready
  3108  0E09  3000               	movlw	0
  3109  0E0A  00AE               	movwf	?_data_ready+1
  3110  0E0B  3195  25DC  318D   	fcall	_data_ready
  3111                           
  3112                           ;CS6422_Api.c: 71: strobe_pulse();
  3113  0E0E  3196  264E  318D   	fcall	_strobe_pulse
  3114                           
  3115                           ;CS6422_Api.c: 72: strobe_pulse();
  3116  0E11  3196  264E  318D   	fcall	_strobe_pulse
  3117                           
  3118                           ;CS6422_Api.c: 73: strobe_pulse();
  3119  0E14  3196  264E  318D   	fcall	_strobe_pulse
  3120                           
  3121                           ;CS6422_Api.c: 74: strobe_pulse();
  3122  0E17  3196  264E         	fcall	_strobe_pulse
  3123  0E19  0008               	return
  3124  0E1A                     __end_of_cs6422_write_word:	
  3125                           ;CS6422_Api.c: 75: return 0;
  3126                           ;	Return value of _cs6422_write_word is never used
  3127                           
  3128                           
  3129                           	psect	text3
  3130  1599                     __ptext3:	
  3131 ;; *************** function _cs6422_write_bit *****************
  3132 ;; Defined at:
  3133 ;;		line 37 in file "CS6422_Api.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  data_bit        2   14[BANK0 ] int 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;		None
  3138 ;; Return value:  Size  Location     Type
  3139 ;;		None               void
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0, pclath, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3147 ;;      Params:         0       2       0       0       0       0       0       0
  3148 ;;      Locals:         0       0       0       0       0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0       0       0       0
  3150 ;;      Totals:         0       2       0       0       0       0       0       0
  3151 ;;Total ram usage:        2 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    5
  3154 ;; This function calls:
  3155 ;;		_strobe_pulse
  3156 ;; This function is called by:
  3157 ;;		_cs6422_write_word
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           
  3162                           ;psect for function _cs6422_write_bit
  3163  1599                     _cs6422_write_bit:	
  3164                           
  3165                           ;CS6422_Api.c: 38: PORTDbits.RD7 = data_bit;
  3166                           
  3167                           ;incstack = 0
  3168                           ; Regs used in _cs6422_write_bit: [wreg+status,2+status,0+pclath+cstack]
  3169  1599  0020               	movlb	0	; select bank0
  3170  159A  082E               	movf	cs6422_write_bit@data_bit,w
  3171  159B  1D03               	skipz
  3172  159C  178F               	bsf	15,7	;volatile
  3173  159D  1903               	skipnz
  3174  159E  138F               	bcf	15,7	;volatile
  3175                           
  3176                           ;CS6422_Api.c: 39: strobe_pulse();
  3177  159F  3196  264E         	fcall	_strobe_pulse
  3178  15A1  0008               	return
  3179  15A2                     __end_of_cs6422_write_bit:	
  3180                           
  3181                           	psect	text4
  3182  164E                     __ptext4:	
  3183 ;; *************** function _strobe_pulse *****************
  3184 ;; Defined at:
  3185 ;;		line 22 in file "CS6422_Api.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;		None               void
  3192 ;; Registers used:
  3193 ;;		wreg
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3199 ;;      Params:         0       0       0       0       0       0       0       0
  3200 ;;      Locals:         0       0       0       0       0       0       0       0
  3201 ;;      Temps:          0       1       0       0       0       0       0       0
  3202 ;;      Totals:         0       1       0       0       0       0       0       0
  3203 ;;Total ram usage:        1 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    4
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_cs6422_write_bit
  3210 ;;		_cs6422_write_word
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           
  3215                           ;psect for function _strobe_pulse
  3216  164E                     _strobe_pulse:	
  3217                           
  3218                           ;CS6422_Api.c: 24: PORTDbits.RD6 = 0;
  3219                           
  3220                           ;incstack = 0
  3221                           ; Regs used in _strobe_pulse: [wreg]
  3222  164E  0020               	movlb	0	; select bank0
  3223  164F  130F               	bcf	15,6	;volatile
  3224                           
  3225                           ;CS6422_Api.c: 25: _delay((unsigned long)((1)*(4000000/4000.0)));
  3226  1650  30F9               	movlw	249
  3227  1651  00AD               	movwf	??_strobe_pulse
  3228  1652                     u6327:	
  3229  1652  0000               	nop
  3230  1653  0BAD               	decfsz	??_strobe_pulse,f
  3231  1654  2E52               	goto	u6327
  3232  1655  2E56               	nop2	;nop
  3233  1656  0000               	nop
  3234                           
  3235                           ;CS6422_Api.c: 26: PORTDbits.RD6 = 1;
  3236  1657  0020               	movlb	0	; select bank0
  3237  1658  170F               	bsf	15,6	;volatile
  3238                           
  3239                           ;CS6422_Api.c: 27: _delay((unsigned long)((1)*(4000000/4000.0)));
  3240  1659  30F9               	movlw	249
  3241  165A  00AD               	movwf	??_strobe_pulse
  3242  165B                     u6337:	
  3243  165B  0000               	nop
  3244  165C  0BAD               	decfsz	??_strobe_pulse,f
  3245  165D  2E5B               	goto	u6337
  3246  165E  2E5F               	nop2	;nop
  3247  165F  0000               	nop
  3248  1660  0008               	return
  3249  1661                     __end_of_strobe_pulse:	
  3250                           
  3251                           	psect	text5
  3252  15DC                     __ptext5:	
  3253 ;; *************** function _data_ready *****************
  3254 ;; Defined at:
  3255 ;;		line 31 in file "CS6422_Api.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  logic           2   13[BANK0 ] int 
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;		None
  3260 ;; Return value:  Size  Location     Type
  3261 ;;		None               void
  3262 ;; Registers used:
  3263 ;;		wreg
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3269 ;;      Params:         0       2       0       0       0       0       0       0
  3270 ;;      Locals:         0       0       0       0       0       0       0       0
  3271 ;;      Temps:          0       1       0       0       0       0       0       0
  3272 ;;      Totals:         0       3       0       0       0       0       0       0
  3273 ;;Total ram usage:        3 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    4
  3276 ;; This function calls:
  3277 ;;		Nothing
  3278 ;; This function is called by:
  3279 ;;		_cs6422_write_word
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           
  3284                           ;psect for function _data_ready
  3285  15DC                     _data_ready:	
  3286                           
  3287                           ;CS6422_Api.c: 32: PORTDbits.RD4 = logic;
  3288                           
  3289                           ;incstack = 0
  3290                           ; Regs used in _data_ready: [wreg]
  3291  15DC  0020               	movlb	0	; select bank0
  3292  15DD  082D               	movf	data_ready@logic,w
  3293  15DE  1D03               	skipz
  3294  15DF  160F               	bsf	15,4	;volatile
  3295  15E0  1903               	skipnz
  3296  15E1  120F               	bcf	15,4	;volatile
  3297                           
  3298                           ;CS6422_Api.c: 33: _delay((unsigned long)((1)*(4000000/4000.0)));
  3299  15E2  30F9               	movlw	249
  3300  15E3  00AF               	movwf	??_data_ready
  3301  15E4                     u6347:	
  3302  15E4  0000               	nop
  3303  15E5  0BAF               	decfsz	??_data_ready,f
  3304  15E6  2DE4               	goto	u6347
  3305  15E7  2DE8               	nop2	;nop
  3306  15E8  0000               	nop
  3307  15E9  0008               	return
  3308  15EA                     __end_of_data_ready:	
  3309                           
  3310                           	psect	text6
  3311  0960                     __ptext6:	
  3312 ;; *************** function _get_i2c_msg_from_master_word_lsb *****************
  3313 ;; Defined at:
  3314 ;;		line 418 in file "i2c_Api.c"
  3315 ;; Parameters:    Size  Location     Type
  3316 ;;		None
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;  i               2   15[BANK0 ] int 
  3319 ;;  buff            1   14[BANK0 ] unsigned char 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      unsigned char 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3329 ;;      Params:         0       0       0       0       0       0       0       0
  3330 ;;      Locals:         0       3       0       0       0       0       0       0
  3331 ;;      Temps:          0       1       0       0       0       0       0       0
  3332 ;;      Totals:         0       4       0       0       0       0       0       0
  3333 ;;Total ram usage:        4 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    4
  3336 ;; This function calls:
  3337 ;;		Nothing
  3338 ;; This function is called by:
  3339 ;;		_i2c_dataword_handler
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           
  3344                           ;psect for function _get_i2c_msg_from_master_word_lsb
  3345  0960                     _get_i2c_msg_from_master_word_lsb:	
  3346                           
  3347                           ;i2c_Api.c: 419: int i;
  3348                           ;i2c_Api.c: 420: unsigned char buff = i2c_rx_data_buff_word_lsb[0];
  3349                           
  3350                           ;incstack = 0
  3351                           ; Regs used in _get_i2c_msg_from_master_word_lsb: [wreg+fsr1l+fsr1h+status,2+status,0+bt
      +                          emp+1]
  3352  0960  0022               	movlb	2	; select bank2
  3353  0961  0853               	movf	_i2c_rx_data_buff_word_lsb^(0+256),w
  3354  0962  0020               	movlb	0	; select bank0
  3355  0963  00AD               	movwf	??_get_i2c_msg_from_master_word_lsb
  3356  0964  082D               	movf	??_get_i2c_msg_from_master_word_lsb,w
  3357  0965  00AE               	movwf	get_i2c_msg_from_master_word_lsb@buff
  3358                           
  3359                           ;i2c_Api.c: 421: for (i = 1; i < 7; i++)
  3360  0966  3001               	movlw	1
  3361  0967  00AF               	movwf	get_i2c_msg_from_master_word_lsb@i
  3362  0968  3000               	movlw	0
  3363  0969  00B0               	movwf	get_i2c_msg_from_master_word_lsb@i+1
  3364  096A  0830               	movf	get_i2c_msg_from_master_word_lsb@i+1,w
  3365  096B  3A80               	xorlw	128
  3366  096C  00FF               	movwf	127
  3367  096D  3080               	movlw	128
  3368  096E  027F               	subwf	127,w
  3369  096F  1D03               	skipz
  3370  0970  2973               	goto	u5795
  3371  0971  3007               	movlw	7
  3372  0972  022F               	subwf	get_i2c_msg_from_master_word_lsb@i,w
  3373  0973                     u5795:	
  3374  0973  1803               	btfsc	3,0
  3375  0974  2994               	goto	l5544
  3376  0975                     l5538:	
  3377                           
  3378                           ;i2c_Api.c: 422: {
  3379                           ;i2c_Api.c: 424: i2c_rx_data_buff_word_lsb[i - 1] = i2c_rx_data_buff_word_lsb[i];
  3380  0975  0020               	movlb	0	; select bank0
  3381  0976  082F               	movf	get_i2c_msg_from_master_word_lsb@i,w
  3382  0977  3E53               	addlw	_i2c_rx_data_buff_word_lsb& (0+255)
  3383  0978  0086               	movwf	6
  3384  0979  3001               	movlw	1	; select bank2/3
  3385  097A  0087               	movwf	7
  3386  097B  0801               	movf	1,w
  3387  097C  00AD               	movwf	??_get_i2c_msg_from_master_word_lsb
  3388  097D  082F               	movf	get_i2c_msg_from_master_word_lsb@i,w
  3389  097E  3EFF               	addlw	255
  3390  097F  3E53               	addlw	_i2c_rx_data_buff_word_lsb& (0+255)
  3391  0980  0086               	movwf	6
  3392  0981  3001               	movlw	1	; select bank2/3
  3393  0982  0087               	movwf	7
  3394  0983  082D               	movf	??_get_i2c_msg_from_master_word_lsb,w
  3395  0984  0081               	movwf	1
  3396  0985  3001               	movlw	1
  3397  0986  07AF               	addwf	get_i2c_msg_from_master_word_lsb@i,f
  3398  0987  3000               	movlw	0
  3399  0988  3DB0               	addwfc	get_i2c_msg_from_master_word_lsb@i+1,f
  3400  0989  0830               	movf	get_i2c_msg_from_master_word_lsb@i+1,w
  3401  098A  3A80               	xorlw	128
  3402  098B  00FF               	movwf	127
  3403  098C  3080               	movlw	128
  3404  098D  027F               	subwf	127,w
  3405  098E  1D03               	skipz
  3406  098F  2992               	goto	u5805
  3407  0990  3007               	movlw	7
  3408  0991  022F               	subwf	get_i2c_msg_from_master_word_lsb@i,w
  3409  0992                     u5805:	
  3410  0992  1C03               	skipc
  3411  0993  2975               	goto	l5538
  3412  0994                     l5544:	
  3413                           
  3414                           ;i2c_Api.c: 425: }
  3415                           ;i2c_Api.c: 426: i2c_rx_data_buff_word_lsb[7 - 1] = 0xFB;
  3416  0994  30FB               	movlw	251
  3417  0995  0020               	movlb	0	; select bank0
  3418  0996  00AD               	movwf	??_get_i2c_msg_from_master_word_lsb
  3419  0997  082D               	movf	??_get_i2c_msg_from_master_word_lsb,w
  3420  0998  0022               	movlb	2	; select bank2
  3421  0999  00D9               	movwf	(_i2c_rx_data_buff_word_lsb^(0+256)+6)
  3422                           
  3423                           ;i2c_Api.c: 427: return buff;
  3424  099A  0020               	movlb	0	; select bank0
  3425  099B  082E               	movf	get_i2c_msg_from_master_word_lsb@buff,w
  3426  099C  0008               	return
  3427  099D                     __end_of_get_i2c_msg_from_master_word_lsb:	
  3428                           
  3429                           	psect	text7
  3430  0923                     __ptext7:	
  3431 ;; *************** function _get_i2c_msg_from_master_word_msb *****************
  3432 ;; Defined at:
  3433 ;;		line 431 in file "i2c_Api.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;		None
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  i               2   15[BANK0 ] int 
  3438 ;;  buff            1   14[BANK0 ] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      unsigned char 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3448 ;;      Params:         0       0       0       0       0       0       0       0
  3449 ;;      Locals:         0       3       0       0       0       0       0       0
  3450 ;;      Temps:          0       1       0       0       0       0       0       0
  3451 ;;      Totals:         0       4       0       0       0       0       0       0
  3452 ;;Total ram usage:        4 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    4
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_i2c_dataword_handler
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           
  3463                           ;psect for function _get_i2c_msg_from_master_word_msb
  3464  0923                     _get_i2c_msg_from_master_word_msb:	
  3465                           
  3466                           ;i2c_Api.c: 432: int i;
  3467                           ;i2c_Api.c: 433: unsigned char buff = i2c_rx_data_buff_word_msb[0];
  3468                           
  3469                           ;incstack = 0
  3470                           ; Regs used in _get_i2c_msg_from_master_word_msb: [wreg+fsr1l+fsr1h+status,2+status,0+bt
      +                          emp+1]
  3471  0923  0022               	movlb	2	; select bank2
  3472  0924  085A               	movf	_i2c_rx_data_buff_word_msb^(0+256),w
  3473  0925  0020               	movlb	0	; select bank0
  3474  0926  00AD               	movwf	??_get_i2c_msg_from_master_word_msb
  3475  0927  082D               	movf	??_get_i2c_msg_from_master_word_msb,w
  3476  0928  00AE               	movwf	get_i2c_msg_from_master_word_msb@buff
  3477                           
  3478                           ;i2c_Api.c: 434: for (i = 1; i < 7; i++)
  3479  0929  3001               	movlw	1
  3480  092A  00AF               	movwf	get_i2c_msg_from_master_word_msb@i
  3481  092B  3000               	movlw	0
  3482  092C  00B0               	movwf	get_i2c_msg_from_master_word_msb@i+1
  3483  092D  0830               	movf	get_i2c_msg_from_master_word_msb@i+1,w
  3484  092E  3A80               	xorlw	128
  3485  092F  00FF               	movwf	127
  3486  0930  3080               	movlw	128
  3487  0931  027F               	subwf	127,w
  3488  0932  1D03               	skipz
  3489  0933  2936               	goto	u5775
  3490  0934  3007               	movlw	7
  3491  0935  022F               	subwf	get_i2c_msg_from_master_word_msb@i,w
  3492  0936                     u5775:	
  3493  0936  1803               	btfsc	3,0
  3494  0937  2957               	goto	l5528
  3495  0938                     l5522:	
  3496                           
  3497                           ;i2c_Api.c: 435: {
  3498                           ;i2c_Api.c: 436: i2c_rx_data_buff_word_msb[i - 1] = i2c_rx_data_buff_word_msb[i];
  3499  0938  0020               	movlb	0	; select bank0
  3500  0939  082F               	movf	get_i2c_msg_from_master_word_msb@i,w
  3501  093A  3E5A               	addlw	_i2c_rx_data_buff_word_msb& (0+255)
  3502  093B  0086               	movwf	6
  3503  093C  3001               	movlw	1	; select bank2/3
  3504  093D  0087               	movwf	7
  3505  093E  0801               	movf	1,w
  3506  093F  00AD               	movwf	??_get_i2c_msg_from_master_word_msb
  3507  0940  082F               	movf	get_i2c_msg_from_master_word_msb@i,w
  3508  0941  3EFF               	addlw	255
  3509  0942  3E5A               	addlw	_i2c_rx_data_buff_word_msb& (0+255)
  3510  0943  0086               	movwf	6
  3511  0944  3001               	movlw	1	; select bank2/3
  3512  0945  0087               	movwf	7
  3513  0946  082D               	movf	??_get_i2c_msg_from_master_word_msb,w
  3514  0947  0081               	movwf	1
  3515  0948  3001               	movlw	1
  3516  0949  07AF               	addwf	get_i2c_msg_from_master_word_msb@i,f
  3517  094A  3000               	movlw	0
  3518  094B  3DB0               	addwfc	get_i2c_msg_from_master_word_msb@i+1,f
  3519  094C  0830               	movf	get_i2c_msg_from_master_word_msb@i+1,w
  3520  094D  3A80               	xorlw	128
  3521  094E  00FF               	movwf	127
  3522  094F  3080               	movlw	128
  3523  0950  027F               	subwf	127,w
  3524  0951  1D03               	skipz
  3525  0952  2955               	goto	u5785
  3526  0953  3007               	movlw	7
  3527  0954  022F               	subwf	get_i2c_msg_from_master_word_msb@i,w
  3528  0955                     u5785:	
  3529  0955  1C03               	skipc
  3530  0956  2938               	goto	l5522
  3531  0957                     l5528:	
  3532                           
  3533                           ;i2c_Api.c: 437: }
  3534                           ;i2c_Api.c: 438: i2c_rx_data_buff_word_msb[7 - 1] = 0xFB;
  3535  0957  30FB               	movlw	251
  3536  0958  0020               	movlb	0	; select bank0
  3537  0959  00AD               	movwf	??_get_i2c_msg_from_master_word_msb
  3538  095A  082D               	movf	??_get_i2c_msg_from_master_word_msb,w
  3539  095B  0022               	movlb	2	; select bank2
  3540  095C  00E0               	movwf	(_i2c_rx_data_buff_word_msb^(0+256)+6)
  3541                           
  3542                           ;i2c_Api.c: 439: return buff;
  3543  095D  0020               	movlb	0	; select bank0
  3544  095E  082E               	movf	get_i2c_msg_from_master_word_msb@buff,w
  3545  095F  0008               	return
  3546  0960                     __end_of_get_i2c_msg_from_master_word_msb:	
  3547                           
  3548                           	psect	text8
  3549  07BA                     __ptext8:	
  3550 ;; *************** function _get_i2c_regadd_from_master_word *****************
  3551 ;; Defined at:
  3552 ;;		line 406 in file "i2c_Api.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;		None
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  i               2   17[BANK0 ] int 
  3557 ;;  buff            2   15[BANK0 ] int 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  2   13[BANK0 ] int 
  3560 ;; Registers used:
  3561 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3567 ;;      Params:         0       2       0       0       0       0       0       0
  3568 ;;      Locals:         0       4       0       0       0       0       0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0       0
  3570 ;;      Totals:         0       6       0       0       0       0       0       0
  3571 ;;Total ram usage:        6 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    4
  3574 ;; This function calls:
  3575 ;;		Nothing
  3576 ;; This function is called by:
  3577 ;;		_i2c_dataword_handler
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           
  3582                           ;psect for function _get_i2c_regadd_from_master_word
  3583  07BA                     _get_i2c_regadd_from_master_word:	
  3584                           
  3585                           ;i2c_Api.c: 407: int i;
  3586                           ;i2c_Api.c: 408: int buff = i2c_rx_radd_buff_word[0];
  3587                           
  3588                           ;incstack = 0
  3589                           ; Regs used in _get_i2c_regadd_from_master_word: [wreg-fsr1h+status,2+status,0+btemp+1]
  3590  07BA  0023               	movlb	3	; select bank3
  3591  07BB  0852               	movf	(_i2c_rx_radd_buff_word+1)^(0+384),w
  3592  07BC  0020               	movlb	0	; select bank0
  3593  07BD  01B0               	clrf	get_i2c_regadd_from_master_word@buff+1
  3594  07BE  07B0               	addwf	get_i2c_regadd_from_master_word@buff+1,f
  3595  07BF  0023               	movlb	3	; select bank3
  3596  07C0  0851               	movf	_i2c_rx_radd_buff_word^(0+384),w
  3597  07C1  0020               	movlb	0	; select bank0
  3598  07C2  01AF               	clrf	get_i2c_regadd_from_master_word@buff
  3599  07C3  07AF               	addwf	get_i2c_regadd_from_master_word@buff,f
  3600                           
  3601                           ;i2c_Api.c: 409: for (i = 1; i < 7; i++)
  3602  07C4  3001               	movlw	1
  3603  07C5  00B1               	movwf	get_i2c_regadd_from_master_word@i
  3604  07C6  3000               	movlw	0
  3605  07C7  00B2               	movwf	get_i2c_regadd_from_master_word@i+1
  3606  07C8  0832               	movf	get_i2c_regadd_from_master_word@i+1,w
  3607  07C9  3A80               	xorlw	128
  3608  07CA  00FF               	movwf	127
  3609  07CB  3080               	movlw	128
  3610  07CC  027F               	subwf	127,w
  3611  07CD  1D03               	skipz
  3612  07CE  2FD1               	goto	u5755
  3613  07CF  3007               	movlw	7
  3614  07D0  0231               	subwf	get_i2c_regadd_from_master_word@i,w
  3615  07D1                     u5755:	
  3616  07D1  1803               	btfsc	3,0
  3617  07D2  2FF2               	goto	l5510
  3618  07D3                     l5504:	
  3619                           
  3620                           ;i2c_Api.c: 410: {
  3621                           ;i2c_Api.c: 411: i2c_rx_radd_buff_word[i - 1] = i2c_rx_radd_buff_word[i];
  3622  07D3  0020               	movlb	0	; select bank0
  3623  07D4  3531               	lslf	get_i2c_regadd_from_master_word@i,w
  3624  07D5  3ED1               	addlw	_i2c_rx_radd_buff_word& (0+255)
  3625  07D6  0086               	movwf	6
  3626  07D7  3001               	movlw	1	; select bank3/4
  3627  07D8  0087               	movwf	7
  3628  07D9  3531               	lslf	get_i2c_regadd_from_master_word@i,w
  3629  07DA  3EFE               	addlw	254
  3630  07DB  3ED1               	addlw	_i2c_rx_radd_buff_word& (0+255)
  3631  07DC  0084               	movwf	4
  3632  07DD  3001               	movlw	1	; select bank3/4
  3633  07DE  0085               	movwf	5
  3634  07DF  3F40               	moviw [0]fsr1
  3635  07E0  3F80               	movwi [0]fsr0
  3636  07E1  3F41               	moviw [1]fsr1
  3637  07E2  3F81               	movwi [1]fsr0
  3638  07E3  3001               	movlw	1
  3639  07E4  07B1               	addwf	get_i2c_regadd_from_master_word@i,f
  3640  07E5  3000               	movlw	0
  3641  07E6  3DB2               	addwfc	get_i2c_regadd_from_master_word@i+1,f
  3642  07E7  0832               	movf	get_i2c_regadd_from_master_word@i+1,w
  3643  07E8  3A80               	xorlw	128
  3644  07E9  00FF               	movwf	127
  3645  07EA  3080               	movlw	128
  3646  07EB  027F               	subwf	127,w
  3647  07EC  1D03               	skipz
  3648  07ED  2FF0               	goto	u5765
  3649  07EE  3007               	movlw	7
  3650  07EF  0231               	subwf	get_i2c_regadd_from_master_word@i,w
  3651  07F0                     u5765:	
  3652  07F0  1C03               	skipc
  3653  07F1  2FD3               	goto	l5504
  3654  07F2                     l5510:	
  3655                           
  3656                           ;i2c_Api.c: 412: }
  3657                           ;i2c_Api.c: 413: i2c_rx_radd_buff_word[7 - 1] = 0xFB;
  3658  07F2  30FB               	movlw	251
  3659  07F3  0023               	movlb	3	; select bank3
  3660  07F4  00DD               	movwf	(_i2c_rx_radd_buff_word^(0+384)+12)
  3661  07F5  3000               	movlw	0
  3662  07F6  00DE               	movwf	(_i2c_rx_radd_buff_word^(0+384)+13)
  3663                           
  3664                           ;i2c_Api.c: 414: return buff;
  3665  07F7  0020               	movlb	0	; select bank0
  3666  07F8  0830               	movf	get_i2c_regadd_from_master_word@buff+1,w
  3667  07F9  01AE               	clrf	?_get_i2c_regadd_from_master_word+1
  3668  07FA  07AE               	addwf	?_get_i2c_regadd_from_master_word+1,f
  3669  07FB  082F               	movf	get_i2c_regadd_from_master_word@buff,w
  3670  07FC  01AD               	clrf	?_get_i2c_regadd_from_master_word
  3671  07FD  07AD               	addwf	?_get_i2c_regadd_from_master_word,f
  3672  07FE  0008               	return
  3673  07FF                     __end_of_get_i2c_regadd_from_master_word:	
  3674                           
  3675                           	psect	text9
  3676  008A                     __ptext9:	
  3677 ;; *************** function _i2c_databyte_handler *****************
  3678 ;; Defined at:
  3679 ;;		line 189 in file "main.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;		None
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  data            2   23[BANK0 ] int 
  3684 ;;  reg             2   21[BANK0 ] int 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;		None               void
  3687 ;; Registers used:
  3688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3694 ;;      Params:         0       0       0       0       0       0       0       0
  3695 ;;      Locals:         0       4       0       0       0       0       0       0
  3696 ;;      Temps:          0       2       0       0       0       0       0       0
  3697 ;;      Totals:         0       6       0       0       0       0       0       0
  3698 ;;Total ram usage:        6 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    5
  3701 ;; This function calls:
  3702 ;;		_get_i2c_regadd_from_master_byte
  3703 ;;		_get_i2c_msg_from_master_byte
  3704 ;;		_echo_cancel_on
  3705 ;;		_echo_cancel_off
  3706 ;;		_init_sensor0
  3707 ;;		_deinit_sensor0
  3708 ;;		_init_sensor1
  3709 ;;		_deinit_sensor1
  3710 ;;		_init_motion
  3711 ;;		_deinit_motion
  3712 ;;		_init_ldr
  3713 ;;		_deinit_ldr
  3714 ;;		_init_ir
  3715 ;;		_deinit_ir
  3716 ;;		_deinit_keypad
  3717 ;; This function is called by:
  3718 ;;		_main
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           
  3723                           ;psect for function _i2c_databyte_handler
  3724  008A                     _i2c_databyte_handler:	
  3725                           
  3726                           ;main.c: 190: int data;
  3727                           ;main.c: 191: int reg = 0xFF;
  3728                           
  3729                           ;incstack = 0
  3730                           ; Regs used in _i2c_databyte_handler: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  3731  008A  30FF               	movlw	255
  3732  008B  0020               	movlb	0	; select bank0
  3733  008C  00B5               	movwf	i2c_databyte_handler@reg
  3734  008D  3000               	movlw	0
  3735  008E  00B6               	movwf	i2c_databyte_handler@reg+1
  3736                           
  3737                           ;main.c: 192: reg = get_i2c_regadd_from_master_byte();
  3738  008F  318A  221B  3180   	fcall	_get_i2c_regadd_from_master_byte
  3739  0092  0020               	movlb	0	; select bank0
  3740  0093  082E               	movf	?_get_i2c_regadd_from_master_byte+1,w
  3741  0094  01B6               	clrf	i2c_databyte_handler@reg+1
  3742  0095  07B6               	addwf	i2c_databyte_handler@reg+1,f
  3743  0096  082D               	movf	?_get_i2c_regadd_from_master_byte,w
  3744  0097  01B5               	clrf	i2c_databyte_handler@reg
  3745  0098  07B5               	addwf	i2c_databyte_handler@reg,f
  3746                           
  3747                           ;main.c: 193: data = get_i2c_msg_from_master_byte();
  3748  0099  3188  20E6  3180   	fcall	_get_i2c_msg_from_master_byte
  3749  009C  0020               	movlb	0	; select bank0
  3750  009D  00B3               	movwf	??_i2c_databyte_handler
  3751  009E  01B4               	clrf	??_i2c_databyte_handler+1
  3752  009F  0833               	movf	??_i2c_databyte_handler,w
  3753  00A0  00B7               	movwf	i2c_databyte_handler@data
  3754  00A1  0834               	movf	??_i2c_databyte_handler+1,w
  3755  00A2  00B8               	movwf	i2c_databyte_handler@data+1
  3756                           
  3757                           ;main.c: 194: switch (i2c_reg_add_byte[reg]) {
  3758  00A3  2B84               	goto	l5362
  3759  00A4                     l5054:	
  3760                           ;main.c: 195: case 0xBC:
  3761                           
  3762                           
  3763                           ;main.c: 196: if(relay0_en == 0){
  3764  00A4  0021               	movlb	1	; select bank1
  3765  00A5  0837               	movf	(_relay0_en+1)^(0+128),w
  3766  00A6  0436               	iorwf	_relay0_en^(0+128),w
  3767  00A7  1D03               	skipz
  3768  00A8  28C0               	goto	l5068
  3769                           
  3770                           ;main.c: 197: if (data == 0x01) {
  3771  00A9  3001               	movlw	1
  3772  00AA  0020               	movlb	0	; select bank0
  3773  00AB  0637               	xorwf	i2c_databyte_handler@data,w
  3774  00AC  0438               	iorwf	i2c_databyte_handler@data+1,w
  3775  00AD  1D03               	skipz
  3776  00AE  28B6               	goto	l5062
  3777                           
  3778                           ;main.c: 198: PORTAbits.RA2 = 1;
  3779  00AF  150C               	bsf	12,2	;volatile
  3780                           
  3781                           ;main.c: 199: relay0_status = 1;
  3782  00B0  3001               	movlw	1
  3783  00B1  0021               	movlb	1	; select bank1
  3784  00B2  00B8               	movwf	_relay0_status^(0+128)
  3785  00B3  3000               	movlw	0
  3786  00B4  00B9               	movwf	(_relay0_status^(0+128)+1)
  3787                           
  3788                           ;main.c: 200: } else {
  3789  00B5  0008               	return
  3790  00B6                     l5062:	
  3791                           
  3792                           ;main.c: 201: if (data == 0x00) {
  3793  00B6  0020               	movlb	0	; select bank0
  3794  00B7  0838               	movf	i2c_databyte_handler@data+1,w
  3795  00B8  0437               	iorwf	i2c_databyte_handler@data,w
  3796  00B9  1D03               	skipz
  3797  00BA  0008               	return
  3798                           
  3799                           ;main.c: 202: PORTAbits.RA2 = 0;
  3800  00BB  110C               	bcf	12,2	;volatile
  3801                           
  3802                           ;main.c: 203: relay0_status = 0;
  3803  00BC  0021               	movlb	1	; select bank1
  3804  00BD  01B8               	clrf	_relay0_status^(0+128)
  3805  00BE  01B9               	clrf	(_relay0_status+1)^(0+128)
  3806                           
  3807                           ;main.c: 204: }
  3808                           ;main.c: 205: }
  3809                           ;main.c: 206: } else {
  3810  00BF  0008               	return
  3811  00C0                     l5068:	
  3812                           
  3813                           ;main.c: 207: if (data == 0x01) {
  3814  00C0  3001               	movlw	1
  3815  00C1  0020               	movlb	0	; select bank0
  3816  00C2  0637               	xorwf	i2c_databyte_handler@data,w
  3817  00C3  0438               	iorwf	i2c_databyte_handler@data+1,w
  3818  00C4  1D03               	skipz
  3819  00C5  28CD               	goto	l5074
  3820                           
  3821                           ;main.c: 208: PORTAbits.RA2 = 0;
  3822  00C6  110C               	bcf	12,2	;volatile
  3823                           
  3824                           ;main.c: 209: relay0_status = 1;
  3825  00C7  3001               	movlw	1
  3826  00C8  0021               	movlb	1	; select bank1
  3827  00C9  00B8               	movwf	_relay0_status^(0+128)
  3828  00CA  3000               	movlw	0
  3829  00CB  00B9               	movwf	(_relay0_status^(0+128)+1)
  3830                           
  3831                           ;main.c: 210: } else {
  3832  00CC  0008               	return
  3833  00CD                     l5074:	
  3834                           
  3835                           ;main.c: 211: if (data == 0x00) {
  3836  00CD  0020               	movlb	0	; select bank0
  3837  00CE  0838               	movf	i2c_databyte_handler@data+1,w
  3838  00CF  0437               	iorwf	i2c_databyte_handler@data,w
  3839  00D0  1D03               	skipz
  3840  00D1  0008               	return
  3841                           
  3842                           ;main.c: 212: PORTAbits.RA2 = 1;
  3843  00D2  150C               	bsf	12,2	;volatile
  3844                           
  3845                           ;main.c: 213: relay0_status = 0;
  3846  00D3  0021               	movlb	1	; select bank1
  3847  00D4  01B8               	clrf	_relay0_status^(0+128)
  3848  00D5  01B9               	clrf	(_relay0_status+1)^(0+128)
  3849                           
  3850                           ;main.c: 214: }
  3851                           ;main.c: 215: }
  3852                           ;main.c: 216: }
  3853                           ;main.c: 217: break;
  3854  00D6  0008               	return
  3855  00D7                     l5080:	
  3856                           ;main.c: 218: case 0xBD:
  3857                           
  3858                           
  3859                           ;main.c: 219: if(relay1_en == 0){
  3860  00D7  0021               	movlb	1	; select bank1
  3861  00D8  083B               	movf	(_relay1_en+1)^(0+128),w
  3862  00D9  043A               	iorwf	_relay1_en^(0+128),w
  3863  00DA  1D03               	skipz
  3864  00DB  28F3               	goto	l5094
  3865                           
  3866                           ;main.c: 220: if (data == 0x01) {
  3867  00DC  3001               	movlw	1
  3868  00DD  0020               	movlb	0	; select bank0
  3869  00DE  0637               	xorwf	i2c_databyte_handler@data,w
  3870  00DF  0438               	iorwf	i2c_databyte_handler@data+1,w
  3871  00E0  1D03               	skipz
  3872  00E1  28E9               	goto	l5088
  3873                           
  3874                           ;main.c: 221: PORTAbits.RA3 = 1;
  3875  00E2  158C               	bsf	12,3	;volatile
  3876                           
  3877                           ;main.c: 222: relay1_status = 1;
  3878  00E3  3001               	movlw	1
  3879  00E4  0021               	movlb	1	; select bank1
  3880  00E5  00BC               	movwf	_relay1_status^(0+128)
  3881  00E6  3000               	movlw	0
  3882  00E7  00BD               	movwf	(_relay1_status^(0+128)+1)
  3883                           
  3884                           ;main.c: 223: } else {
  3885  00E8  0008               	return
  3886  00E9                     l5088:	
  3887                           
  3888                           ;main.c: 224: if (data == 0x00) {
  3889  00E9  0020               	movlb	0	; select bank0
  3890  00EA  0838               	movf	i2c_databyte_handler@data+1,w
  3891  00EB  0437               	iorwf	i2c_databyte_handler@data,w
  3892  00EC  1D03               	skipz
  3893  00ED  0008               	return
  3894                           
  3895                           ;main.c: 225: PORTAbits.RA3 = 0;
  3896  00EE  118C               	bcf	12,3	;volatile
  3897                           
  3898                           ;main.c: 226: relay1_status = 0;
  3899  00EF  0021               	movlb	1	; select bank1
  3900  00F0  01BC               	clrf	_relay1_status^(0+128)
  3901  00F1  01BD               	clrf	(_relay1_status+1)^(0+128)
  3902                           
  3903                           ;main.c: 227: }
  3904                           ;main.c: 228: }
  3905                           ;main.c: 229: } else {
  3906  00F2  0008               	return
  3907  00F3                     l5094:	
  3908                           
  3909                           ;main.c: 230: if (data == 0x01) {
  3910  00F3  3001               	movlw	1
  3911  00F4  0020               	movlb	0	; select bank0
  3912  00F5  0637               	xorwf	i2c_databyte_handler@data,w
  3913  00F6  0438               	iorwf	i2c_databyte_handler@data+1,w
  3914  00F7  1D03               	skipz
  3915  00F8  2900               	goto	l5100
  3916                           
  3917                           ;main.c: 231: PORTAbits.RA3 = 0;
  3918  00F9  118C               	bcf	12,3	;volatile
  3919                           
  3920                           ;main.c: 232: relay1_status = 1;
  3921  00FA  3001               	movlw	1
  3922  00FB  0021               	movlb	1	; select bank1
  3923  00FC  00BC               	movwf	_relay1_status^(0+128)
  3924  00FD  3000               	movlw	0
  3925  00FE  00BD               	movwf	(_relay1_status^(0+128)+1)
  3926                           
  3927                           ;main.c: 233: } else {
  3928  00FF  0008               	return
  3929  0100                     l5100:	
  3930                           
  3931                           ;main.c: 234: if (data == 0x00) {
  3932  0100  0020               	movlb	0	; select bank0
  3933  0101  0838               	movf	i2c_databyte_handler@data+1,w
  3934  0102  0437               	iorwf	i2c_databyte_handler@data,w
  3935  0103  1D03               	skipz
  3936  0104  0008               	return
  3937                           
  3938                           ;main.c: 235: PORTAbits.RA3 = 1;
  3939  0105  158C               	bsf	12,3	;volatile
  3940                           
  3941                           ;main.c: 236: relay1_status = 0;
  3942  0106  0021               	movlb	1	; select bank1
  3943  0107  01BC               	clrf	_relay1_status^(0+128)
  3944  0108  01BD               	clrf	(_relay1_status+1)^(0+128)
  3945                           
  3946                           ;main.c: 237: }
  3947                           ;main.c: 238: }
  3948                           ;main.c: 239: }
  3949                           ;main.c: 240: break;
  3950  0109  0008               	return
  3951  010A                     l5106:	
  3952                           ;main.c: 241: case 0XBE:
  3953                           
  3954                           
  3955                           ;main.c: 242: if (data == 0x01) {
  3956  010A  3001               	movlw	1
  3957  010B  0020               	movlb	0	; select bank0
  3958  010C  0637               	xorwf	i2c_databyte_handler@data,w
  3959  010D  0438               	iorwf	i2c_databyte_handler@data+1,w
  3960  010E  1D03               	skipz
  3961  010F  2912               	goto	l5110
  3962                           
  3963                           ;main.c: 243: PORTDbits.RD1 = 1;
  3964  0110  148F               	bsf	15,1	;volatile
  3965                           
  3966                           ;main.c: 244: } else {
  3967  0111  0008               	return
  3968  0112                     l5110:	
  3969                           
  3970                           ;main.c: 245: if (data == 0x00) {
  3971  0112  0838               	movf	i2c_databyte_handler@data+1,w
  3972  0113  0437               	iorwf	i2c_databyte_handler@data,w
  3973  0114  1D03               	skipz
  3974  0115  0008               	return
  3975                           
  3976                           ;main.c: 246: PORTDbits.RD1 = 0;
  3977  0116  108F               	bcf	15,1	;volatile
  3978                           
  3979                           ;main.c: 247: }
  3980                           ;main.c: 248: }
  3981                           ;main.c: 249: break;
  3982  0117  0008               	return
  3983  0118                     l5114:	
  3984                           ;main.c: 250: case 0xC0:
  3985                           
  3986                           
  3987                           ;main.c: 251: if (data == 0x01) {
  3988  0118  3001               	movlw	1
  3989  0119  0637               	xorwf	i2c_databyte_handler@data,w
  3990  011A  0438               	iorwf	i2c_databyte_handler@data+1,w
  3991  011B  1D03               	skipz
  3992  011C  2920               	goto	l5118
  3993                           
  3994                           ;main.c: 252: echo_cancel_on();
  3995  011D  3195  25B8         	fcall	_echo_cancel_on
  3996                           
  3997                           ;main.c: 253: } else {
  3998  011F  0008               	return
  3999  0120                     l5118:	
  4000                           
  4001                           ;main.c: 254: if (data == 0x00) {
  4002  0120  0020               	movlb	0	; select bank0
  4003  0121  0838               	movf	i2c_databyte_handler@data+1,w
  4004  0122  0437               	iorwf	i2c_databyte_handler@data,w
  4005  0123  1D03               	skipz
  4006  0124  2928               	goto	l5122
  4007                           
  4008                           ;main.c: 255: echo_cancel_off();
  4009  0125  3195  25C4         	fcall	_echo_cancel_off
  4010                           
  4011                           ;main.c: 256: } else {
  4012  0127  0008               	return
  4013  0128                     l5122:	
  4014                           
  4015                           ;main.c: 257: if (data == 0x02) {
  4016  0128  3002               	movlw	2
  4017  0129  0020               	movlb	0	; select bank0
  4018  012A  0637               	xorwf	i2c_databyte_handler@data,w
  4019  012B  0438               	iorwf	i2c_databyte_handler@data+1,w
  4020  012C  1D03               	skipz
  4021  012D  0008               	return
  4022                           
  4023                           ;main.c: 258: echo_cancel_off();
  4024  012E  3195  25C4  3180   	fcall	_echo_cancel_off
  4025                           
  4026                           ;main.c: 259: echo_cancel_on();
  4027  0131  3195  25B8         	fcall	_echo_cancel_on
  4028                           
  4029                           ;main.c: 260: }
  4030                           ;main.c: 261: }
  4031                           ;main.c: 262: }
  4032                           ;main.c: 263: break;
  4033  0133  0008               	return
  4034  0134                     l5126:	
  4035                           ;main.c: 264: case 0xE5:
  4036                           
  4037                           
  4038                           ;main.c: 265: if (data == 0x01) {
  4039  0134  3001               	movlw	1
  4040  0135  0020               	movlb	0	; select bank0
  4041  0136  0637               	xorwf	i2c_databyte_handler@data,w
  4042  0137  0438               	iorwf	i2c_databyte_handler@data+1,w
  4043  0138  1D03               	skipz
  4044  0139  293C               	goto	l5130
  4045                           
  4046                           ;main.c: 266: PORTAbits.RA5 = 1;
  4047  013A  168C               	bsf	12,5	;volatile
  4048                           
  4049                           ;main.c: 267: } else {
  4050  013B  0008               	return
  4051  013C                     l5130:	
  4052                           
  4053                           ;main.c: 268: if (data == 0x00) {
  4054  013C  0838               	movf	i2c_databyte_handler@data+1,w
  4055  013D  0437               	iorwf	i2c_databyte_handler@data,w
  4056  013E  1D03               	skipz
  4057  013F  0008               	return
  4058                           
  4059                           ;main.c: 269: PORTAbits.RA5 = 0;
  4060  0140  128C               	bcf	12,5	;volatile
  4061                           
  4062                           ;main.c: 270: }
  4063                           ;main.c: 271: }
  4064                           ;main.c: 272: break;
  4065  0141  0008               	return
  4066  0142                     l5134:	
  4067                           ;main.c: 273: case 0xE6:
  4068                           
  4069                           
  4070                           ;main.c: 274: if (data == 0x01) {
  4071  0142  3001               	movlw	1
  4072  0143  0637               	xorwf	i2c_databyte_handler@data,w
  4073  0144  0438               	iorwf	i2c_databyte_handler@data+1,w
  4074  0145  1D03               	skipz
  4075  0146  2949               	goto	l5138
  4076                           
  4077                           ;main.c: 275: PORTAbits.RA6 = 1;
  4078  0147  170C               	bsf	12,6	;volatile
  4079                           
  4080                           ;main.c: 276: } else {
  4081  0148  0008               	return
  4082  0149                     l5138:	
  4083                           
  4084                           ;main.c: 277: if (data == 0x00) {
  4085  0149  0838               	movf	i2c_databyte_handler@data+1,w
  4086  014A  0437               	iorwf	i2c_databyte_handler@data,w
  4087  014B  1D03               	skipz
  4088  014C  0008               	return
  4089                           
  4090                           ;main.c: 278: PORTAbits.RA6 = 0;
  4091  014D  130C               	bcf	12,6	;volatile
  4092                           
  4093                           ;main.c: 279: }
  4094                           ;main.c: 280: }
  4095                           ;main.c: 281: break;
  4096  014E  0008               	return
  4097  014F                     l5142:	
  4098                           ;main.c: 282: case 0xE8:
  4099                           
  4100                           
  4101                           ;main.c: 283: if (data == 0x01) {
  4102  014F  3001               	movlw	1
  4103  0150  0637               	xorwf	i2c_databyte_handler@data,w
  4104  0151  0438               	iorwf	i2c_databyte_handler@data+1,w
  4105  0152  1D03               	skipz
  4106  0153  2956               	goto	l5146
  4107                           
  4108                           ;main.c: 284: PORTAbits.RA7 = 1;
  4109  0154  178C               	bsf	12,7	;volatile
  4110                           
  4111                           ;main.c: 285: } else {
  4112  0155  0008               	return
  4113  0156                     l5146:	
  4114                           
  4115                           ;main.c: 286: if (data == 0x00) {
  4116  0156  0838               	movf	i2c_databyte_handler@data+1,w
  4117  0157  0437               	iorwf	i2c_databyte_handler@data,w
  4118  0158  1D03               	skipz
  4119  0159  0008               	return
  4120                           
  4121                           ;main.c: 287: PORTAbits.RA7 = 0;
  4122  015A  138C               	bcf	12,7	;volatile
  4123                           
  4124                           ;main.c: 288: }
  4125                           ;main.c: 289: }
  4126                           ;main.c: 290: break;
  4127  015B  0008               	return
  4128  015C                     l5150:	
  4129                           ;main.c: 291: case 0xE9:
  4130                           
  4131                           
  4132                           ;main.c: 292: if (data == 0x01) {
  4133  015C  3001               	movlw	1
  4134  015D  0637               	xorwf	i2c_databyte_handler@data,w
  4135  015E  0438               	iorwf	i2c_databyte_handler@data+1,w
  4136  015F  1D03               	skipz
  4137  0160  2963               	goto	l5154
  4138                           
  4139                           ;main.c: 293: PORTEbits.RE0 = 1;
  4140  0161  1410               	bsf	16,0	;volatile
  4141                           
  4142                           ;main.c: 294: } else {
  4143  0162  0008               	return
  4144  0163                     l5154:	
  4145                           
  4146                           ;main.c: 295: if (data == 0x00) {
  4147  0163  0838               	movf	i2c_databyte_handler@data+1,w
  4148  0164  0437               	iorwf	i2c_databyte_handler@data,w
  4149  0165  1D03               	skipz
  4150  0166  0008               	return
  4151                           
  4152                           ;main.c: 296: PORTEbits.RE0 = 0;
  4153  0167  1010               	bcf	16,0	;volatile
  4154                           
  4155                           ;main.c: 297: }
  4156                           ;main.c: 298: }
  4157                           ;main.c: 299: break;
  4158  0168  0008               	return
  4159  0169                     l5158:	
  4160                           ;main.c: 300: case 0xEA:
  4161                           
  4162                           
  4163                           ;main.c: 301: if (data == 0x01) {
  4164  0169  3001               	movlw	1
  4165  016A  0637               	xorwf	i2c_databyte_handler@data,w
  4166  016B  0438               	iorwf	i2c_databyte_handler@data+1,w
  4167  016C  1D03               	skipz
  4168  016D  2971               	goto	l5162
  4169                           
  4170                           ;main.c: 302: PORTAbits.RA7 = 1;
  4171  016E  178C               	bsf	12,7	;volatile
  4172                           
  4173                           ;main.c: 303: PORTEbits.RE0 = 1;
  4174  016F  1410               	bsf	16,0	;volatile
  4175                           
  4176                           ;main.c: 304: } else {
  4177  0170  0008               	return
  4178  0171                     l5162:	
  4179                           
  4180                           ;main.c: 305: if (data == 0x00) {
  4181  0171  0838               	movf	i2c_databyte_handler@data+1,w
  4182  0172  0437               	iorwf	i2c_databyte_handler@data,w
  4183  0173  1D03               	skipz
  4184  0174  0008               	return
  4185                           
  4186                           ;main.c: 306: PORTAbits.RA7 = 0;
  4187  0175  138C               	bcf	12,7	;volatile
  4188                           
  4189                           ;main.c: 307: PORTEbits.RE0 = 0;
  4190  0176  1010               	bcf	16,0	;volatile
  4191                           
  4192                           ;main.c: 308: }
  4193                           ;main.c: 309: }
  4194                           ;main.c: 310: break;
  4195  0177  0008               	return
  4196  0178                     l5166:	
  4197                           ;main.c: 311: case 0xEB:
  4198                           
  4199                           
  4200                           ;main.c: 312: if (data == 0x01) {
  4201  0178  3001               	movlw	1
  4202  0179  0637               	xorwf	i2c_databyte_handler@data,w
  4203  017A  0438               	iorwf	i2c_databyte_handler@data+1,w
  4204  017B  1D03               	skipz
  4205  017C  297F               	goto	l5170
  4206                           
  4207                           ;main.c: 313: PORTEbits.RE1 = 1;
  4208  017D  1490               	bsf	16,1	;volatile
  4209                           
  4210                           ;main.c: 314: } else {
  4211  017E  0008               	return
  4212  017F                     l5170:	
  4213                           
  4214                           ;main.c: 315: if (data == 0x00) {
  4215  017F  0838               	movf	i2c_databyte_handler@data+1,w
  4216  0180  0437               	iorwf	i2c_databyte_handler@data,w
  4217  0181  1D03               	skipz
  4218  0182  0008               	return
  4219                           
  4220                           ;main.c: 316: PORTEbits.RE1 = 0;
  4221  0183  1090               	bcf	16,1	;volatile
  4222                           
  4223                           ;main.c: 317: }
  4224                           ;main.c: 318: }
  4225                           ;main.c: 319: break;
  4226  0184  0008               	return
  4227  0185                     l5174:	
  4228                           ;main.c: 320: case 0x30:
  4229                           
  4230                           
  4231                           ;main.c: 321: if (data == 0x01) {
  4232  0185  3001               	movlw	1
  4233  0186  0637               	xorwf	i2c_databyte_handler@data,w
  4234  0187  0438               	iorwf	i2c_databyte_handler@data+1,w
  4235  0188  1D03               	skipz
  4236  0189  2996               	goto	l5182
  4237                           
  4238                           ;main.c: 322: if (sensor0_en == 0) {
  4239  018A  085B               	movf	_sensor0_en+1,w
  4240  018B  045A               	iorwf	_sensor0_en,w
  4241  018C  1D03               	skipz
  4242  018D  2990               	goto	l5180
  4243                           
  4244                           ;main.c: 323: init_sensor0();
  4245  018E  3195  2555         	fcall	_init_sensor0
  4246  0190                     l5180:	
  4247                           
  4248                           ;main.c: 324: }
  4249                           ;main.c: 325: sensor0_en = 1;
  4250  0190  3001               	movlw	1
  4251  0191  0020               	movlb	0	; select bank0
  4252  0192  00DA               	movwf	_sensor0_en
  4253  0193  3000               	movlw	0
  4254  0194  00DB               	movwf	_sensor0_en+1
  4255                           
  4256                           ;main.c: 326: } else if (data == 0x02) {
  4257  0195  0008               	return
  4258  0196                     l5182:	
  4259  0196  3002               	movlw	2
  4260  0197  0637               	xorwf	i2c_databyte_handler@data,w
  4261  0198  0438               	iorwf	i2c_databyte_handler@data+1,w
  4262  0199  1D03               	skipz
  4263  019A  29A7               	goto	l5190
  4264                           
  4265                           ;main.c: 327: if (sensor0_en == 0) {
  4266  019B  085B               	movf	_sensor0_en+1,w
  4267  019C  045A               	iorwf	_sensor0_en,w
  4268  019D  1D03               	skipz
  4269  019E  29A1               	goto	l5188
  4270                           
  4271                           ;main.c: 328: init_sensor0();
  4272  019F  3195  2555         	fcall	_init_sensor0
  4273  01A1                     l5188:	
  4274                           
  4275                           ;main.c: 329: }
  4276                           ;main.c: 330: sensor0_en = 2;
  4277  01A1  3002               	movlw	2
  4278  01A2  0020               	movlb	0	; select bank0
  4279  01A3  00DA               	movwf	_sensor0_en
  4280  01A4  3000               	movlw	0
  4281  01A5  00DB               	movwf	_sensor0_en+1
  4282                           
  4283                           ;main.c: 331: } else {
  4284  01A6  0008               	return
  4285  01A7                     l5190:	
  4286                           
  4287                           ;main.c: 332: if (data == 0x00) {
  4288  01A7  0838               	movf	i2c_databyte_handler@data+1,w
  4289  01A8  0437               	iorwf	i2c_databyte_handler@data,w
  4290  01A9  1D03               	skipz
  4291  01AA  0008               	return
  4292                           
  4293                           ;main.c: 333: if (sensor0_en == 1) {
  4294  01AB  3001               	movlw	1
  4295  01AC  065A               	xorwf	_sensor0_en,w
  4296  01AD  045B               	iorwf	_sensor0_en+1,w
  4297  01AE  1D03               	skipz
  4298  01AF  29B2               	goto	l5196
  4299                           
  4300                           ;main.c: 334: deinit_sensor0();
  4301  01B0  3195  255C         	fcall	_deinit_sensor0
  4302  01B2                     l5196:	
  4303                           
  4304                           ;main.c: 335: }
  4305                           ;main.c: 336: sensor0_en = 0;
  4306  01B2  0020               	movlb	0	; select bank0
  4307  01B3  01DA               	clrf	_sensor0_en
  4308  01B4  01DB               	clrf	_sensor0_en+1
  4309                           
  4310                           ;main.c: 337: }
  4311                           ;main.c: 338: }
  4312                           ;main.c: 339: break;
  4313  01B5  0008               	return
  4314  01B6                     l5198:	
  4315                           ;main.c: 340: case 0x31:
  4316                           
  4317                           
  4318                           ;main.c: 341: if (data == 0x01) {
  4319  01B6  3001               	movlw	1
  4320  01B7  0637               	xorwf	i2c_databyte_handler@data,w
  4321  01B8  0438               	iorwf	i2c_databyte_handler@data+1,w
  4322  01B9  1D03               	skipz
  4323  01BA  29C7               	goto	l5206
  4324                           
  4325                           ;main.c: 342: if (sensor1_en == 0) {
  4326  01BB  085F               	movf	_sensor1_en+1,w
  4327  01BC  045E               	iorwf	_sensor1_en,w
  4328  01BD  1D03               	skipz
  4329  01BE  29C1               	goto	l5204
  4330                           
  4331                           ;main.c: 343: init_sensor1();
  4332  01BF  3195  2563         	fcall	_init_sensor1
  4333  01C1                     l5204:	
  4334                           
  4335                           ;main.c: 344: }
  4336                           ;main.c: 345: sensor1_en = 1;
  4337  01C1  3001               	movlw	1
  4338  01C2  0020               	movlb	0	; select bank0
  4339  01C3  00DE               	movwf	_sensor1_en
  4340  01C4  3000               	movlw	0
  4341  01C5  00DF               	movwf	_sensor1_en+1
  4342                           
  4343                           ;main.c: 346: } else if (data == 0x02) {
  4344  01C6  0008               	return
  4345  01C7                     l5206:	
  4346  01C7  3002               	movlw	2
  4347  01C8  0637               	xorwf	i2c_databyte_handler@data,w
  4348  01C9  0438               	iorwf	i2c_databyte_handler@data+1,w
  4349  01CA  1D03               	skipz
  4350  01CB  29D8               	goto	l5214
  4351                           
  4352                           ;main.c: 347: if (sensor1_en == 0) {
  4353  01CC  085F               	movf	_sensor1_en+1,w
  4354  01CD  045E               	iorwf	_sensor1_en,w
  4355  01CE  1D03               	skipz
  4356  01CF  29D2               	goto	l5212
  4357                           
  4358                           ;main.c: 348: init_sensor1();
  4359  01D0  3195  2563         	fcall	_init_sensor1
  4360  01D2                     l5212:	
  4361                           
  4362                           ;main.c: 349: }
  4363                           ;main.c: 350: sensor1_en = 2;
  4364  01D2  3002               	movlw	2
  4365  01D3  0020               	movlb	0	; select bank0
  4366  01D4  00DE               	movwf	_sensor1_en
  4367  01D5  3000               	movlw	0
  4368  01D6  00DF               	movwf	_sensor1_en+1
  4369                           
  4370                           ;main.c: 351: } else {
  4371  01D7  0008               	return
  4372  01D8                     l5214:	
  4373                           
  4374                           ;main.c: 352: if (data == 0x00) {
  4375  01D8  0838               	movf	i2c_databyte_handler@data+1,w
  4376  01D9  0437               	iorwf	i2c_databyte_handler@data,w
  4377  01DA  1D03               	skipz
  4378  01DB  0008               	return
  4379                           
  4380                           ;main.c: 353: if (sensor1_en == 1) {
  4381  01DC  3001               	movlw	1
  4382  01DD  065E               	xorwf	_sensor1_en,w
  4383  01DE  045F               	iorwf	_sensor1_en+1,w
  4384  01DF  1D03               	skipz
  4385  01E0  29E3               	goto	l5220
  4386                           
  4387                           ;main.c: 354: deinit_sensor1();
  4388  01E1  3195  256A         	fcall	_deinit_sensor1
  4389  01E3                     l5220:	
  4390                           
  4391                           ;main.c: 355: }
  4392                           ;main.c: 356: sensor1_en = 0;
  4393  01E3  0020               	movlb	0	; select bank0
  4394  01E4  01DE               	clrf	_sensor1_en
  4395  01E5  01DF               	clrf	_sensor1_en+1
  4396                           
  4397                           ;main.c: 357: }
  4398                           ;main.c: 358: }
  4399                           ;main.c: 359: break;
  4400  01E6  0008               	return
  4401  01E7                     l5222:	
  4402                           ;main.c: 360: case 0x32:
  4403                           
  4404                           
  4405                           ;main.c: 361: if (data == 0x01) {
  4406  01E7  3001               	movlw	1
  4407  01E8  0637               	xorwf	i2c_databyte_handler@data,w
  4408  01E9  0438               	iorwf	i2c_databyte_handler@data+1,w
  4409  01EA  1D03               	skipz
  4410  01EB  29F8               	goto	l5230
  4411                           
  4412                           ;main.c: 362: if (motion_en == 0) {
  4413  01EC  0859               	movf	_motion_en+1,w
  4414  01ED  0458               	iorwf	_motion_en,w
  4415  01EE  1D03               	skipz
  4416  01EF  29F2               	goto	l5228
  4417                           
  4418                           ;main.c: 363: init_motion();
  4419  01F0  3195  2571         	fcall	_init_motion
  4420  01F2                     l5228:	
  4421                           
  4422                           ;main.c: 364: }
  4423                           ;main.c: 365: motion_en = 1;
  4424  01F2  3001               	movlw	1
  4425  01F3  0020               	movlb	0	; select bank0
  4426  01F4  00D8               	movwf	_motion_en
  4427  01F5  3000               	movlw	0
  4428  01F6  00D9               	movwf	_motion_en+1
  4429                           
  4430                           ;main.c: 366: } else if (data == 0x02) {
  4431  01F7  0008               	return
  4432  01F8                     l5230:	
  4433  01F8  3002               	movlw	2
  4434  01F9  0637               	xorwf	i2c_databyte_handler@data,w
  4435  01FA  0438               	iorwf	i2c_databyte_handler@data+1,w
  4436  01FB  1D03               	skipz
  4437  01FC  2A09               	goto	l5238
  4438                           
  4439                           ;main.c: 367: if (motion_en == 0) {
  4440  01FD  0859               	movf	_motion_en+1,w
  4441  01FE  0458               	iorwf	_motion_en,w
  4442  01FF  1D03               	skipz
  4443  0200  2A03               	goto	l5236
  4444                           
  4445                           ;main.c: 368: init_motion();
  4446  0201  3195  2571         	fcall	_init_motion
  4447  0203                     l5236:	
  4448                           
  4449                           ;main.c: 369: }
  4450                           ;main.c: 370: motion_en = 2;
  4451  0203  3002               	movlw	2
  4452  0204  0020               	movlb	0	; select bank0
  4453  0205  00D8               	movwf	_motion_en
  4454  0206  3000               	movlw	0
  4455  0207  00D9               	movwf	_motion_en+1
  4456                           
  4457                           ;main.c: 371: } else {
  4458  0208  0008               	return
  4459  0209                     l5238:	
  4460                           
  4461                           ;main.c: 372: if (data == 0x00) {
  4462  0209  0838               	movf	i2c_databyte_handler@data+1,w
  4463  020A  0437               	iorwf	i2c_databyte_handler@data,w
  4464  020B  1D03               	skipz
  4465  020C  0008               	return
  4466                           
  4467                           ;main.c: 373: if (motion_en >= 1) {
  4468  020D  0859               	movf	_motion_en+1,w
  4469  020E  3A80               	xorlw	128
  4470  020F  00FF               	movwf	127
  4471  0210  3080               	movlw	128
  4472  0211  027F               	subwf	127,w
  4473  0212  1D03               	skipz
  4474  0213  2A16               	goto	u5495
  4475  0214  3001               	movlw	1
  4476  0215  0258               	subwf	_motion_en,w
  4477  0216                     u5495:	
  4478  0216  1C03               	skipc
  4479  0217  2A1A               	goto	l5244
  4480                           
  4481                           ;main.c: 374: deinit_motion();
  4482  0218  3195  2578         	fcall	_deinit_motion
  4483  021A                     l5244:	
  4484                           
  4485                           ;main.c: 375: }
  4486                           ;main.c: 376: motion_en = 0;
  4487  021A  0020               	movlb	0	; select bank0
  4488  021B  01D8               	clrf	_motion_en
  4489  021C  01D9               	clrf	_motion_en+1
  4490                           
  4491                           ;main.c: 377: }
  4492                           ;main.c: 378: }
  4493                           ;main.c: 379: break;
  4494  021D  0008               	return
  4495  021E                     l5246:	
  4496                           ;main.c: 380: case 0x37:
  4497                           
  4498                           
  4499                           ;main.c: 381: if (data == 0x01) {
  4500  021E  3001               	movlw	1
  4501  021F  0637               	xorwf	i2c_databyte_handler@data,w
  4502  0220  0438               	iorwf	i2c_databyte_handler@data+1,w
  4503  0221  1D03               	skipz
  4504  0222  2A29               	goto	l5250
  4505                           
  4506                           ;main.c: 382: relay0_en = 1;
  4507  0223  3001               	movlw	1
  4508  0224  0021               	movlb	1	; select bank1
  4509  0225  00B6               	movwf	_relay0_en^(0+128)
  4510  0226  3000               	movlw	0
  4511  0227  00B7               	movwf	(_relay0_en^(0+128)+1)
  4512                           
  4513                           ;main.c: 383: } else {
  4514  0228  0008               	return
  4515  0229                     l5250:	
  4516                           
  4517                           ;main.c: 384: relay0_en = 0;
  4518  0229  0021               	movlb	1	; select bank1
  4519  022A  01B6               	clrf	_relay0_en^(0+128)
  4520  022B  01B7               	clrf	(_relay0_en+1)^(0+128)
  4521                           
  4522                           ;main.c: 385: }
  4523                           ;main.c: 386: break;
  4524  022C  0008               	return
  4525  022D                     l5252:	
  4526                           ;main.c: 387: case 0x38:
  4527                           
  4528                           
  4529                           ;main.c: 388: if (data == 0x01) {
  4530  022D  3001               	movlw	1
  4531  022E  0020               	movlb	0	; select bank0
  4532  022F  0637               	xorwf	i2c_databyte_handler@data,w
  4533  0230  0438               	iorwf	i2c_databyte_handler@data+1,w
  4534  0231  1D03               	skipz
  4535  0232  2A39               	goto	l5256
  4536                           
  4537                           ;main.c: 389: relay1_en = 1;
  4538  0233  3001               	movlw	1
  4539  0234  0021               	movlb	1	; select bank1
  4540  0235  00BA               	movwf	_relay1_en^(0+128)
  4541  0236  3000               	movlw	0
  4542  0237  00BB               	movwf	(_relay1_en^(0+128)+1)
  4543                           
  4544                           ;main.c: 390: } else {
  4545  0238  0008               	return
  4546  0239                     l5256:	
  4547                           
  4548                           ;main.c: 391: relay1_en = 0;
  4549  0239  0021               	movlb	1	; select bank1
  4550  023A  01BA               	clrf	_relay1_en^(0+128)
  4551  023B  01BB               	clrf	(_relay1_en+1)^(0+128)
  4552                           
  4553                           ;main.c: 392: }
  4554                           ;main.c: 393: break;
  4555  023C  0008               	return
  4556  023D                     l5258:	
  4557                           ;main.c: 394: case 0xBB:
  4558                           
  4559                           
  4560                           ;main.c: 395: if (data == 0x01) {
  4561  023D  3001               	movlw	1
  4562  023E  0020               	movlb	0	; select bank0
  4563  023F  0637               	xorwf	i2c_databyte_handler@data,w
  4564  0240  0438               	iorwf	i2c_databyte_handler@data+1,w
  4565  0241  1D03               	skipz
  4566  0242  2A47               	goto	l5262
  4567                           
  4568                           ;main.c: 397: PORTBbits.RB3 = 0;
  4569  0243  118D               	bcf	13,3	;volatile
  4570                           
  4571                           ;main.c: 398: PORTBbits.RB2 = 0;
  4572  0244  110D               	bcf	13,2	;volatile
  4573                           
  4574                           ;main.c: 399: PORTBbits.RB4 = 0;
  4575  0245  120D               	bcf	13,4	;volatile
  4576                           
  4577                           ;main.c: 401: } else {
  4578  0246  0008               	return
  4579  0247                     l5262:	
  4580                           
  4581                           ;main.c: 403: if (data == 0x00) {
  4582  0247  0838               	movf	i2c_databyte_handler@data+1,w
  4583  0248  0437               	iorwf	i2c_databyte_handler@data,w
  4584  0249  1D03               	skipz
  4585  024A  0008               	return
  4586                           
  4587                           ;main.c: 405: PORTBbits.RB3 = 1;
  4588  024B  158D               	bsf	13,3	;volatile
  4589                           
  4590                           ;main.c: 406: PORTBbits.RB2 = 1;
  4591  024C  150D               	bsf	13,2	;volatile
  4592                           
  4593                           ;main.c: 407: PORTBbits.RB4 = 1;
  4594  024D  160D               	bsf	13,4	;volatile
  4595                           
  4596                           ;main.c: 409: }
  4597                           ;main.c: 410: }
  4598                           ;main.c: 411: break;
  4599  024E  0008               	return
  4600  024F                     l5266:	
  4601                           ;main.c: 412: case 0x90:
  4602                           
  4603                           
  4604                           ;main.c: 413: if (data == 0x01) {
  4605  024F  3001               	movlw	1
  4606  0250  0637               	xorwf	i2c_databyte_handler@data,w
  4607  0251  0438               	iorwf	i2c_databyte_handler@data+1,w
  4608  0252  1D03               	skipz
  4609  0253  2A5B               	goto	l346
  4610                           
  4611                           ;main.c: 414: PORTDbits.RD2 = 1;
  4612  0254  150F               	bsf	15,2	;volatile
  4613                           
  4614                           ;main.c: 415: shutdown_flag = 1;
  4615  0255  3001               	movlw	1
  4616  0256  0021               	movlb	1	; select bank1
  4617  0257  00C6               	movwf	_shutdown_flag^(0+128)
  4618  0258  3000               	movlw	0
  4619  0259  00C7               	movwf	(_shutdown_flag^(0+128)+1)
  4620                           
  4621                           ;main.c: 416: } else {
  4622  025A  0008               	return
  4623  025B                     l346:	
  4624                           
  4625                           ;main.c: 417: PORTDbits.RD2 = 0;
  4626  025B  110F               	bcf	15,2	;volatile
  4627                           
  4628                           ;main.c: 418: shutdown_flag = 0;
  4629  025C  0021               	movlb	1	; select bank1
  4630  025D  01C6               	clrf	_shutdown_flag^(0+128)
  4631  025E  01C7               	clrf	(_shutdown_flag+1)^(0+128)
  4632                           
  4633                           ;main.c: 419: }
  4634                           ;main.c: 420: break;
  4635  025F  0008               	return
  4636  0260                     l5274:	
  4637                           ;main.c: 421: case 0x33:
  4638                           
  4639                           
  4640                           ;main.c: 422: if (data == 0x01) {
  4641  0260  3001               	movlw	1
  4642  0261  0020               	movlb	0	; select bank0
  4643  0262  0637               	xorwf	i2c_databyte_handler@data,w
  4644  0263  0438               	iorwf	i2c_databyte_handler@data+1,w
  4645  0264  1D03               	skipz
  4646  0265  2A68               	goto	l5278
  4647                           
  4648                           ;main.c: 423: PORTAbits.RA4 = 1;
  4649  0266  160C               	bsf	12,4	;volatile
  4650                           
  4651                           ;main.c: 424: } else {
  4652  0267  0008               	return
  4653  0268                     l5278:	
  4654                           
  4655                           ;main.c: 425: if (data == 0x00) {
  4656  0268  0838               	movf	i2c_databyte_handler@data+1,w
  4657  0269  0437               	iorwf	i2c_databyte_handler@data,w
  4658  026A  1D03               	skipz
  4659  026B  0008               	return
  4660                           
  4661                           ;main.c: 426: PORTAbits.RA4 = 0;
  4662  026C  120C               	bcf	12,4	;volatile
  4663                           
  4664                           ;main.c: 427: }
  4665                           ;main.c: 428: }
  4666                           ;main.c: 429: break;
  4667  026D  0008               	return
  4668  026E                     l5282:	
  4669                           ;main.c: 430: case 0X40:
  4670                           
  4671                           
  4672                           ;main.c: 431: if (data <= 100) {
  4673  026E  0838               	movf	i2c_databyte_handler@data+1,w
  4674  026F  3A80               	xorlw	128
  4675  0270  00FF               	movwf	127
  4676  0271  3080               	movlw	128
  4677  0272  027F               	subwf	127,w
  4678  0273  1D03               	skipz
  4679  0274  2A77               	goto	u5575
  4680  0275  3065               	movlw	101
  4681  0276  0237               	subwf	i2c_databyte_handler@data,w
  4682  0277                     u5575:	
  4683  0277  1803               	skipnc
  4684  0278  2A84               	goto	l5286
  4685                           
  4686                           ;main.c: 432: sensor0_sensitivity = data;
  4687  0279  0020               	movlb	0	; select bank0
  4688  027A  0838               	movf	i2c_databyte_handler@data+1,w
  4689  027B  0021               	movlb	1	; select bank1
  4690  027C  01E1               	clrf	(_sensor0_sensitivity+1)^(0+128)
  4691  027D  07E1               	addwf	(_sensor0_sensitivity+1)^(0+128),f
  4692  027E  0020               	movlb	0	; select bank0
  4693  027F  0837               	movf	i2c_databyte_handler@data,w
  4694  0280  0021               	movlb	1	; select bank1
  4695  0281  01E0               	clrf	_sensor0_sensitivity^(0+128)
  4696  0282  07E0               	addwf	_sensor0_sensitivity^(0+128),f
  4697                           
  4698                           ;main.c: 433: } else {
  4699  0283  0008               	return
  4700  0284                     l5286:	
  4701                           
  4702                           ;main.c: 434: sensor0_sensitivity = 100;
  4703  0284  3064               	movlw	100
  4704  0285  0021               	movlb	1	; select bank1
  4705  0286  00E0               	movwf	_sensor0_sensitivity^(0+128)
  4706  0287  3000               	movlw	0
  4707  0288  00E1               	movwf	(_sensor0_sensitivity^(0+128)+1)
  4708                           
  4709                           ;main.c: 435: }
  4710                           ;main.c: 436: break;
  4711  0289  0008               	return
  4712  028A                     l5288:	
  4713                           ;main.c: 437: case 0X41:
  4714                           
  4715                           
  4716                           ;main.c: 438: if (data <= 100) {
  4717  028A  0020               	movlb	0	; select bank0
  4718  028B  0838               	movf	i2c_databyte_handler@data+1,w
  4719  028C  3A80               	xorlw	128
  4720  028D  00FF               	movwf	127
  4721  028E  3080               	movlw	128
  4722  028F  027F               	subwf	127,w
  4723  0290  1D03               	skipz
  4724  0291  2A94               	goto	u5585
  4725  0292  3065               	movlw	101
  4726  0293  0237               	subwf	i2c_databyte_handler@data,w
  4727  0294                     u5585:	
  4728  0294  1803               	skipnc
  4729  0295  2AA1               	goto	l5292
  4730                           
  4731                           ;main.c: 439: sensor0_sensitivity = data;
  4732  0296  0020               	movlb	0	; select bank0
  4733  0297  0838               	movf	i2c_databyte_handler@data+1,w
  4734  0298  0021               	movlb	1	; select bank1
  4735  0299  01E1               	clrf	(_sensor0_sensitivity+1)^(0+128)
  4736  029A  07E1               	addwf	(_sensor0_sensitivity+1)^(0+128),f
  4737  029B  0020               	movlb	0	; select bank0
  4738  029C  0837               	movf	i2c_databyte_handler@data,w
  4739  029D  0021               	movlb	1	; select bank1
  4740  029E  01E0               	clrf	_sensor0_sensitivity^(0+128)
  4741  029F  07E0               	addwf	_sensor0_sensitivity^(0+128),f
  4742                           
  4743                           ;main.c: 440: } else {
  4744  02A0  0008               	return
  4745  02A1                     l5292:	
  4746                           
  4747                           ;main.c: 441: sensor0_sensitivity = 100;
  4748  02A1  3064               	movlw	100
  4749  02A2  0021               	movlb	1	; select bank1
  4750  02A3  00E0               	movwf	_sensor0_sensitivity^(0+128)
  4751  02A4  3000               	movlw	0
  4752  02A5  00E1               	movwf	(_sensor0_sensitivity^(0+128)+1)
  4753                           
  4754                           ;main.c: 442: }
  4755                           ;main.c: 443: break;
  4756  02A6  0008               	return
  4757  02A7                     l5294:	
  4758                           ;main.c: 444: case 0X42:
  4759                           
  4760                           
  4761                           ;main.c: 445: if (data <= 100) {
  4762  02A7  0020               	movlb	0	; select bank0
  4763  02A8  0838               	movf	i2c_databyte_handler@data+1,w
  4764  02A9  3A80               	xorlw	128
  4765  02AA  00FF               	movwf	127
  4766  02AB  3080               	movlw	128
  4767  02AC  027F               	subwf	127,w
  4768  02AD  1D03               	skipz
  4769  02AE  2AB1               	goto	u5595
  4770  02AF  3065               	movlw	101
  4771  02B0  0237               	subwf	i2c_databyte_handler@data,w
  4772  02B1                     u5595:	
  4773  02B1  1803               	skipnc
  4774  02B2  2ABE               	goto	l5298
  4775                           
  4776                           ;main.c: 446: motion_sensitivity = data;
  4777  02B3  0020               	movlb	0	; select bank0
  4778  02B4  0838               	movf	i2c_databyte_handler@data+1,w
  4779  02B5  0021               	movlb	1	; select bank1
  4780  02B6  01DF               	clrf	(_motion_sensitivity+1)^(0+128)
  4781  02B7  07DF               	addwf	(_motion_sensitivity+1)^(0+128),f
  4782  02B8  0020               	movlb	0	; select bank0
  4783  02B9  0837               	movf	i2c_databyte_handler@data,w
  4784  02BA  0021               	movlb	1	; select bank1
  4785  02BB  01DE               	clrf	_motion_sensitivity^(0+128)
  4786  02BC  07DE               	addwf	_motion_sensitivity^(0+128),f
  4787                           
  4788                           ;main.c: 447: } else {
  4789  02BD  0008               	return
  4790  02BE                     l5298:	
  4791                           
  4792                           ;main.c: 448: motion_sensitivity = 100;
  4793  02BE  3064               	movlw	100
  4794  02BF  0021               	movlb	1	; select bank1
  4795  02C0  00DE               	movwf	_motion_sensitivity^(0+128)
  4796  02C1  3000               	movlw	0
  4797  02C2  00DF               	movwf	(_motion_sensitivity^(0+128)+1)
  4798                           
  4799                           ;main.c: 449: }
  4800                           ;main.c: 450: break;
  4801  02C3  0008               	return
  4802  02C4                     l5300:	
  4803                           ;main.c: 451: case 0x34:
  4804                           
  4805                           
  4806                           ;main.c: 452: if (data == 0x01) {
  4807  02C4  3001               	movlw	1
  4808  02C5  0020               	movlb	0	; select bank0
  4809  02C6  0637               	xorwf	i2c_databyte_handler@data,w
  4810  02C7  0438               	iorwf	i2c_databyte_handler@data+1,w
  4811  02C8  1D03               	skipz
  4812  02C9  2AD5               	goto	l5308
  4813                           
  4814                           ;main.c: 453: if (ldr_en == 0) {
  4815  02CA  0857               	movf	_ldr_en+1,w
  4816  02CB  0456               	iorwf	_ldr_en,w
  4817  02CC  1D03               	skipz
  4818  02CD  0008               	return
  4819                           
  4820                           ;main.c: 454: ldr_en = 1;
  4821  02CE  3001               	movlw	1
  4822  02CF  00D6               	movwf	_ldr_en
  4823  02D0  3000               	movlw	0
  4824  02D1  00D7               	movwf	_ldr_en+1
  4825                           
  4826                           ;main.c: 455: init_ldr();
  4827  02D2  3196  2618         	fcall	_init_ldr
  4828                           
  4829                           ;main.c: 456: }
  4830                           ;main.c: 457: } else {
  4831  02D4  0008               	return
  4832  02D5                     l5308:	
  4833                           
  4834                           ;main.c: 458: if (ldr_en == 1) {
  4835  02D5  3001               	movlw	1
  4836  02D6  0020               	movlb	0	; select bank0
  4837  02D7  0656               	xorwf	_ldr_en,w
  4838  02D8  0457               	iorwf	_ldr_en+1,w
  4839  02D9  1D03               	skipz
  4840  02DA  0008               	return
  4841                           
  4842                           ;main.c: 459: ldr_en = 0;
  4843  02DB  01D6               	clrf	_ldr_en
  4844  02DC  01D7               	clrf	_ldr_en+1
  4845                           
  4846                           ;main.c: 460: deinit_ldr();
  4847  02DD  3195  25D0         	fcall	_deinit_ldr
  4848                           
  4849                           ;main.c: 461: }
  4850                           ;main.c: 462: }
  4851                           ;main.c: 463: break;
  4852  02DF  0008               	return
  4853  02E0                     l5314:	
  4854                           ;main.c: 464: case 0x50:
  4855                           
  4856                           
  4857                           ;main.c: 465: if (data <= 3) {
  4858  02E0  0020               	movlb	0	; select bank0
  4859  02E1  0838               	movf	i2c_databyte_handler@data+1,w
  4860  02E2  3A80               	xorlw	128
  4861  02E3  00FF               	movwf	127
  4862  02E4  3080               	movlw	128
  4863  02E5  027F               	subwf	127,w
  4864  02E6  1D03               	skipz
  4865  02E7  2AEA               	goto	u5635
  4866  02E8  3004               	movlw	4
  4867  02E9  0237               	subwf	i2c_databyte_handler@data,w
  4868  02EA                     u5635:	
  4869  02EA  1803               	skipnc
  4870  02EB  2AF7               	goto	l5318
  4871                           
  4872                           ;main.c: 466: ir_level = data;
  4873  02EC  0020               	movlb	0	; select bank0
  4874  02ED  0838               	movf	i2c_databyte_handler@data+1,w
  4875  02EE  0021               	movlb	1	; select bank1
  4876  02EF  01AF               	clrf	(_ir_level+1)^(0+128)
  4877  02F0  07AF               	addwf	(_ir_level+1)^(0+128),f
  4878  02F1  0020               	movlb	0	; select bank0
  4879  02F2  0837               	movf	i2c_databyte_handler@data,w
  4880  02F3  0021               	movlb	1	; select bank1
  4881  02F4  01AE               	clrf	_ir_level^(0+128)
  4882  02F5  07AE               	addwf	_ir_level^(0+128),f
  4883                           
  4884                           ;main.c: 467: } else {
  4885  02F6  0008               	return
  4886  02F7                     l5318:	
  4887                           
  4888                           ;main.c: 468: ir_level = 3;
  4889  02F7  3003               	movlw	3
  4890  02F8  0021               	movlb	1	; select bank1
  4891  02F9  00AE               	movwf	_ir_level^(0+128)
  4892  02FA  3000               	movlw	0
  4893  02FB  00AF               	movwf	(_ir_level^(0+128)+1)
  4894                           
  4895                           ;main.c: 469: }
  4896                           ;main.c: 470: break;
  4897  02FC  0008               	return
  4898  02FD                     l5320:	
  4899                           ;main.c: 471: case 0x51:
  4900                           
  4901                           
  4902                           ;main.c: 472: if (data <= 100) {
  4903  02FD  0020               	movlb	0	; select bank0
  4904  02FE  0838               	movf	i2c_databyte_handler@data+1,w
  4905  02FF  3A80               	xorlw	128
  4906  0300  00FF               	movwf	127
  4907  0301  3080               	movlw	128
  4908  0302  027F               	subwf	127,w
  4909  0303  1D03               	skipz
  4910  0304  2B07               	goto	u5645
  4911  0305  3065               	movlw	101
  4912  0306  0237               	subwf	i2c_databyte_handler@data,w
  4913  0307                     u5645:	
  4914  0307  1803               	skipnc
  4915  0308  2B14               	goto	l5324
  4916                           
  4917                           ;main.c: 473: ldr_sensitivity1 = data;
  4918  0309  0020               	movlb	0	; select bank0
  4919  030A  0838               	movf	i2c_databyte_handler@data+1,w
  4920  030B  0021               	movlb	1	; select bank1
  4921  030C  01D9               	clrf	(_ldr_sensitivity1+1)^(0+128)
  4922  030D  07D9               	addwf	(_ldr_sensitivity1+1)^(0+128),f
  4923  030E  0020               	movlb	0	; select bank0
  4924  030F  0837               	movf	i2c_databyte_handler@data,w
  4925  0310  0021               	movlb	1	; select bank1
  4926  0311  01D8               	clrf	_ldr_sensitivity1^(0+128)
  4927  0312  07D8               	addwf	_ldr_sensitivity1^(0+128),f
  4928                           
  4929                           ;main.c: 474: } else {
  4930  0313  0008               	return
  4931  0314                     l5324:	
  4932                           
  4933                           ;main.c: 475: ldr_sensitivity1 = 100;
  4934  0314  3064               	movlw	100
  4935  0315  0021               	movlb	1	; select bank1
  4936  0316  00D8               	movwf	_ldr_sensitivity1^(0+128)
  4937  0317  3000               	movlw	0
  4938  0318  00D9               	movwf	(_ldr_sensitivity1^(0+128)+1)
  4939                           
  4940                           ;main.c: 476: }
  4941                           ;main.c: 477: break;
  4942  0319  0008               	return
  4943  031A                     l5326:	
  4944                           ;main.c: 478: case 0x52:
  4945                           
  4946                           
  4947                           ;main.c: 479: if (data <= 100) {
  4948  031A  0020               	movlb	0	; select bank0
  4949  031B  0838               	movf	i2c_databyte_handler@data+1,w
  4950  031C  3A80               	xorlw	128
  4951  031D  00FF               	movwf	127
  4952  031E  3080               	movlw	128
  4953  031F  027F               	subwf	127,w
  4954  0320  1D03               	skipz
  4955  0321  2B24               	goto	u5655
  4956  0322  3065               	movlw	101
  4957  0323  0237               	subwf	i2c_databyte_handler@data,w
  4958  0324                     u5655:	
  4959  0324  1803               	skipnc
  4960  0325  2B31               	goto	l5330
  4961                           
  4962                           ;main.c: 480: ldr_sensitivity2 = data;
  4963  0326  0020               	movlb	0	; select bank0
  4964  0327  0838               	movf	i2c_databyte_handler@data+1,w
  4965  0328  0021               	movlb	1	; select bank1
  4966  0329  01DB               	clrf	(_ldr_sensitivity2+1)^(0+128)
  4967  032A  07DB               	addwf	(_ldr_sensitivity2+1)^(0+128),f
  4968  032B  0020               	movlb	0	; select bank0
  4969  032C  0837               	movf	i2c_databyte_handler@data,w
  4970  032D  0021               	movlb	1	; select bank1
  4971  032E  01DA               	clrf	_ldr_sensitivity2^(0+128)
  4972  032F  07DA               	addwf	_ldr_sensitivity2^(0+128),f
  4973                           
  4974                           ;main.c: 481: } else {
  4975  0330  0008               	return
  4976  0331                     l5330:	
  4977                           
  4978                           ;main.c: 482: ldr_sensitivity2 = 100;
  4979  0331  3064               	movlw	100
  4980  0332  0021               	movlb	1	; select bank1
  4981  0333  00DA               	movwf	_ldr_sensitivity2^(0+128)
  4982  0334  3000               	movlw	0
  4983  0335  00DB               	movwf	(_ldr_sensitivity2^(0+128)+1)
  4984                           
  4985                           ;main.c: 483: }
  4986                           ;main.c: 484: break;
  4987  0336  0008               	return
  4988  0337                     l5332:	
  4989                           ;main.c: 485: case 0x53:
  4990                           
  4991                           
  4992                           ;main.c: 486: if (data <= 100) {
  4993  0337  0020               	movlb	0	; select bank0
  4994  0338  0838               	movf	i2c_databyte_handler@data+1,w
  4995  0339  3A80               	xorlw	128
  4996  033A  00FF               	movwf	127
  4997  033B  3080               	movlw	128
  4998  033C  027F               	subwf	127,w
  4999  033D  1D03               	skipz
  5000  033E  2B41               	goto	u5665
  5001  033F  3065               	movlw	101
  5002  0340  0237               	subwf	i2c_databyte_handler@data,w
  5003  0341                     u5665:	
  5004  0341  1803               	skipnc
  5005  0342  2B4E               	goto	l5336
  5006                           
  5007                           ;main.c: 487: ldr_sensitivity3 = data;
  5008  0343  0020               	movlb	0	; select bank0
  5009  0344  0838               	movf	i2c_databyte_handler@data+1,w
  5010  0345  0021               	movlb	1	; select bank1
  5011  0346  01DD               	clrf	(_ldr_sensitivity3+1)^(0+128)
  5012  0347  07DD               	addwf	(_ldr_sensitivity3+1)^(0+128),f
  5013  0348  0020               	movlb	0	; select bank0
  5014  0349  0837               	movf	i2c_databyte_handler@data,w
  5015  034A  0021               	movlb	1	; select bank1
  5016  034B  01DC               	clrf	_ldr_sensitivity3^(0+128)
  5017  034C  07DC               	addwf	_ldr_sensitivity3^(0+128),f
  5018                           
  5019                           ;main.c: 488: } else {
  5020  034D  0008               	return
  5021  034E                     l5336:	
  5022                           
  5023                           ;main.c: 489: ldr_sensitivity3 = 100;
  5024  034E  3064               	movlw	100
  5025  034F  0021               	movlb	1	; select bank1
  5026  0350  00DC               	movwf	_ldr_sensitivity3^(0+128)
  5027  0351  3000               	movlw	0
  5028  0352  00DD               	movwf	(_ldr_sensitivity3^(0+128)+1)
  5029                           
  5030                           ;main.c: 490: }
  5031                           ;main.c: 491: break;
  5032  0353  0008               	return
  5033  0354                     l5338:	
  5034                           ;main.c: 492: case 0x36:
  5035                           
  5036                           
  5037                           ;main.c: 493: if (data == 1) {
  5038  0354  3001               	movlw	1
  5039  0355  0020               	movlb	0	; select bank0
  5040  0356  0637               	xorwf	i2c_databyte_handler@data,w
  5041  0357  0438               	iorwf	i2c_databyte_handler@data+1,w
  5042  0358  1D03               	skipz
  5043  0359  2B62               	goto	l5344
  5044                           
  5045                           ;main.c: 494: ir_en = 1;
  5046  035A  3001               	movlw	1
  5047  035B  0021               	movlb	1	; select bank1
  5048  035C  00AC               	movwf	_ir_en^(0+128)
  5049  035D  3000               	movlw	0
  5050  035E  00AD               	movwf	(_ir_en^(0+128)+1)
  5051                           
  5052                           ;main.c: 495: init_ir();
  5053  035F  3195  25EA         	fcall	_init_ir
  5054                           
  5055                           ;main.c: 497: } else {
  5056  0361  0008               	return
  5057  0362                     l5344:	
  5058                           
  5059                           ;main.c: 498: if (data == 0) {
  5060  0362  0020               	movlb	0	; select bank0
  5061  0363  0838               	movf	i2c_databyte_handler@data+1,w
  5062  0364  0437               	iorwf	i2c_databyte_handler@data,w
  5063  0365  1D03               	skipz
  5064  0366  0008               	return
  5065                           
  5066                           ;main.c: 499: ir_en = 0;
  5067  0367  0021               	movlb	1	; select bank1
  5068  0368  01AC               	clrf	_ir_en^(0+128)
  5069  0369  01AD               	clrf	(_ir_en+1)^(0+128)
  5070                           
  5071                           ;main.c: 500: deinit_ir();
  5072  036A  3195  25F9         	fcall	_deinit_ir
  5073                           
  5074                           ;main.c: 501: }
  5075                           ;main.c: 502: }
  5076                           ;main.c: 503: break;
  5077  036C  0008               	return
  5078  036D                     l5350:	
  5079                           ;main.c: 504: case 0x70:
  5080                           
  5081                           
  5082                           ;main.c: 505: if(data == 0x01)
  5083  036D  3001               	movlw	1
  5084  036E  0020               	movlb	0	; select bank0
  5085  036F  0637               	xorwf	i2c_databyte_handler@data,w
  5086  0370  0438               	iorwf	i2c_databyte_handler@data+1,w
  5087  0371  1D03               	skipz
  5088  0372  2B79               	goto	l5354
  5089                           
  5090                           ;main.c: 506: {
  5091                           ;main.c: 507: keypad_en = 1;
  5092  0373  3001               	movlw	1
  5093  0374  0021               	movlb	1	; select bank1
  5094  0375  00B0               	movwf	_keypad_en^(0+128)
  5095  0376  3000               	movlw	0
  5096  0377  00B1               	movwf	(_keypad_en^(0+128)+1)
  5097                           
  5098                           ;main.c: 508: }
  5099  0378  0008               	return
  5100  0379                     l5354:	
  5101                           
  5102                           ;main.c: 509: else
  5103                           ;main.c: 510: {
  5104                           ;main.c: 511: if(data == 0){
  5105  0379  0020               	movlb	0	; select bank0
  5106  037A  0838               	movf	i2c_databyte_handler@data+1,w
  5107  037B  0437               	iorwf	i2c_databyte_handler@data,w
  5108  037C  1D03               	skipz
  5109  037D  0008               	return
  5110                           
  5111                           ;main.c: 512: deinit_keypad();
  5112  037E  3196  2661         	fcall	_deinit_keypad
  5113                           
  5114                           ;main.c: 513: keypad_en = 0;
  5115  0380  0021               	movlb	1	; select bank1
  5116  0381  01B0               	clrf	_keypad_en^(0+128)
  5117  0382  01B1               	clrf	(_keypad_en+1)^(0+128)
  5118                           
  5119                           ;main.c: 520: }
  5120                           
  5121                           ;main.c: 519: break;
  5122                           
  5123                           ;main.c: 518: default:
  5124                           
  5125                           ;main.c: 514: }
  5126                           ;main.c: 515: }
  5127                           ;main.c: 516: break;
  5128  0383  0008               	return
  5129  0384                     l5362:	
  5130  0384  0020               	movlb	0	; select bank0
  5131  0385  0835               	movf	i2c_databyte_handler@reg,w
  5132  0386  3EA0               	addlw	_i2c_reg_add_byte& (0+255)
  5133  0387  0086               	movwf	6
  5134  0388  3001               	movlw	1	; select bank3/4
  5135  0389  0087               	movwf	7
  5136  038A  0801               	movf	1,w
  5137                           
  5138                           ; Switch size 1, requested type "space"
  5139                           ; Number of cases is 28, Range of values is 48 to 235
  5140                           ; switch strategies available:
  5141                           ; Name         Instructions Cycles
  5142                           ; simple_byte           85    43 (average)
  5143                           ; jumptable            263     9 (fixed)
  5144                           ;	Chosen strategy is simple_byte
  5145  038B  3A30               	xorlw	48	; case 48
  5146  038C  1903               	skipnz
  5147  038D  2985               	goto	l5174
  5148  038E  3A01               	xorlw	1	; case 49
  5149  038F  1903               	skipnz
  5150  0390  29B6               	goto	l5198
  5151  0391  3A03               	xorlw	3	; case 50
  5152  0392  1903               	skipnz
  5153  0393  29E7               	goto	l5222
  5154  0394  3A01               	xorlw	1	; case 51
  5155  0395  1903               	skipnz
  5156  0396  2A60               	goto	l5274
  5157  0397  3A07               	xorlw	7	; case 52
  5158  0398  1903               	skipnz
  5159  0399  2AC4               	goto	l5300
  5160  039A  3A02               	xorlw	2	; case 54
  5161  039B  1903               	skipnz
  5162  039C  2B54               	goto	l5338
  5163  039D  3A01               	xorlw	1	; case 55
  5164  039E  1903               	skipnz
  5165  039F  2A1E               	goto	l5246
  5166  03A0  3A0F               	xorlw	15	; case 56
  5167  03A1  1903               	skipnz
  5168  03A2  2A2D               	goto	l5252
  5169  03A3  3A78               	xorlw	120	; case 64
  5170  03A4  1903               	skipnz
  5171  03A5  2A6E               	goto	l5282
  5172  03A6  3A01               	xorlw	1	; case 65
  5173  03A7  1903               	skipnz
  5174  03A8  2A8A               	goto	l5288
  5175  03A9  3A03               	xorlw	3	; case 66
  5176  03AA  1903               	skipnz
  5177  03AB  2AA7               	goto	l5294
  5178  03AC  3A12               	xorlw	18	; case 80
  5179  03AD  1903               	skipnz
  5180  03AE  2AE0               	goto	l5314
  5181  03AF  3A01               	xorlw	1	; case 81
  5182  03B0  1903               	skipnz
  5183  03B1  2AFD               	goto	l5320
  5184  03B2  3A03               	xorlw	3	; case 82
  5185  03B3  1903               	skipnz
  5186  03B4  2B1A               	goto	l5326
  5187  03B5  3A01               	xorlw	1	; case 83
  5188  03B6  1903               	skipnz
  5189  03B7  2B37               	goto	l5332
  5190  03B8  3A23               	xorlw	35	; case 112
  5191  03B9  1903               	skipnz
  5192  03BA  2B6D               	goto	l5350
  5193  03BB  3AE0               	xorlw	224	; case 144
  5194  03BC  1903               	skipnz
  5195  03BD  2A4F               	goto	l5266
  5196  03BE  3A2B               	xorlw	43	; case 187
  5197  03BF  1903               	skipnz
  5198  03C0  2A3D               	goto	l5258
  5199  03C1  3A07               	xorlw	7	; case 188
  5200  03C2  1903               	skipnz
  5201  03C3  28A4               	goto	l5054
  5202  03C4  3A01               	xorlw	1	; case 189
  5203  03C5  1903               	skipnz
  5204  03C6  28D7               	goto	l5080
  5205  03C7  3A03               	xorlw	3	; case 190
  5206  03C8  1903               	skipnz
  5207  03C9  290A               	goto	l5106
  5208  03CA  3A7E               	xorlw	126	; case 192
  5209  03CB  1903               	skipnz
  5210  03CC  2918               	goto	l5114
  5211  03CD  3A25               	xorlw	37	; case 229
  5212  03CE  1903               	skipnz
  5213  03CF  2934               	goto	l5126
  5214  03D0  3A03               	xorlw	3	; case 230
  5215  03D1  1903               	skipnz
  5216  03D2  2942               	goto	l5134
  5217  03D3  3A0E               	xorlw	14	; case 232
  5218  03D4  1903               	skipnz
  5219  03D5  294F               	goto	l5142
  5220  03D6  3A01               	xorlw	1	; case 233
  5221  03D7  1903               	skipnz
  5222  03D8  295C               	goto	l5150
  5223  03D9  3A03               	xorlw	3	; case 234
  5224  03DA  1903               	skipnz
  5225  03DB  2969               	goto	l5158
  5226  03DC  3A01               	xorlw	1	; case 235
  5227  03DD  1903               	skipnz
  5228  03DE  2978               	goto	l5166
  5229  03DF  2BE0               	goto	l387
  5230  03E0                     l387:	
  5231  03E0  0008               	return
  5232  03E1                     __end_of_i2c_databyte_handler:	
  5233                           
  5234                           	psect	text10
  5235  1661                     __ptext10:	
  5236 ;; *************** function _deinit_keypad *****************
  5237 ;; Defined at:
  5238 ;;		line 55 in file "keypad_Api.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;		None
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;		None
  5243 ;; Return value:  Size  Location     Type
  5244 ;;		None               void
  5245 ;; Registers used:
  5246 ;;		None
  5247 ;; Tracked objects:
  5248 ;;		On entry : 0/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5252 ;;      Params:         0       0       0       0       0       0       0       0
  5253 ;;      Locals:         0       0       0       0       0       0       0       0
  5254 ;;      Temps:          0       0       0       0       0       0       0       0
  5255 ;;      Totals:         0       0       0       0       0       0       0       0
  5256 ;;Total ram usage:        0 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    4
  5259 ;; This function calls:
  5260 ;;		Nothing
  5261 ;; This function is called by:
  5262 ;;		_i2c_databyte_handler
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           
  5267                           ;psect for function _deinit_keypad
  5268  1661                     _deinit_keypad:	
  5269                           
  5270                           ;keypad_Api.c: 57: TRISBbits.TRISB0 = 0;
  5271                           
  5272                           ;incstack = 0
  5273                           ; Regs used in _deinit_keypad: []
  5274  1661  0021               	movlb	1	; select bank1
  5275  1662  100D               	bcf	13,0	;volatile
  5276                           
  5277                           ;keypad_Api.c: 58: TRISBbits.TRISB1 = 0;
  5278  1663  108D               	bcf	13,1	;volatile
  5279                           
  5280                           ;keypad_Api.c: 59: TRISBbits.TRISB5 = 0;
  5281  1664  128D               	bcf	13,5	;volatile
  5282                           
  5283                           ;keypad_Api.c: 61: TRISAbits.TRISA7 = 1;
  5284  1665  178C               	bsf	12,7	;volatile
  5285                           
  5286                           ;keypad_Api.c: 62: TRISEbits.TRISE0 = 1;
  5287  1666  1410               	bsf	16,0	;volatile
  5288                           
  5289                           ;keypad_Api.c: 63: TRISEbits.TRISE1 = 1;
  5290  1667  1490               	bsf	16,1	;volatile
  5291                           
  5292                           ;keypad_Api.c: 64: TRISEbits.TRISE2 = 1;
  5293  1668  1510               	bsf	16,2	;volatile
  5294                           
  5295                           ;keypad_Api.c: 67: ANSELBbits.ANSB0 = 0;
  5296  1669  0023               	movlb	3	; select bank3
  5297  166A  100D               	bcf	13,0	;volatile
  5298                           
  5299                           ;keypad_Api.c: 68: ANSELBbits.ANSB1 = 0;
  5300  166B  108D               	bcf	13,1	;volatile
  5301                           
  5302                           ;keypad_Api.c: 69: ANSELBbits.ANSB5 = 0;
  5303  166C  128D               	bcf	13,5	;volatile
  5304                           
  5305                           ;keypad_Api.c: 72: ANSELEbits.ANSE0 = 0;
  5306  166D  1010               	bcf	16,0	;volatile
  5307                           
  5308                           ;keypad_Api.c: 73: ANSELEbits.ANSE1 = 0;
  5309  166E  1090               	bcf	16,1	;volatile
  5310                           
  5311                           ;keypad_Api.c: 74: ANSELEbits.ANSE2 = 0;
  5312  166F  1110               	bcf	16,2	;volatile
  5313                           
  5314                           ;keypad_Api.c: 76: LATBbits.LATB0 = 0;
  5315  1670  0022               	movlb	2	; select bank2
  5316  1671  100D               	bcf	13,0	;volatile
  5317                           
  5318                           ;keypad_Api.c: 77: LATBbits.LATB1 = 0;
  5319  1672  108D               	bcf	13,1	;volatile
  5320                           
  5321                           ;keypad_Api.c: 78: LATBbits.LATB5 = 0;
  5322  1673  128D               	bcf	13,5	;volatile
  5323  1674  0008               	return
  5324  1675                     __end_of_deinit_keypad:	
  5325                           
  5326                           	psect	text11
  5327  15F9                     __ptext11:	
  5328 ;; *************** function _deinit_ir *****************
  5329 ;; Defined at:
  5330 ;;		line 177 in file "peripherals.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;		None
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;		None               void
  5337 ;; Registers used:
  5338 ;;		None
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5344 ;;      Params:         0       0       0       0       0       0       0       0
  5345 ;;      Locals:         0       0       0       0       0       0       0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0
  5347 ;;      Totals:         0       0       0       0       0       0       0       0
  5348 ;;Total ram usage:        0 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    4
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_i2c_databyte_handler
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function _deinit_ir
  5360  15F9                     _deinit_ir:	
  5361                           
  5362                           ;peripherals.c: 178: TRISAbits.TRISA4 = 0;
  5363                           
  5364                           ;incstack = 0
  5365                           ; Regs used in _deinit_ir: []
  5366  15F9  0021               	movlb	1	; select bank1
  5367  15FA  120C               	bcf	12,4	;volatile
  5368                           
  5369                           ;peripherals.c: 179: PORTAbits.RA4 = 0;
  5370  15FB  0020               	movlb	0	; select bank0
  5371  15FC  120C               	bcf	12,4	;volatile
  5372                           
  5373                           ;peripherals.c: 182: TRISAbits.TRISA5 = 0;
  5374  15FD  0021               	movlb	1	; select bank1
  5375  15FE  128C               	bcf	12,5	;volatile
  5376                           
  5377                           ;peripherals.c: 183: PORTAbits.RA5 = 0;
  5378  15FF  0020               	movlb	0	; select bank0
  5379  1600  128C               	bcf	12,5	;volatile
  5380                           
  5381                           ;peripherals.c: 184: ANSELAbits.ANSA5 = 0;
  5382  1601  0023               	movlb	3	; select bank3
  5383  1602  128C               	bcf	12,5	;volatile
  5384                           
  5385                           ;peripherals.c: 186: TRISAbits.TRISA6 = 0;
  5386  1603  0021               	movlb	1	; select bank1
  5387  1604  130C               	bcf	12,6	;volatile
  5388                           
  5389                           ;peripherals.c: 187: PORTAbits.RA6 = 0;
  5390  1605  0020               	movlb	0	; select bank0
  5391  1606  130C               	bcf	12,6	;volatile
  5392  1607  0008               	return
  5393  1608                     __end_of_deinit_ir:	
  5394                           
  5395                           	psect	text12
  5396  15EA                     __ptext12:	
  5397 ;; *************** function _init_ir *****************
  5398 ;; Defined at:
  5399 ;;		line 162 in file "peripherals.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;		None
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;		None
  5404 ;; Return value:  Size  Location     Type
  5405 ;;		None               void
  5406 ;; Registers used:
  5407 ;;		None
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5413 ;;      Params:         0       0       0       0       0       0       0       0
  5414 ;;      Locals:         0       0       0       0       0       0       0       0
  5415 ;;      Temps:          0       0       0       0       0       0       0       0
  5416 ;;      Totals:         0       0       0       0       0       0       0       0
  5417 ;;Total ram usage:        0 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    4
  5420 ;; This function calls:
  5421 ;;		Nothing
  5422 ;; This function is called by:
  5423 ;;		_i2c_databyte_handler
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           
  5428                           ;psect for function _init_ir
  5429  15EA                     _init_ir:	
  5430                           
  5431                           ;peripherals.c: 163: TRISAbits.TRISA4 = 0;
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in _init_ir: []
  5435  15EA  0021               	movlb	1	; select bank1
  5436  15EB  120C               	bcf	12,4	;volatile
  5437                           
  5438                           ;peripherals.c: 164: PORTAbits.RA4 = 0;
  5439  15EC  0020               	movlb	0	; select bank0
  5440  15ED  120C               	bcf	12,4	;volatile
  5441                           
  5442                           ;peripherals.c: 167: TRISAbits.TRISA5 = 0;
  5443  15EE  0021               	movlb	1	; select bank1
  5444  15EF  128C               	bcf	12,5	;volatile
  5445                           
  5446                           ;peripherals.c: 168: PORTAbits.RA5 = 0;
  5447  15F0  0020               	movlb	0	; select bank0
  5448  15F1  128C               	bcf	12,5	;volatile
  5449                           
  5450                           ;peripherals.c: 169: ANSELAbits.ANSA5 = 0;
  5451  15F2  0023               	movlb	3	; select bank3
  5452  15F3  128C               	bcf	12,5	;volatile
  5453                           
  5454                           ;peripherals.c: 171: TRISAbits.TRISA6 = 0;
  5455  15F4  0021               	movlb	1	; select bank1
  5456  15F5  130C               	bcf	12,6	;volatile
  5457                           
  5458                           ;peripherals.c: 172: PORTAbits.RA6 = 0;
  5459  15F6  0020               	movlb	0	; select bank0
  5460  15F7  130C               	bcf	12,6	;volatile
  5461  15F8  0008               	return
  5462  15F9                     __end_of_init_ir:	
  5463                           
  5464                           	psect	text13
  5465  15D0                     __ptext13:	
  5466 ;; *************** function _deinit_ldr *****************
  5467 ;; Defined at:
  5468 ;;		line 152 in file "peripherals.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;		None               void
  5475 ;; Registers used:
  5476 ;;		status,2
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5482 ;;      Params:         0       0       0       0       0       0       0       0
  5483 ;;      Locals:         0       0       0       0       0       0       0       0
  5484 ;;      Temps:          0       0       0       0       0       0       0       0
  5485 ;;      Totals:         0       0       0       0       0       0       0       0
  5486 ;;Total ram usage:        0 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    4
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_i2c_databyte_handler
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           
  5497                           ;psect for function _deinit_ldr
  5498  15D0                     _deinit_ldr:	
  5499                           
  5500                           ;peripherals.c: 153: ADCON0 = 0x00;
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in _deinit_ldr: [status,2]
  5504  15D0  0021               	movlb	1	; select bank1
  5505  15D1  019D               	clrf	29	;volatile
  5506                           
  5507                           ;peripherals.c: 154: PIR1bits.ADIF = 0;
  5508  15D2  0020               	movlb	0	; select bank0
  5509  15D3  1311               	bcf	17,6	;volatile
  5510                           
  5511                           ;peripherals.c: 155: PIE1bits.ADIE = 0;
  5512  15D4  0021               	movlb	1	; select bank1
  5513  15D5  1311               	bcf	17,6	;volatile
  5514                           
  5515                           ;peripherals.c: 156: TRISBbits.TRISB4 = 0;
  5516  15D6  120D               	bcf	13,4	;volatile
  5517                           
  5518                           ;peripherals.c: 157: PORTBbits.RB4 = 0;
  5519  15D7  0020               	movlb	0	; select bank0
  5520  15D8  120D               	bcf	13,4	;volatile
  5521                           
  5522                           ;peripherals.c: 158: ANSELBbits.ANSB4 = 0;
  5523  15D9  0023               	movlb	3	; select bank3
  5524  15DA  120D               	bcf	13,4	;volatile
  5525  15DB  0008               	return
  5526  15DC                     __end_of_deinit_ldr:	
  5527                           
  5528                           	psect	text14
  5529  1618                     __ptext14:	
  5530 ;; *************** function _init_ldr *****************
  5531 ;; Defined at:
  5532 ;;		line 136 in file "peripherals.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;		None
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;		None
  5537 ;; Return value:  Size  Location     Type
  5538 ;;		None               void
  5539 ;; Registers used:
  5540 ;;		wreg
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5546 ;;      Params:         0       0       0       0       0       0       0       0
  5547 ;;      Locals:         0       0       0       0       0       0       0       0
  5548 ;;      Temps:          0       0       0       0       0       0       0       0
  5549 ;;      Totals:         0       0       0       0       0       0       0       0
  5550 ;;Total ram usage:        0 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:    4
  5553 ;; This function calls:
  5554 ;;		Nothing
  5555 ;; This function is called by:
  5556 ;;		_i2c_databyte_handler
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           
  5561                           ;psect for function _init_ldr
  5562  1618                     _init_ldr:	
  5563                           
  5564                           ;peripherals.c: 137: ADCON0 = 0x01;
  5565                           
  5566                           ;incstack = 0
  5567                           ; Regs used in _init_ldr: [wreg]
  5568  1618  3001               	movlw	1
  5569  1619  0021               	movlb	1	; select bank1
  5570  161A  009D               	movwf	29	;volatile
  5571                           
  5572                           ;peripherals.c: 138: ADCON1 = 0x70;
  5573  161B  3070               	movlw	112
  5574  161C  009E               	movwf	30	;volatile
  5575                           
  5576                           ;peripherals.c: 141: PIR1bits.ADIF = 0;
  5577  161D  0020               	movlb	0	; select bank0
  5578  161E  1311               	bcf	17,6	;volatile
  5579                           
  5580                           ;peripherals.c: 142: PIE1bits.ADIE = 0;
  5581  161F  0021               	movlb	1	; select bank1
  5582  1620  1311               	bcf	17,6	;volatile
  5583                           
  5584                           ;peripherals.c: 143: INTCONbits.GIE = 1;
  5585  1621  178B               	bsf	11,7	;volatile
  5586                           
  5587                           ;peripherals.c: 144: INTCONbits.PEIE = 1;
  5588  1622  170B               	bsf	11,6	;volatile
  5589                           
  5590                           ;peripherals.c: 146: TRISBbits.TRISB4 = 1;
  5591  1623  160D               	bsf	13,4	;volatile
  5592                           
  5593                           ;peripherals.c: 147: PORTBbits.RB4 = 0;
  5594  1624  0020               	movlb	0	; select bank0
  5595  1625  120D               	bcf	13,4	;volatile
  5596                           
  5597                           ;peripherals.c: 148: ANSELBbits.ANSB4 = 1;
  5598  1626  0023               	movlb	3	; select bank3
  5599  1627  160D               	bsf	13,4	;volatile
  5600  1628  0008               	return
  5601  1629                     __end_of_init_ldr:	
  5602                           
  5603                           	psect	text15
  5604  1578                     __ptext15:	
  5605 ;; *************** function _deinit_motion *****************
  5606 ;; Defined at:
  5607 ;;		line 46 in file "peripherals.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;		None
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;		None
  5612 ;; Return value:  Size  Location     Type
  5613 ;;		None               void
  5614 ;; Registers used:
  5615 ;;		None
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5621 ;;      Params:         0       0       0       0       0       0       0       0
  5622 ;;      Locals:         0       0       0       0       0       0       0       0
  5623 ;;      Temps:          0       0       0       0       0       0       0       0
  5624 ;;      Totals:         0       0       0       0       0       0       0       0
  5625 ;;Total ram usage:        0 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:    4
  5628 ;; This function calls:
  5629 ;;		Nothing
  5630 ;; This function is called by:
  5631 ;;		_i2c_databyte_handler
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           
  5636                           ;psect for function _deinit_motion
  5637  1578                     _deinit_motion:	
  5638                           
  5639                           ;peripherals.c: 47: TRISDbits.TRISD0 = 0;
  5640                           
  5641                           ;incstack = 0
  5642                           ; Regs used in _deinit_motion: []
  5643  1578  0021               	movlb	1	; select bank1
  5644  1579  100F               	bcf	15,0	;volatile
  5645                           
  5646                           ;peripherals.c: 48: PORTDbits.RD0 = 0;
  5647  157A  0020               	movlb	0	; select bank0
  5648  157B  100F               	bcf	15,0	;volatile
  5649                           
  5650                           ;peripherals.c: 49: ANSELDbits.ANSD0 = 0;
  5651  157C  0023               	movlb	3	; select bank3
  5652  157D  100F               	bcf	15,0	;volatile
  5653  157E  0008               	return
  5654  157F                     __end_of_deinit_motion:	
  5655                           
  5656                           	psect	text16
  5657  1571                     __ptext16:	
  5658 ;; *************** function _init_motion *****************
  5659 ;; Defined at:
  5660 ;;		line 25 in file "peripherals.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;		None
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;		None
  5665 ;; Return value:  Size  Location     Type
  5666 ;;		None               void
  5667 ;; Registers used:
  5668 ;;		None
  5669 ;; Tracked objects:
  5670 ;;		On entry : 0/0
  5671 ;;		On exit  : 0/0
  5672 ;;		Unchanged: 0/0
  5673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5674 ;;      Params:         0       0       0       0       0       0       0       0
  5675 ;;      Locals:         0       0       0       0       0       0       0       0
  5676 ;;      Temps:          0       0       0       0       0       0       0       0
  5677 ;;      Totals:         0       0       0       0       0       0       0       0
  5678 ;;Total ram usage:        0 bytes
  5679 ;; Hardware stack levels used:    1
  5680 ;; Hardware stack levels required when called:    4
  5681 ;; This function calls:
  5682 ;;		Nothing
  5683 ;; This function is called by:
  5684 ;;		_i2c_databyte_handler
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           
  5689                           ;psect for function _init_motion
  5690  1571                     _init_motion:	
  5691                           
  5692                           ;peripherals.c: 26: TRISDbits.TRISD0 = 1;
  5693                           
  5694                           ;incstack = 0
  5695                           ; Regs used in _init_motion: []
  5696  1571  0021               	movlb	1	; select bank1
  5697  1572  140F               	bsf	15,0	;volatile
  5698                           
  5699                           ;peripherals.c: 27: PORTDbits.RD0 = 0;
  5700  1573  0020               	movlb	0	; select bank0
  5701  1574  100F               	bcf	15,0	;volatile
  5702                           
  5703                           ;peripherals.c: 28: ANSELDbits.ANSD0 = 0;
  5704  1575  0023               	movlb	3	; select bank3
  5705  1576  100F               	bcf	15,0	;volatile
  5706  1577  0008               	return
  5707  1578                     __end_of_init_motion:	
  5708                           
  5709                           	psect	text17
  5710  156A                     __ptext17:	
  5711 ;; *************** function _deinit_sensor1 *****************
  5712 ;; Defined at:
  5713 ;;		line 39 in file "peripherals.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;		None
  5716 ;; Auto vars:     Size  Location     Type
  5717 ;;		None
  5718 ;; Return value:  Size  Location     Type
  5719 ;;		None               void
  5720 ;; Registers used:
  5721 ;;		None
  5722 ;; Tracked objects:
  5723 ;;		On entry : 0/0
  5724 ;;		On exit  : 0/0
  5725 ;;		Unchanged: 0/0
  5726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5727 ;;      Params:         0       0       0       0       0       0       0       0
  5728 ;;      Locals:         0       0       0       0       0       0       0       0
  5729 ;;      Temps:          0       0       0       0       0       0       0       0
  5730 ;;      Totals:         0       0       0       0       0       0       0       0
  5731 ;;Total ram usage:        0 bytes
  5732 ;; Hardware stack levels used:    1
  5733 ;; Hardware stack levels required when called:    4
  5734 ;; This function calls:
  5735 ;;		Nothing
  5736 ;; This function is called by:
  5737 ;;		_i2c_databyte_handler
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           
  5742                           ;psect for function _deinit_sensor1
  5743  156A                     _deinit_sensor1:	
  5744                           
  5745                           ;peripherals.c: 40: TRISAbits.TRISA1 = 0;
  5746                           
  5747                           ;incstack = 0
  5748                           ; Regs used in _deinit_sensor1: []
  5749  156A  0021               	movlb	1	; select bank1
  5750  156B  108C               	bcf	12,1	;volatile
  5751                           
  5752                           ;peripherals.c: 41: PORTAbits.RA1 = 0;
  5753  156C  0020               	movlb	0	; select bank0
  5754  156D  108C               	bcf	12,1	;volatile
  5755                           
  5756                           ;peripherals.c: 42: ANSELAbits.ANSA1 = 0;
  5757  156E  0023               	movlb	3	; select bank3
  5758  156F  108C               	bcf	12,1	;volatile
  5759  1570  0008               	return
  5760  1571                     __end_of_deinit_sensor1:	
  5761                           
  5762                           	psect	text18
  5763  1563                     __ptext18:	
  5764 ;; *************** function _init_sensor1 *****************
  5765 ;; Defined at:
  5766 ;;		line 18 in file "peripherals.c"
  5767 ;; Parameters:    Size  Location     Type
  5768 ;;		None
  5769 ;; Auto vars:     Size  Location     Type
  5770 ;;		None
  5771 ;; Return value:  Size  Location     Type
  5772 ;;		None               void
  5773 ;; Registers used:
  5774 ;;		None
  5775 ;; Tracked objects:
  5776 ;;		On entry : 0/0
  5777 ;;		On exit  : 0/0
  5778 ;;		Unchanged: 0/0
  5779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5780 ;;      Params:         0       0       0       0       0       0       0       0
  5781 ;;      Locals:         0       0       0       0       0       0       0       0
  5782 ;;      Temps:          0       0       0       0       0       0       0       0
  5783 ;;      Totals:         0       0       0       0       0       0       0       0
  5784 ;;Total ram usage:        0 bytes
  5785 ;; Hardware stack levels used:    1
  5786 ;; Hardware stack levels required when called:    4
  5787 ;; This function calls:
  5788 ;;		Nothing
  5789 ;; This function is called by:
  5790 ;;		_i2c_databyte_handler
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           
  5795                           ;psect for function _init_sensor1
  5796  1563                     _init_sensor1:	
  5797                           
  5798                           ;peripherals.c: 19: TRISAbits.TRISA1 = 1;
  5799                           
  5800                           ;incstack = 0
  5801                           ; Regs used in _init_sensor1: []
  5802  1563  0021               	movlb	1	; select bank1
  5803  1564  148C               	bsf	12,1	;volatile
  5804                           
  5805                           ;peripherals.c: 20: PORTAbits.RA1 = 0;
  5806  1565  0020               	movlb	0	; select bank0
  5807  1566  108C               	bcf	12,1	;volatile
  5808                           
  5809                           ;peripherals.c: 21: ANSELAbits.ANSA1 = 0;
  5810  1567  0023               	movlb	3	; select bank3
  5811  1568  108C               	bcf	12,1	;volatile
  5812  1569  0008               	return
  5813  156A                     __end_of_init_sensor1:	
  5814                           
  5815                           	psect	text19
  5816  155C                     __ptext19:	
  5817 ;; *************** function _deinit_sensor0 *****************
  5818 ;; Defined at:
  5819 ;;		line 32 in file "peripherals.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;		None
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;		None
  5824 ;; Return value:  Size  Location     Type
  5825 ;;		None               void
  5826 ;; Registers used:
  5827 ;;		None
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5833 ;;      Params:         0       0       0       0       0       0       0       0
  5834 ;;      Locals:         0       0       0       0       0       0       0       0
  5835 ;;      Temps:          0       0       0       0       0       0       0       0
  5836 ;;      Totals:         0       0       0       0       0       0       0       0
  5837 ;;Total ram usage:        0 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    4
  5840 ;; This function calls:
  5841 ;;		Nothing
  5842 ;; This function is called by:
  5843 ;;		_i2c_databyte_handler
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           
  5848                           ;psect for function _deinit_sensor0
  5849  155C                     _deinit_sensor0:	
  5850                           
  5851                           ;peripherals.c: 33: TRISAbits.TRISA0 = 0;
  5852                           
  5853                           ;incstack = 0
  5854                           ; Regs used in _deinit_sensor0: []
  5855  155C  0021               	movlb	1	; select bank1
  5856  155D  100C               	bcf	12,0	;volatile
  5857                           
  5858                           ;peripherals.c: 34: PORTAbits.RA0 = 0;
  5859  155E  0020               	movlb	0	; select bank0
  5860  155F  100C               	bcf	12,0	;volatile
  5861                           
  5862                           ;peripherals.c: 35: ANSELAbits.ANSA0 = 0;
  5863  1560  0023               	movlb	3	; select bank3
  5864  1561  100C               	bcf	12,0	;volatile
  5865  1562  0008               	return
  5866  1563                     __end_of_deinit_sensor0:	
  5867                           
  5868                           	psect	text20
  5869  1555                     __ptext20:	
  5870 ;; *************** function _init_sensor0 *****************
  5871 ;; Defined at:
  5872 ;;		line 11 in file "peripherals.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;		None
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;		None
  5877 ;; Return value:  Size  Location     Type
  5878 ;;		None               void
  5879 ;; Registers used:
  5880 ;;		None
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5886 ;;      Params:         0       0       0       0       0       0       0       0
  5887 ;;      Locals:         0       0       0       0       0       0       0       0
  5888 ;;      Temps:          0       0       0       0       0       0       0       0
  5889 ;;      Totals:         0       0       0       0       0       0       0       0
  5890 ;;Total ram usage:        0 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    4
  5893 ;; This function calls:
  5894 ;;		Nothing
  5895 ;; This function is called by:
  5896 ;;		_i2c_databyte_handler
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           
  5901                           ;psect for function _init_sensor0
  5902  1555                     _init_sensor0:	
  5903                           
  5904                           ;peripherals.c: 12: TRISAbits.TRISA0 = 1;
  5905                           
  5906                           ;incstack = 0
  5907                           ; Regs used in _init_sensor0: []
  5908  1555  0021               	movlb	1	; select bank1
  5909  1556  140C               	bsf	12,0	;volatile
  5910                           
  5911                           ;peripherals.c: 13: PORTAbits.RA0 = 0;
  5912  1557  0020               	movlb	0	; select bank0
  5913  1558  100C               	bcf	12,0	;volatile
  5914                           
  5915                           ;peripherals.c: 14: ANSELAbits.ANSA0 = 0;
  5916  1559  0023               	movlb	3	; select bank3
  5917  155A  100C               	bcf	12,0	;volatile
  5918  155B  0008               	return
  5919  155C                     __end_of_init_sensor0:	
  5920                           
  5921                           	psect	text21
  5922  15C4                     __ptext21:	
  5923 ;; *************** function _echo_cancel_off *****************
  5924 ;; Defined at:
  5925 ;;		line 16 in file "CS6422_Api.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;		None
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;		None               void
  5932 ;; Registers used:
  5933 ;;		wreg
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5939 ;;      Params:         0       0       0       0       0       0       0       0
  5940 ;;      Locals:         0       0       0       0       0       0       0       0
  5941 ;;      Temps:          0       2       0       0       0       0       0       0
  5942 ;;      Totals:         0       2       0       0       0       0       0       0
  5943 ;;Total ram usage:        2 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    4
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_i2c_databyte_handler
  5950 ;;		_init_cs6422
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function _echo_cancel_off
  5956  15C4                     _echo_cancel_off:	
  5957                           
  5958                           ;CS6422_Api.c: 17: PORTDbits.RD5 = 0;
  5959                           
  5960                           ;incstack = 0
  5961                           ; Regs used in _echo_cancel_off: [wreg]
  5962  15C4  0020               	movlb	0	; select bank0
  5963  15C5  128F               	bcf	15,5	;volatile
  5964                           
  5965                           ;CS6422_Api.c: 18: _delay((unsigned long)((2)*(4000000/4000.0)));
  5966  15C6  3003               	movlw	3
  5967  15C7  00AE               	movwf	??_echo_cancel_off+1
  5968  15C8  3097               	movlw	151
  5969  15C9  00AD               	movwf	??_echo_cancel_off
  5970  15CA                     u6357:	
  5971  15CA  0BAD               	decfsz	??_echo_cancel_off,f
  5972  15CB  2DCA               	goto	u6357
  5973  15CC  0BAE               	decfsz	??_echo_cancel_off+1,f
  5974  15CD  2DCA               	goto	u6357
  5975  15CE  2DCF               	nop2
  5976  15CF  0008               	return
  5977  15D0                     __end_of_echo_cancel_off:	
  5978                           
  5979                           	psect	text22
  5980  15B8                     __ptext22:	
  5981 ;; *************** function _echo_cancel_on *****************
  5982 ;; Defined at:
  5983 ;;		line 10 in file "CS6422_Api.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;		None
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;		None
  5988 ;; Return value:  Size  Location     Type
  5989 ;;		None               void
  5990 ;; Registers used:
  5991 ;;		wreg
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5997 ;;      Params:         0       0       0       0       0       0       0       0
  5998 ;;      Locals:         0       0       0       0       0       0       0       0
  5999 ;;      Temps:          0       2       0       0       0       0       0       0
  6000 ;;      Totals:         0       2       0       0       0       0       0       0
  6001 ;;Total ram usage:        2 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    4
  6004 ;; This function calls:
  6005 ;;		Nothing
  6006 ;; This function is called by:
  6007 ;;		_i2c_databyte_handler
  6008 ;;		_init_cs6422
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _echo_cancel_on
  6014  15B8                     _echo_cancel_on:	
  6015                           
  6016                           ;CS6422_Api.c: 11: PORTDbits.RD5 = 1;
  6017                           
  6018                           ;incstack = 0
  6019                           ; Regs used in _echo_cancel_on: [wreg]
  6020  15B8  0020               	movlb	0	; select bank0
  6021  15B9  168F               	bsf	15,5	;volatile
  6022                           
  6023                           ;CS6422_Api.c: 12: _delay((unsigned long)((2)*(4000000/4000.0)));
  6024  15BA  3003               	movlw	3
  6025  15BB  00AE               	movwf	??_echo_cancel_on+1
  6026  15BC  3097               	movlw	151
  6027  15BD  00AD               	movwf	??_echo_cancel_on
  6028  15BE                     u6367:	
  6029  15BE  0BAD               	decfsz	??_echo_cancel_on,f
  6030  15BF  2DBE               	goto	u6367
  6031  15C0  0BAE               	decfsz	??_echo_cancel_on+1,f
  6032  15C1  2DBE               	goto	u6367
  6033  15C2  2DC3               	nop2
  6034  15C3  0008               	return
  6035  15C4                     __end_of_echo_cancel_on:	
  6036                           
  6037                           	psect	text23
  6038  08E6                     __ptext23:	
  6039 ;; *************** function _get_i2c_msg_from_master_byte *****************
  6040 ;; Defined at:
  6041 ;;		line 294 in file "i2c_Api.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;		None
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;  i               2   15[BANK0 ] int 
  6046 ;;  buff            1   14[BANK0 ] unsigned char 
  6047 ;; Return value:  Size  Location     Type
  6048 ;;                  1    wreg      unsigned char 
  6049 ;; Registers used:
  6050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
  6051 ;; Tracked objects:
  6052 ;;		On entry : 0/0
  6053 ;;		On exit  : 0/0
  6054 ;;		Unchanged: 0/0
  6055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6056 ;;      Params:         0       0       0       0       0       0       0       0
  6057 ;;      Locals:         0       3       0       0       0       0       0       0
  6058 ;;      Temps:          0       1       0       0       0       0       0       0
  6059 ;;      Totals:         0       4       0       0       0       0       0       0
  6060 ;;Total ram usage:        4 bytes
  6061 ;; Hardware stack levels used:    1
  6062 ;; Hardware stack levels required when called:    4
  6063 ;; This function calls:
  6064 ;;		Nothing
  6065 ;; This function is called by:
  6066 ;;		_i2c_databyte_handler
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           
  6071                           ;psect for function _get_i2c_msg_from_master_byte
  6072  08E6                     _get_i2c_msg_from_master_byte:	
  6073                           
  6074                           ;i2c_Api.c: 295: int i;
  6075                           ;i2c_Api.c: 296: unsigned char buff = i2c_rx_data_buff_byte[0];
  6076                           
  6077                           ;incstack = 0
  6078                           ; Regs used in _get_i2c_msg_from_master_byte: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+
      +                          1]
  6079  08E6  0022               	movlb	2	; select bank2
  6080  08E7  084C               	movf	_i2c_rx_data_buff_byte^(0+256),w
  6081  08E8  0020               	movlb	0	; select bank0
  6082  08E9  00AD               	movwf	??_get_i2c_msg_from_master_byte
  6083  08EA  082D               	movf	??_get_i2c_msg_from_master_byte,w
  6084  08EB  00AE               	movwf	get_i2c_msg_from_master_byte@buff
  6085                           
  6086                           ;i2c_Api.c: 297: for (i = 1; i < 7; i++)
  6087  08EC  3001               	movlw	1
  6088  08ED  00AF               	movwf	get_i2c_msg_from_master_byte@i
  6089  08EE  3000               	movlw	0
  6090  08EF  00B0               	movwf	get_i2c_msg_from_master_byte@i+1
  6091  08F0  0830               	movf	get_i2c_msg_from_master_byte@i+1,w
  6092  08F1  3A80               	xorlw	128
  6093  08F2  00FF               	movwf	127
  6094  08F3  3080               	movlw	128
  6095  08F4  027F               	subwf	127,w
  6096  08F5  1D03               	skipz
  6097  08F6  28F9               	goto	u5735
  6098  08F7  3007               	movlw	7
  6099  08F8  022F               	subwf	get_i2c_msg_from_master_byte@i,w
  6100  08F9                     u5735:	
  6101  08F9  1803               	btfsc	3,0
  6102  08FA  291A               	goto	l5438
  6103  08FB                     l5432:	
  6104                           
  6105                           ;i2c_Api.c: 298: {
  6106                           ;i2c_Api.c: 299: i2c_rx_data_buff_byte[i - 1] = i2c_rx_data_buff_byte[i];
  6107  08FB  0020               	movlb	0	; select bank0
  6108  08FC  082F               	movf	get_i2c_msg_from_master_byte@i,w
  6109  08FD  3E4C               	addlw	_i2c_rx_data_buff_byte& (0+255)
  6110  08FE  0086               	movwf	6
  6111  08FF  3001               	movlw	1	; select bank2/3
  6112  0900  0087               	movwf	7
  6113  0901  0801               	movf	1,w
  6114  0902  00AD               	movwf	??_get_i2c_msg_from_master_byte
  6115  0903  082F               	movf	get_i2c_msg_from_master_byte@i,w
  6116  0904  3EFF               	addlw	255
  6117  0905  3E4C               	addlw	_i2c_rx_data_buff_byte& (0+255)
  6118  0906  0086               	movwf	6
  6119  0907  3001               	movlw	1	; select bank2/3
  6120  0908  0087               	movwf	7
  6121  0909  082D               	movf	??_get_i2c_msg_from_master_byte,w
  6122  090A  0081               	movwf	1
  6123  090B  3001               	movlw	1
  6124  090C  07AF               	addwf	get_i2c_msg_from_master_byte@i,f
  6125  090D  3000               	movlw	0
  6126  090E  3DB0               	addwfc	get_i2c_msg_from_master_byte@i+1,f
  6127  090F  0830               	movf	get_i2c_msg_from_master_byte@i+1,w
  6128  0910  3A80               	xorlw	128
  6129  0911  00FF               	movwf	127
  6130  0912  3080               	movlw	128
  6131  0913  027F               	subwf	127,w
  6132  0914  1D03               	skipz
  6133  0915  2918               	goto	u5745
  6134  0916  3007               	movlw	7
  6135  0917  022F               	subwf	get_i2c_msg_from_master_byte@i,w
  6136  0918                     u5745:	
  6137  0918  1C03               	skipc
  6138  0919  28FB               	goto	l5432
  6139  091A                     l5438:	
  6140                           
  6141                           ;i2c_Api.c: 300: }
  6142                           ;i2c_Api.c: 301: i2c_rx_data_buff_byte[7 - 1] = 0xFB;
  6143  091A  30FB               	movlw	251
  6144  091B  0020               	movlb	0	; select bank0
  6145  091C  00AD               	movwf	??_get_i2c_msg_from_master_byte
  6146  091D  082D               	movf	??_get_i2c_msg_from_master_byte,w
  6147  091E  0022               	movlb	2	; select bank2
  6148  091F  00D2               	movwf	(_i2c_rx_data_buff_byte^(0+256)+6)
  6149                           
  6150                           ;i2c_Api.c: 302: return buff;
  6151  0920  0020               	movlb	0	; select bank0
  6152  0921  082E               	movf	get_i2c_msg_from_master_byte@buff,w
  6153  0922  0008               	return
  6154  0923                     __end_of_get_i2c_msg_from_master_byte:	
  6155                           
  6156                           	psect	text24
  6157  0A1B                     __ptext24:	
  6158 ;; *************** function _get_i2c_regadd_from_master_byte *****************
  6159 ;; Defined at:
  6160 ;;		line 282 in file "i2c_Api.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;		None
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  i               2   17[BANK0 ] int 
  6165 ;;  buff            2   15[BANK0 ] int 
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  2   13[BANK0 ] int 
  6168 ;; Registers used:
  6169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6175 ;;      Params:         0       2       0       0       0       0       0       0
  6176 ;;      Locals:         0       4       0       0       0       0       0       0
  6177 ;;      Temps:          0       0       0       0       0       0       0       0
  6178 ;;      Totals:         0       6       0       0       0       0       0       0
  6179 ;;Total ram usage:        6 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    4
  6182 ;; This function calls:
  6183 ;;		Nothing
  6184 ;; This function is called by:
  6185 ;;		_i2c_databyte_handler
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           
  6190                           ;psect for function _get_i2c_regadd_from_master_byte
  6191  0A1B                     _get_i2c_regadd_from_master_byte:	
  6192                           
  6193                           ;i2c_Api.c: 283: int i;
  6194                           ;i2c_Api.c: 284: int buff = i2c_rx_radd_buff_byte[0];
  6195                           
  6196                           ;incstack = 0
  6197                           ; Regs used in _get_i2c_regadd_from_master_byte: [wreg-fsr1h+status,2+status,0+btemp+1]
  6198  0A1B  0022               	movlb	2	; select bank2
  6199  0A1C  083F               	movf	(_i2c_rx_radd_buff_byte+1)^(0+256),w
  6200  0A1D  0020               	movlb	0	; select bank0
  6201  0A1E  01B0               	clrf	get_i2c_regadd_from_master_byte@buff+1
  6202  0A1F  07B0               	addwf	get_i2c_regadd_from_master_byte@buff+1,f
  6203  0A20  0022               	movlb	2	; select bank2
  6204  0A21  083E               	movf	_i2c_rx_radd_buff_byte^(0+256),w
  6205  0A22  0020               	movlb	0	; select bank0
  6206  0A23  01AF               	clrf	get_i2c_regadd_from_master_byte@buff
  6207  0A24  07AF               	addwf	get_i2c_regadd_from_master_byte@buff,f
  6208                           
  6209                           ;i2c_Api.c: 285: for (i = 1; i < 7; i++)
  6210  0A25  3001               	movlw	1
  6211  0A26  00B1               	movwf	get_i2c_regadd_from_master_byte@i
  6212  0A27  3000               	movlw	0
  6213  0A28  00B2               	movwf	get_i2c_regadd_from_master_byte@i+1
  6214  0A29  0832               	movf	get_i2c_regadd_from_master_byte@i+1,w
  6215  0A2A  3A80               	xorlw	128
  6216  0A2B  00FF               	movwf	127
  6217  0A2C  3080               	movlw	128
  6218  0A2D  027F               	subwf	127,w
  6219  0A2E  1D03               	skipz
  6220  0A2F  2A32               	goto	u5715
  6221  0A30  3007               	movlw	7
  6222  0A31  0231               	subwf	get_i2c_regadd_from_master_byte@i,w
  6223  0A32                     u5715:	
  6224  0A32  1803               	btfsc	3,0
  6225  0A33  2A53               	goto	l5420
  6226  0A34                     l5414:	
  6227                           
  6228                           ;i2c_Api.c: 286: {
  6229                           ;i2c_Api.c: 287: i2c_rx_radd_buff_byte[i - 1] = i2c_rx_radd_buff_byte[i];
  6230  0A34  0020               	movlb	0	; select bank0
  6231  0A35  3531               	lslf	get_i2c_regadd_from_master_byte@i,w
  6232  0A36  3E3E               	addlw	_i2c_rx_radd_buff_byte& (0+255)
  6233  0A37  0086               	movwf	6
  6234  0A38  3001               	movlw	1	; select bank2/3
  6235  0A39  0087               	movwf	7
  6236  0A3A  3531               	lslf	get_i2c_regadd_from_master_byte@i,w
  6237  0A3B  3EFE               	addlw	254
  6238  0A3C  3E3E               	addlw	_i2c_rx_radd_buff_byte& (0+255)
  6239  0A3D  0084               	movwf	4
  6240  0A3E  3001               	movlw	1	; select bank2/3
  6241  0A3F  0085               	movwf	5
  6242  0A40  3F40               	moviw [0]fsr1
  6243  0A41  3F80               	movwi [0]fsr0
  6244  0A42  3F41               	moviw [1]fsr1
  6245  0A43  3F81               	movwi [1]fsr0
  6246  0A44  3001               	movlw	1
  6247  0A45  07B1               	addwf	get_i2c_regadd_from_master_byte@i,f
  6248  0A46  3000               	movlw	0
  6249  0A47  3DB2               	addwfc	get_i2c_regadd_from_master_byte@i+1,f
  6250  0A48  0832               	movf	get_i2c_regadd_from_master_byte@i+1,w
  6251  0A49  3A80               	xorlw	128
  6252  0A4A  00FF               	movwf	127
  6253  0A4B  3080               	movlw	128
  6254  0A4C  027F               	subwf	127,w
  6255  0A4D  1D03               	skipz
  6256  0A4E  2A51               	goto	u5725
  6257  0A4F  3007               	movlw	7
  6258  0A50  0231               	subwf	get_i2c_regadd_from_master_byte@i,w
  6259  0A51                     u5725:	
  6260  0A51  1C03               	skipc
  6261  0A52  2A34               	goto	l5414
  6262  0A53                     l5420:	
  6263                           
  6264                           ;i2c_Api.c: 288: }
  6265                           ;i2c_Api.c: 289: i2c_rx_radd_buff_byte[7 - 1] = 0xFB;
  6266  0A53  30FB               	movlw	251
  6267  0A54  0022               	movlb	2	; select bank2
  6268  0A55  00CA               	movwf	(_i2c_rx_radd_buff_byte^(0+256)+12)
  6269  0A56  3000               	movlw	0
  6270  0A57  00CB               	movwf	(_i2c_rx_radd_buff_byte^(0+256)+13)
  6271                           
  6272                           ;i2c_Api.c: 290: return buff;
  6273  0A58  0020               	movlb	0	; select bank0
  6274  0A59  0830               	movf	get_i2c_regadd_from_master_byte@buff+1,w
  6275  0A5A  01AE               	clrf	?_get_i2c_regadd_from_master_byte+1
  6276  0A5B  07AE               	addwf	?_get_i2c_regadd_from_master_byte+1,f
  6277  0A5C  082F               	movf	get_i2c_regadd_from_master_byte@buff,w
  6278  0A5D  01AD               	clrf	?_get_i2c_regadd_from_master_byte
  6279  0A5E  07AD               	addwf	?_get_i2c_regadd_from_master_byte,f
  6280  0A5F  0008               	return
  6281  0A60                     __end_of_get_i2c_regadd_from_master_byte:	
  6282                           
  6283                           	psect	text25
  6284  16E5                     __ptext25:	
  6285 ;; *************** function _shutdown_service *****************
  6286 ;; Defined at:
  6287 ;;		line 612 in file "main.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;		None
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;		None
  6292 ;; Return value:  Size  Location     Type
  6293 ;;		None               void
  6294 ;; Registers used:
  6295 ;;		wreg, status,2, btemp+1
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6301 ;;      Params:         0       0       0       0       0       0       0       0
  6302 ;;      Locals:         0       0       0       0       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0       0
  6304 ;;      Totals:         0       0       0       0       0       0       0       0
  6305 ;;Total ram usage:        0 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    4
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_main
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           
  6316                           ;psect for function _shutdown_service
  6317  16E5                     _shutdown_service:	
  6318                           
  6319                           ;main.c: 613: if (shutdown_flag == 1) {
  6320                           
  6321                           ;incstack = 0
  6322                           ; Regs used in _shutdown_service: [wreg+status,2+btemp+1]
  6323  16E5  3001               	movlw	1
  6324  16E6  0021               	movlb	1	; select bank1
  6325  16E7  0646               	xorwf	_shutdown_flag^(0+128),w
  6326  16E8  0447               	iorwf	(_shutdown_flag+1)^(0+128),w
  6327  16E9  1D03               	skipz
  6328  16EA  0008               	return
  6329                           
  6330                           ;main.c: 614: if (shutdown_counter > 5000) {
  6331  16EB  0845               	movf	(_shutdown_counter+1)^(0+128),w
  6332  16EC  3A80               	xorlw	128
  6333  16ED  00FF               	movwf	127
  6334  16EE  3093               	movlw	147
  6335  16EF  027F               	subwf	127,w
  6336  16F0  1D03               	skipz
  6337  16F1  2EF4               	goto	u5045
  6338  16F2  3089               	movlw	137
  6339  16F3  0244               	subwf	_shutdown_counter^(0+128),w
  6340  16F4                     u5045:	
  6341  16F4  1C03               	skipc
  6342  16F5  2EFE               	goto	l412
  6343                           
  6344                           ;main.c: 615: PORTDbits.RD2 = 0;
  6345  16F6  0020               	movlb	0	; select bank0
  6346  16F7  110F               	bcf	15,2	;volatile
  6347                           
  6348                           ;main.c: 616: shutdown_counter = 0;
  6349  16F8  0021               	movlb	1	; select bank1
  6350  16F9  01C4               	clrf	_shutdown_counter^(0+128)
  6351  16FA  01C5               	clrf	(_shutdown_counter+1)^(0+128)
  6352                           
  6353                           ;main.c: 617: shutdown_flag = 0;
  6354  16FB  01C6               	clrf	_shutdown_flag^(0+128)
  6355  16FC  01C7               	clrf	(_shutdown_flag+1)^(0+128)
  6356                           
  6357                           ;main.c: 618: } else {
  6358  16FD  0008               	return
  6359  16FE                     l412:	
  6360                           
  6361                           ;main.c: 619: PORTDbits.RD2 = 1;
  6362  16FE  0020               	movlb	0	; select bank0
  6363  16FF  150F               	bsf	15,2	;volatile
  6364                           
  6365                           ;main.c: 620: shutdown_counter++;
  6366  1700  3001               	movlw	1
  6367  1701  0021               	movlb	1	; select bank1
  6368  1702  07C4               	addwf	_shutdown_counter^(0+128),f
  6369  1703  3000               	movlw	0
  6370  1704  3DC5               	addwfc	(_shutdown_counter+1)^(0+128),f
  6371  1705  0008               	return
  6372  1706                     __end_of_shutdown_service:	
  6373                           
  6374                           	psect	text26
  6375  1777                     __ptext26:	
  6376 ;; *************** function _i2c_interrupt_handler *****************
  6377 ;; Defined at:
  6378 ;;		line 167 in file "i2c_Api.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;		None
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;		None
  6383 ;; Return value:  Size  Location     Type
  6384 ;;		None               void
  6385 ;; Registers used:
  6386 ;;		wreg, status,2, btemp+1
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6392 ;;      Params:         0       0       0       0       0       0       0       0
  6393 ;;      Locals:         0       0       0       0       0       0       0       0
  6394 ;;      Temps:          0       0       0       0       0       0       0       0
  6395 ;;      Totals:         0       0       0       0       0       0       0       0
  6396 ;;Total ram usage:        0 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:    4
  6399 ;; This function calls:
  6400 ;;		Nothing
  6401 ;; This function is called by:
  6402 ;;		_main
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           
  6407                           ;psect for function _i2c_interrupt_handler
  6408  1777                     _i2c_interrupt_handler:	
  6409                           
  6410                           ;i2c_Api.c: 169: if (i2c_interrupt_prescaler > 100)
  6411                           
  6412                           ;incstack = 0
  6413                           ; Regs used in _i2c_interrupt_handler: [wreg+status,2+btemp+1]
  6414  1777  0021               	movlb	1	; select bank1
  6415  1778  0829               	movf	(_i2c_interrupt_prescaler+1)^(0+128),w
  6416  1779  3A80               	xorlw	128
  6417  177A  00FF               	movwf	127
  6418  177B  3080               	movlw	128
  6419  177C  027F               	subwf	127,w
  6420  177D  1D03               	skipz
  6421  177E  2F81               	goto	u5015
  6422  177F  3065               	movlw	101
  6423  1780  0228               	subwf	_i2c_interrupt_prescaler^(0+128),w
  6424  1781                     u5015:	
  6425  1781  1C03               	skipc
  6426  1782  2F98               	goto	l5036
  6427                           
  6428                           ;i2c_Api.c: 170: {
  6429                           ;i2c_Api.c: 171: if (i2c_interrupt_flag > 0)
  6430  1783  0021               	movlb	1	; select bank1
  6431  1784  0827               	movf	(_i2c_interrupt_flag+1)^(0+128),w
  6432  1785  3A80               	xorlw	128
  6433  1786  00FF               	movwf	127
  6434  1787  3080               	movlw	128
  6435  1788  027F               	subwf	127,w
  6436  1789  1D03               	skipz
  6437  178A  2F8D               	goto	u5025
  6438  178B  3001               	movlw	1
  6439  178C  0226               	subwf	_i2c_interrupt_flag^(0+128),w
  6440  178D                     u5025:	
  6441  178D  1C03               	skipc
  6442  178E  2F92               	goto	l591
  6443                           
  6444                           ;i2c_Api.c: 172: {
  6445                           ;i2c_Api.c: 174: PORTCbits.RC2 = 1;
  6446  178F  0020               	movlb	0	; select bank0
  6447  1790  150E               	bsf	14,2	;volatile
  6448                           
  6449                           ;i2c_Api.c: 175: } else
  6450  1791  2F94               	goto	l5034
  6451  1792                     l591:	
  6452                           
  6453                           ;i2c_Api.c: 176: {
  6454                           ;i2c_Api.c: 178: PORTCbits.RC2 = 0;
  6455  1792  0020               	movlb	0	; select bank0
  6456  1793  110E               	bcf	14,2	;volatile
  6457  1794                     l5034:	
  6458                           
  6459                           ;i2c_Api.c: 179: }
  6460                           ;i2c_Api.c: 180: i2c_interrupt_prescaler = 0;
  6461  1794  0021               	movlb	1	; select bank1
  6462  1795  01A8               	clrf	_i2c_interrupt_prescaler^(0+128)
  6463  1796  01A9               	clrf	(_i2c_interrupt_prescaler+1)^(0+128)
  6464                           
  6465                           ;i2c_Api.c: 181: } else
  6466  1797  0008               	return
  6467  1798                     l5036:	
  6468                           
  6469                           ;i2c_Api.c: 182: {
  6470                           ;i2c_Api.c: 183: i2c_interrupt_prescaler++;
  6471  1798  3001               	movlw	1
  6472  1799  0021               	movlb	1	; select bank1
  6473  179A  07A8               	addwf	_i2c_interrupt_prescaler^(0+128),f
  6474  179B  3000               	movlw	0
  6475  179C  3DA9               	addwfc	(_i2c_interrupt_prescaler+1)^(0+128),f
  6476  179D  0008               	return
  6477  179E                     __end_of_i2c_interrupt_handler:	
  6478                           
  6479                           	psect	text27
  6480  1750                     __ptext27:	
  6481 ;; *************** function _ir_level_service *****************
  6482 ;; Defined at:
  6483 ;;		line 192 in file "peripherals.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;		None
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;		None
  6488 ;; Return value:  Size  Location     Type
  6489 ;;		None               void
  6490 ;; Registers used:
  6491 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6497 ;;      Params:         0       0       0       0       0       0       0       0
  6498 ;;      Locals:         0       0       0       0       0       0       0       0
  6499 ;;      Temps:          0       0       0       0       0       0       0       0
  6500 ;;      Totals:         0       0       0       0       0       0       0       0
  6501 ;;Total ram usage:        0 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:    4
  6504 ;; This function calls:
  6505 ;;		Nothing
  6506 ;; This function is called by:
  6507 ;;		_main
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           
  6512                           ;psect for function _ir_level_service
  6513  1750                     _ir_level_service:	
  6514                           
  6515                           ;peripherals.c: 193: switch (ir_level)
  6516                           
  6517                           ;incstack = 0
  6518                           ; Regs used in _ir_level_service: [wreg-fsr0h+status,2+status,0]
  6519  1750  2F65               	goto	l5022
  6520  1751                     l927:	
  6521                           ;peripherals.c: 194: {
  6522                           ;peripherals.c: 195: case 1:
  6523                           
  6524                           
  6525                           ;peripherals.c: 196: PORTAbits.RA4=0;
  6526  1751  0020               	movlb	0	; select bank0
  6527  1752  120C               	bcf	12,4	;volatile
  6528                           
  6529                           ;peripherals.c: 197: PORTAbits.RA5=1;
  6530  1753  168C               	bsf	12,5	;volatile
  6531                           
  6532                           ;peripherals.c: 198: PORTAbits.RA6=0;
  6533  1754  130C               	bcf	12,6	;volatile
  6534                           
  6535                           ;peripherals.c: 199: break;
  6536  1755  0008               	return
  6537  1756                     l929:	
  6538                           ;peripherals.c: 200: case 2:
  6539                           
  6540                           
  6541                           ;peripherals.c: 201: PORTAbits.RA4=1;
  6542  1756  0020               	movlb	0	; select bank0
  6543  1757  160C               	bsf	12,4	;volatile
  6544                           
  6545                           ;peripherals.c: 202: PORTAbits.RA5=0;
  6546  1758  128C               	bcf	12,5	;volatile
  6547                           
  6548                           ;peripherals.c: 203: PORTAbits.RA6=1;
  6549  1759  170C               	bsf	12,6	;volatile
  6550                           
  6551                           ;peripherals.c: 204: break;
  6552  175A  0008               	return
  6553  175B                     l930:	
  6554                           ;peripherals.c: 205: case 3:
  6555                           
  6556                           
  6557                           ;peripherals.c: 206: PORTAbits.RA4=1;
  6558  175B  0020               	movlb	0	; select bank0
  6559  175C  160C               	bsf	12,4	;volatile
  6560                           
  6561                           ;peripherals.c: 207: PORTAbits.RA5=1;
  6562  175D  168C               	bsf	12,5	;volatile
  6563                           
  6564                           ;peripherals.c: 208: PORTAbits.RA6=1;
  6565  175E  170C               	bsf	12,6	;volatile
  6566                           
  6567                           ;peripherals.c: 209: break;
  6568  175F  0008               	return
  6569  1760                     l931:	
  6570                           ;peripherals.c: 210: default:
  6571                           
  6572                           
  6573                           ;peripherals.c: 211: PORTAbits.RA4=0;
  6574  1760  0020               	movlb	0	; select bank0
  6575  1761  120C               	bcf	12,4	;volatile
  6576                           
  6577                           ;peripherals.c: 212: PORTAbits.RA5=0;
  6578  1762  128C               	bcf	12,5	;volatile
  6579                           
  6580                           ;peripherals.c: 213: PORTAbits.RA6=0;
  6581  1763  130C               	bcf	12,6	;volatile
  6582                           
  6583                           ;peripherals.c: 216: }
  6584                           
  6585                           ;peripherals.c: 214: break;
  6586  1764  0008               	return
  6587  1765                     l5022:	
  6588                           
  6589                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6590                           ; Switch size 1, requested type "space"
  6591                           ; Number of cases is 1, Range of values is 0 to 0
  6592                           ; switch strategies available:
  6593                           ; Name         Instructions Cycles
  6594                           ; simple_byte            4     3 (average)
  6595                           ; direct_byte            8     6 (fixed)
  6596                           ; jumptable            260     6 (fixed)
  6597                           ;	Chosen strategy is simple_byte
  6598  1765  0021               	movlb	1	; select bank1
  6599  1766  082F               	movf	(_ir_level+1)^(0+128),w
  6600  1767  3A00               	xorlw	0	; case 0
  6601  1768  1903               	skipnz
  6602  1769  2F6B               	goto	l6000
  6603  176A  2F60               	goto	l931
  6604  176B                     l6000:	
  6605                           
  6606                           ; Switch size 1, requested type "space"
  6607                           ; Number of cases is 3, Range of values is 1 to 3
  6608                           ; switch strategies available:
  6609                           ; Name         Instructions Cycles
  6610                           ; simple_byte           10     6 (average)
  6611                           ; direct_byte           15     9 (fixed)
  6612                           ; jumptable            263     9 (fixed)
  6613                           ;	Chosen strategy is simple_byte
  6614  176B  082E               	movf	_ir_level^(0+128),w
  6615  176C  3A01               	xorlw	1	; case 1
  6616  176D  1903               	skipnz
  6617  176E  2F51               	goto	l927
  6618  176F  3A03               	xorlw	3	; case 2
  6619  1770  1903               	skipnz
  6620  1771  2F56               	goto	l929
  6621  1772  3A01               	xorlw	1	; case 3
  6622  1773  1903               	skipnz
  6623  1774  2F5B               	goto	l930
  6624  1775  2F60               	goto	l931
  6625  1776  0008               	return
  6626  1777                     __end_of_ir_level_service:	
  6627                           
  6628                           	psect	text28
  6629  0ABA                     __ptext28:	
  6630 ;; *************** function _adc_read_service *****************
  6631 ;; Defined at:
  6632 ;;		line 407 in file "peripherals.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;		None               void
  6639 ;; Registers used:
  6640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6646 ;;      Params:         0       0       0       0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0
  6648 ;;      Temps:          0       1       0       0       0       0       0       0
  6649 ;;      Totals:         0       1       0       0       0       0       0       0
  6650 ;;Total ram usage:        1 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    6
  6653 ;; This function calls:
  6654 ;;		_push_i2c_reply_status
  6655 ;;		_read_ldr
  6656 ;;		___ftdiv
  6657 ;;		___fttol
  6658 ;;		___lbtoft
  6659 ;; This function is called by:
  6660 ;;		_main
  6661 ;; This function uses a non-reentrant model
  6662 ;;
  6663                           
  6664                           
  6665                           ;psect for function _adc_read_service
  6666  0ABA                     _adc_read_service:	
  6667                           
  6668                           ;peripherals.c: 408: switch (adc_flag) {
  6669                           
  6670                           ;incstack = 0
  6671                           ; Regs used in _adc_read_service: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  6672  0ABA  2B05               	goto	l5012
  6673  0ABB                     l4996:	
  6674                           ;peripherals.c: 409: case 1:
  6675                           
  6676                           
  6677                           ;peripherals.c: 410: read_ldr();
  6678  0ABB  3196  2675         	fcall	_read_ldr
  6679                           
  6680                           ;peripherals.c: 411: adc_flag++;
  6681  0ABD  3001               	movlw	1
  6682  0ABE  0021               	movlb	1	; select bank1
  6683  0ABF  07A0               	addwf	_adc_flag^(0+128),f
  6684  0AC0  3000               	movlw	0
  6685  0AC1  3DA1               	addwfc	(_adc_flag+1)^(0+128),f
  6686                           
  6687                           ;peripherals.c: 412: break;
  6688  0AC2  0008               	return
  6689  0AC3                     l1005:	
  6690                           ;peripherals.c: 413: case 2:
  6691                           
  6692                           
  6693                           ;peripherals.c: 415: if (GO_nDONE == 0) {
  6694  0AC3  189D               	btfsc	29,1	;volatile
  6695  0AC4  0008               	return
  6696                           
  6697                           ;peripherals.c: 416: adc_flag++;
  6698  0AC5  3001               	movlw	1
  6699  0AC6  07A0               	addwf	_adc_flag^(0+128),f
  6700  0AC7  3000               	movlw	0
  6701  0AC8  3DA1               	addwfc	(_adc_flag+1)^(0+128),f
  6702                           
  6703                           ;peripherals.c: 417: }
  6704                           ;peripherals.c: 418: break;
  6705  0AC9  0008               	return
  6706  0ACA                     l5002:	
  6707                           ;peripherals.c: 419: case 3:
  6708                           
  6709                           
  6710                           ;peripherals.c: 420: ldr_value = (int)(ADRESH / 1.6);
  6711  0ACA  081C               	movf	28,w	;volatile
  6712  0ACB  3196  268E  318A   	fcall	___lbtoft
  6713  0ACE  0020               	movlb	0	; select bank0
  6714  0ACF  0835               	movf	?___lbtoft,w
  6715  0AD0  00C0               	movwf	?___ftdiv+3
  6716  0AD1  0836               	movf	?___lbtoft+1,w
  6717  0AD2  00C1               	movwf	?___ftdiv+4
  6718  0AD3  0837               	movf	?___lbtoft+2,w
  6719  0AD4  00C2               	movwf	?___ftdiv+5
  6720  0AD5  30CD               	movlw	205
  6721  0AD6  00BD               	movwf	?___ftdiv
  6722  0AD7  30CC               	movlw	204
  6723  0AD8  00BE               	movwf	?___ftdiv+1
  6724  0AD9  303F               	movlw	63
  6725  0ADA  00BF               	movwf	?___ftdiv+2
  6726  0ADB  3187  2711  318A   	fcall	___ftdiv
  6727  0ADE  0020               	movlb	0	; select bank0
  6728  0ADF  083D               	movf	?___ftdiv,w
  6729  0AE0  00CD               	movwf	?___fttol
  6730  0AE1  083E               	movf	?___ftdiv+1,w
  6731  0AE2  00CE               	movwf	?___fttol+1
  6732  0AE3  083F               	movf	?___ftdiv+2,w
  6733  0AE4  00CF               	movwf	?___fttol+2
  6734  0AE5  318E  26B8  318A   	fcall	___fttol
  6735  0AE8  0020               	movlb	0	; select bank0
  6736  0AE9  084E               	movf	?___fttol+1,w
  6737  0AEA  0021               	movlb	1	; select bank1
  6738  0AEB  01B3               	clrf	(_ldr_value+1)^(0+128)
  6739  0AEC  07B3               	addwf	(_ldr_value+1)^(0+128),f
  6740  0AED  0020               	movlb	0	; select bank0
  6741  0AEE  084D               	movf	?___fttol,w
  6742  0AEF  0021               	movlb	1	; select bank1
  6743  0AF0  01B2               	clrf	_ldr_value^(0+128)
  6744  0AF1  07B2               	addwf	_ldr_value^(0+128),f
  6745                           
  6746                           ;peripherals.c: 421: push_i2c_reply_status(0x60, ldr_value);
  6747  0AF2  0832               	movf	_ldr_value^(0+128),w
  6748  0AF3  0020               	movlb	0	; select bank0
  6749  0AF4  00D5               	movwf	??_adc_read_service
  6750  0AF5  0855               	movf	??_adc_read_service,w
  6751  0AF6  00B3               	movwf	?_push_i2c_reply_status
  6752  0AF7  3060               	movlw	96
  6753  0AF8  318C  24F6         	fcall	_push_i2c_reply_status
  6754                           
  6755                           ;peripherals.c: 422: adc_flag++;
  6756  0AFA  3001               	movlw	1
  6757  0AFB  0021               	movlb	1	; select bank1
  6758  0AFC  07A0               	addwf	_adc_flag^(0+128),f
  6759  0AFD  3000               	movlw	0
  6760  0AFE  3DA1               	addwfc	(_adc_flag+1)^(0+128),f
  6761                           
  6762                           ;peripherals.c: 423: break;
  6763  0AFF  0008               	return
  6764  0B00                     l5008:	
  6765                           ;peripherals.c: 425: default:
  6766                           
  6767                           
  6768                           ;peripherals.c: 426: adc_flag = 1;
  6769  0B00  3001               	movlw	1
  6770  0B01  00A0               	movwf	_adc_flag^(0+128)
  6771  0B02  3000               	movlw	0
  6772  0B03  00A1               	movwf	(_adc_flag^(0+128)+1)
  6773                           
  6774                           ;peripherals.c: 428: }
  6775                           
  6776                           ;peripherals.c: 427: break;
  6777  0B04  0008               	return
  6778  0B05                     l5012:	
  6779                           
  6780                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6781                           ; Switch size 1, requested type "space"
  6782                           ; Number of cases is 1, Range of values is 0 to 0
  6783                           ; switch strategies available:
  6784                           ; Name         Instructions Cycles
  6785                           ; simple_byte            4     3 (average)
  6786                           ; direct_byte            8     6 (fixed)
  6787                           ; jumptable            260     6 (fixed)
  6788                           ;	Chosen strategy is simple_byte
  6789  0B05  0021               	movlb	1	; select bank1
  6790  0B06  0821               	movf	(_adc_flag+1)^(0+128),w
  6791  0B07  3A00               	xorlw	0	; case 0
  6792  0B08  1903               	skipnz
  6793  0B09  2B0B               	goto	l6002
  6794  0B0A  2B00               	goto	l5008
  6795  0B0B                     l6002:	
  6796                           
  6797                           ; Switch size 1, requested type "space"
  6798                           ; Number of cases is 3, Range of values is 1 to 3
  6799                           ; switch strategies available:
  6800                           ; Name         Instructions Cycles
  6801                           ; simple_byte           10     6 (average)
  6802                           ; direct_byte           15     9 (fixed)
  6803                           ; jumptable            263     9 (fixed)
  6804                           ;	Chosen strategy is simple_byte
  6805  0B0B  0820               	movf	_adc_flag^(0+128),w
  6806  0B0C  3A01               	xorlw	1	; case 1
  6807  0B0D  1903               	skipnz
  6808  0B0E  2ABB               	goto	l4996
  6809  0B0F  3A03               	xorlw	3	; case 2
  6810  0B10  1903               	skipnz
  6811  0B11  2AC3               	goto	l1005
  6812  0B12  3A01               	xorlw	1	; case 3
  6813  0B13  1903               	skipnz
  6814  0B14  2ACA               	goto	l5002
  6815  0B15  2B00               	goto	l5008
  6816  0B16  0008               	return
  6817  0B17                     __end_of_adc_read_service:	
  6818                           
  6819                           	psect	text29
  6820  168E                     __ptext29:	
  6821 ;; *************** function ___lbtoft *****************
  6822 ;; Defined at:
  6823 ;;		line 28 in file "/opt/microchip/xc8/v1.21/sources/pic/lbtoft.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  c               1    wreg     unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  c               1   28[BANK0 ] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  3   21[BANK0 ] float 
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0, pclath, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6837 ;;      Params:         0       3       0       0       0       0       0       0
  6838 ;;      Locals:         0       1       0       0       0       0       0       0
  6839 ;;      Temps:          0       4       0       0       0       0       0       0
  6840 ;;      Totals:         0       8       0       0       0       0       0       0
  6841 ;;Total ram usage:        8 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    5
  6844 ;; This function calls:
  6845 ;;		___ftpack
  6846 ;; This function is called by:
  6847 ;;		_adc_read_service
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           
  6852                           ;psect for function ___lbtoft
  6853  168E                     ___lbtoft:	
  6854                           
  6855                           ;incstack = 0
  6856                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  6857                           ;___lbtoft@c stored from wreg
  6858  168E  0020               	movlb	0	; select bank0
  6859  168F  00BC               	movwf	___lbtoft@c
  6860  1690  083C               	movf	___lbtoft@c,w
  6861  1691  00B8               	movwf	??___lbtoft
  6862  1692  01B9               	clrf	??___lbtoft+1
  6863  1693  01BA               	clrf	??___lbtoft+2
  6864  1694  0838               	movf	??___lbtoft,w
  6865  1695  00AD               	movwf	?___ftpack
  6866  1696  0839               	movf	??___lbtoft+1,w
  6867  1697  00AE               	movwf	?___ftpack+1
  6868  1698  083A               	movf	??___lbtoft+2,w
  6869  1699  00AF               	movwf	?___ftpack+2
  6870  169A  308E               	movlw	142
  6871  169B  00BB               	movwf	??___lbtoft+3
  6872  169C  083B               	movf	??___lbtoft+3,w
  6873  169D  00B0               	movwf	?___ftpack+3
  6874  169E  01B1               	clrf	?___ftpack+4
  6875  169F  318B  2317         	fcall	___ftpack
  6876  16A1  0020               	movlb	0	; select bank0
  6877  16A2  082D               	movf	?___ftpack,w
  6878  16A3  00B5               	movwf	?___lbtoft
  6879  16A4  082E               	movf	?___ftpack+1,w
  6880  16A5  00B6               	movwf	?___lbtoft+1
  6881  16A6  082F               	movf	?___ftpack+2,w
  6882  16A7  00B7               	movwf	?___lbtoft+2
  6883  16A8  0008               	return
  6884  16A9                     __end_of___lbtoft:	
  6885                           
  6886                           	psect	text30
  6887  0EB8                     __ptext30:	
  6888 ;; *************** function ___fttol *****************
  6889 ;; Defined at:
  6890 ;;		line 45 in file "/opt/microchip/xc8/v1.21/sources/pic/fttol.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;  f1              3   45[BANK0 ] float 
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;  lval            4    1[BANK1 ] unsigned long 
  6895 ;;  exp1            1    5[BANK1 ] unsigned char 
  6896 ;;  sign1           1    0[BANK1 ] unsigned char 
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  4   45[BANK0 ] long 
  6899 ;; Registers used:
  6900 ;;		wreg, status,2, status,0
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6906 ;;      Params:         0       4       0       0       0       0       0       0
  6907 ;;      Locals:         0       0       6       0       0       0       0       0
  6908 ;;      Temps:          0       4       0       0       0       0       0       0
  6909 ;;      Totals:         0       8       6       0       0       0       0       0
  6910 ;;Total ram usage:       14 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    4
  6913 ;; This function calls:
  6914 ;;		Nothing
  6915 ;; This function is called by:
  6916 ;;		_adc_read_service
  6917 ;; This function uses a non-reentrant model
  6918 ;;
  6919                           
  6920                           
  6921                           ;psect for function ___fttol
  6922  0EB8                     ___fttol:	
  6923                           
  6924                           ;incstack = 0
  6925                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6926  0EB8  0020               	movlb	0	; select bank0
  6927  0EB9  084D               	movf	___fttol@f1,w
  6928  0EBA  00D1               	movwf	??___fttol
  6929  0EBB  084E               	movf	___fttol@f1+1,w
  6930  0EBC  00D2               	movwf	??___fttol+1
  6931  0EBD  084F               	movf	___fttol@f1+2,w
  6932  0EBE  00D3               	movwf	??___fttol+2
  6933  0EBF  1003               	clrc
  6934  0EC0  0D52               	rlf	??___fttol+1,w
  6935  0EC1  0D53               	rlf	??___fttol+2,w
  6936  0EC2  00D4               	movwf	??___fttol+3
  6937  0EC3  0854               	movf	??___fttol+3,w
  6938  0EC4  0021               	movlb	1	; select bank1
  6939  0EC5  00E9               	movwf	___fttol@exp1^(0+128)
  6940  0EC6  08E9               	movf	___fttol@exp1^(0+128),f
  6941  0EC7  1D03               	skipz
  6942  0EC8  2ED3               	goto	l5918
  6943  0EC9  3000               	movlw	0
  6944  0ECA  0020               	movlb	0	; select bank0
  6945  0ECB  00D0               	movwf	?___fttol+3
  6946  0ECC  3000               	movlw	0
  6947  0ECD  00CF               	movwf	?___fttol+2
  6948  0ECE  3000               	movlw	0
  6949  0ECF  00CE               	movwf	?___fttol+1
  6950  0ED0  3000               	movlw	0
  6951  0ED1  00CD               	movwf	?___fttol
  6952  0ED2  0008               	return
  6953  0ED3                     l5918:	
  6954  0ED3  0020               	movlb	0	; select bank0
  6955  0ED4  084D               	movf	___fttol@f1,w
  6956  0ED5  00D1               	movwf	??___fttol
  6957  0ED6  084E               	movf	___fttol@f1+1,w
  6958  0ED7  00D2               	movwf	??___fttol+1
  6959  0ED8  084F               	movf	___fttol@f1+2,w
  6960  0ED9  00D3               	movwf	??___fttol+2
  6961  0EDA  3017               	movlw	23
  6962  0EDB                     u6225:	
  6963  0EDB  36D3               	lsrf	??___fttol+2,f
  6964  0EDC  0CD2               	rrf	??___fttol+1,f
  6965  0EDD  0CD1               	rrf	??___fttol,f
  6966  0EDE  0B89               	decfsz	9,f
  6967  0EDF  2EDB               	goto	u6225
  6968  0EE0  0851               	movf	??___fttol,w
  6969  0EE1  00D4               	movwf	??___fttol+3
  6970  0EE2  0854               	movf	??___fttol+3,w
  6971  0EE3  0021               	movlb	1	; select bank1
  6972  0EE4  00E4               	movwf	___fttol@sign1^(0+128)
  6973  0EE5  0020               	movlb	0	; select bank0
  6974  0EE6  17CE               	bsf	___fttol@f1+1,7
  6975  0EE7  30FF               	movlw	255
  6976  0EE8  05CD               	andwf	___fttol@f1,f
  6977  0EE9  30FF               	movlw	255
  6978  0EEA  05CE               	andwf	___fttol@f1+1,f
  6979  0EEB  3000               	movlw	0
  6980  0EEC  05CF               	andwf	___fttol@f1+2,f
  6981  0EED  084D               	movf	___fttol@f1,w
  6982  0EEE  0021               	movlb	1	; select bank1
  6983  0EEF  00E5               	movwf	___fttol@lval^(0+128)
  6984  0EF0  0020               	movlb	0	; select bank0
  6985  0EF1  084E               	movf	___fttol@f1+1,w
  6986  0EF2  0021               	movlb	1	; select bank1
  6987  0EF3  00E6               	movwf	(___fttol@lval^(0+128)+1)
  6988  0EF4  0020               	movlb	0	; select bank0
  6989  0EF5  084F               	movf	___fttol@f1+2,w
  6990  0EF6  0021               	movlb	1	; select bank1
  6991  0EF7  00E7               	movwf	(___fttol@lval^(0+128)+2)
  6992  0EF8  01E8               	clrf	(___fttol@lval^(0+128)+3)
  6993  0EF9  308E               	movlw	142
  6994  0EFA  02E9               	subwf	___fttol@exp1^(0+128),f
  6995  0EFB  1FE9               	btfss	___fttol@exp1^(0+128),7
  6996  0EFC  2F1D               	goto	l5938
  6997  0EFD  0869               	movf	___fttol@exp1^(0+128),w
  6998  0EFE  3A80               	xorlw	128
  6999  0EFF  3E8F               	addlw	143
  7000  0F00  1803               	skipnc
  7001  0F01  2F0C               	goto	l5936
  7002  0F02  3000               	movlw	0
  7003  0F03  0020               	movlb	0	; select bank0
  7004  0F04  00D0               	movwf	?___fttol+3
  7005  0F05  3000               	movlw	0
  7006  0F06  00CF               	movwf	?___fttol+2
  7007  0F07  3000               	movlw	0
  7008  0F08  00CE               	movwf	?___fttol+1
  7009  0F09  3000               	movlw	0
  7010  0F0A  00CD               	movwf	?___fttol
  7011  0F0B  0008               	return
  7012  0F0C                     l5936:	
  7013  0F0C  3001               	movlw	1
  7014  0F0D                     u6255:	
  7015  0F0D  0021               	movlb	1	; select bank1
  7016  0F0E  36E8               	lsrf	(___fttol@lval+3)^(0+128),f
  7017  0F0F  0CE7               	rrf	(___fttol@lval+2)^(0+128),f
  7018  0F10  0CE6               	rrf	(___fttol@lval+1)^(0+128),f
  7019  0F11  0CE5               	rrf	___fttol@lval^(0+128),f
  7020  0F12  0B89               	decfsz	9,f
  7021  0F13  2F0D               	goto	u6255
  7022  0F14  3001               	movlw	1
  7023  0F15  0020               	movlb	0	; select bank0
  7024  0F16  00D1               	movwf	??___fttol
  7025  0F17  0851               	movf	??___fttol,w
  7026  0F18  0021               	movlb	1	; select bank1
  7027  0F19  07E9               	addwf	___fttol@exp1^(0+128),f
  7028  0F1A  1903               	btfsc	3,2
  7029  0F1B  2F39               	goto	l5948
  7030  0F1C  2F0C               	goto	l5936
  7031  0F1D                     l5938:	
  7032  0F1D  3018               	movlw	24
  7033  0F1E  0269               	subwf	___fttol@exp1^(0+128),w
  7034  0F1F  1C03               	skipc
  7035  0F20  2F35               	goto	l5946
  7036  0F21  3000               	movlw	0
  7037  0F22  0020               	movlb	0	; select bank0
  7038  0F23  00D0               	movwf	?___fttol+3
  7039  0F24  3000               	movlw	0
  7040  0F25  00CF               	movwf	?___fttol+2
  7041  0F26  3000               	movlw	0
  7042  0F27  00CE               	movwf	?___fttol+1
  7043  0F28  3000               	movlw	0
  7044  0F29  00CD               	movwf	?___fttol
  7045  0F2A  0008               	return
  7046  0F2B                     l5944:	
  7047  0F2B  3001               	movlw	1
  7048  0F2C                     u6285:	
  7049  0F2C  0021               	movlb	1	; select bank1
  7050  0F2D  35E5               	lslf	___fttol@lval^(0+128),f
  7051  0F2E  0DE6               	rlf	(___fttol@lval+1)^(0+128),f
  7052  0F2F  0DE7               	rlf	(___fttol@lval+2)^(0+128),f
  7053  0F30  0DE8               	rlf	(___fttol@lval+3)^(0+128),f
  7054  0F31  0B89               	decfsz	9,f
  7055  0F32  2F2C               	goto	u6285
  7056  0F33  3001               	movlw	1
  7057  0F34  02E9               	subwf	___fttol@exp1^(0+128),f
  7058  0F35                     l5946:	
  7059  0F35  0021               	movlb	1	; select bank1
  7060  0F36  08E9               	movf	___fttol@exp1^(0+128),f
  7061  0F37  1D03               	skipz
  7062  0F38  2F2B               	goto	l5944
  7063  0F39                     l5948:	
  7064  0F39  0864               	movf	___fttol@sign1^(0+128),w
  7065  0F3A  1903               	btfsc	3,2
  7066  0F3B  2F47               	goto	l5952
  7067  0F3C  09E5               	comf	___fttol@lval^(0+128),f
  7068  0F3D  09E6               	comf	(___fttol@lval+1)^(0+128),f
  7069  0F3E  09E7               	comf	(___fttol@lval+2)^(0+128),f
  7070  0F3F  09E8               	comf	(___fttol@lval+3)^(0+128),f
  7071  0F40  0AE5               	incf	___fttol@lval^(0+128),f
  7072  0F41  1903               	skipnz
  7073  0F42  0AE6               	incf	(___fttol@lval+1)^(0+128),f
  7074  0F43  1903               	skipnz
  7075  0F44  0AE7               	incf	(___fttol@lval+2)^(0+128),f
  7076  0F45  1903               	skipnz
  7077  0F46  0AE8               	incf	(___fttol@lval+3)^(0+128),f
  7078  0F47                     l5952:	
  7079  0F47  0868               	movf	(___fttol@lval+3)^(0+128),w
  7080  0F48  0020               	movlb	0	; select bank0
  7081  0F49  00D0               	movwf	?___fttol+3
  7082  0F4A  0021               	movlb	1	; select bank1
  7083  0F4B  0867               	movf	(___fttol@lval+2)^(0+128),w
  7084  0F4C  0020               	movlb	0	; select bank0
  7085  0F4D  00CF               	movwf	?___fttol+2
  7086  0F4E  0021               	movlb	1	; select bank1
  7087  0F4F  0866               	movf	(___fttol@lval+1)^(0+128),w
  7088  0F50  0020               	movlb	0	; select bank0
  7089  0F51  00CE               	movwf	?___fttol+1
  7090  0F52  0021               	movlb	1	; select bank1
  7091  0F53  0865               	movf	___fttol@lval^(0+128),w
  7092  0F54  0020               	movlb	0	; select bank0
  7093  0F55  00CD               	movwf	?___fttol
  7094  0F56  0008               	return
  7095  0F57                     __end_of___fttol:	
  7096                           
  7097                           	psect	text31
  7098  0711                     __ptext31:	
  7099 ;; *************** function ___ftdiv *****************
  7100 ;; Defined at:
  7101 ;;		line 50 in file "/opt/microchip/xc8/v1.21/sources/pic/ftdiv.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  f2              3   29[BANK0 ] float 
  7104 ;;  f1              3   32[BANK0 ] float 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  f3              3   40[BANK0 ] float 
  7107 ;;  sign            1   44[BANK0 ] unsigned char 
  7108 ;;  exp             1   43[BANK0 ] unsigned char 
  7109 ;;  cntr            1   39[BANK0 ] unsigned char 
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  3   29[BANK0 ] float 
  7112 ;; Registers used:
  7113 ;;		wreg, status,2, status,0, pclath, cstack
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7119 ;;      Params:         0       6       0       0       0       0       0       0
  7120 ;;      Locals:         0       6       0       0       0       0       0       0
  7121 ;;      Temps:          0       4       0       0       0       0       0       0
  7122 ;;      Totals:         0      16       0       0       0       0       0       0
  7123 ;;Total ram usage:       16 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; Hardware stack levels required when called:    5
  7126 ;; This function calls:
  7127 ;;		___ftpack
  7128 ;; This function is called by:
  7129 ;;		_adc_read_service
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           
  7134                           ;psect for function ___ftdiv
  7135  0711                     ___ftdiv:	
  7136                           
  7137                           ;incstack = 0
  7138                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7139  0711  0020               	movlb	0	; select bank0
  7140  0712  0840               	movf	___ftdiv@f1,w
  7141  0713  00C3               	movwf	??___ftdiv
  7142  0714  0841               	movf	___ftdiv@f1+1,w
  7143  0715  00C4               	movwf	??___ftdiv+1
  7144  0716  0842               	movf	___ftdiv@f1+2,w
  7145  0717  00C5               	movwf	??___ftdiv+2
  7146  0718  1003               	clrc
  7147  0719  0D44               	rlf	??___ftdiv+1,w
  7148  071A  0D45               	rlf	??___ftdiv+2,w
  7149  071B  00C6               	movwf	??___ftdiv+3
  7150  071C  0846               	movf	??___ftdiv+3,w
  7151  071D  00CB               	movwf	___ftdiv@exp
  7152  071E  08CB               	movf	___ftdiv@exp,f
  7153  071F  1D03               	skipz
  7154  0720  2F28               	goto	l5876
  7155  0721  3000               	movlw	0
  7156  0722  00BD               	movwf	?___ftdiv
  7157  0723  3000               	movlw	0
  7158  0724  00BE               	movwf	?___ftdiv+1
  7159  0725  3000               	movlw	0
  7160  0726  00BF               	movwf	?___ftdiv+2
  7161  0727  0008               	return
  7162  0728                     l5876:	
  7163  0728  083D               	movf	___ftdiv@f2,w
  7164  0729  00C3               	movwf	??___ftdiv
  7165  072A  083E               	movf	___ftdiv@f2+1,w
  7166  072B  00C4               	movwf	??___ftdiv+1
  7167  072C  083F               	movf	___ftdiv@f2+2,w
  7168  072D  00C5               	movwf	??___ftdiv+2
  7169  072E  1003               	clrc
  7170  072F  0D44               	rlf	??___ftdiv+1,w
  7171  0730  0D45               	rlf	??___ftdiv+2,w
  7172  0731  00C6               	movwf	??___ftdiv+3
  7173  0732  0846               	movf	??___ftdiv+3,w
  7174  0733  00CC               	movwf	___ftdiv@sign
  7175  0734  08CC               	movf	___ftdiv@sign,f
  7176  0735  1D03               	skipz
  7177  0736  2F3E               	goto	l5882
  7178  0737  3000               	movlw	0
  7179  0738  00BD               	movwf	?___ftdiv
  7180  0739  3000               	movlw	0
  7181  073A  00BE               	movwf	?___ftdiv+1
  7182  073B  3000               	movlw	0
  7183  073C  00BF               	movwf	?___ftdiv+2
  7184  073D  0008               	return
  7185  073E                     l5882:	
  7186  073E  3000               	movlw	0
  7187  073F  00C8               	movwf	___ftdiv@f3
  7188  0740  3000               	movlw	0
  7189  0741  00C9               	movwf	___ftdiv@f3+1
  7190  0742  3000               	movlw	0
  7191  0743  00CA               	movwf	___ftdiv@f3+2
  7192  0744  3089               	movlw	137
  7193  0745  074C               	addwf	___ftdiv@sign,w
  7194  0746  00C3               	movwf	??___ftdiv
  7195  0747  0843               	movf	??___ftdiv,w
  7196  0748  02CB               	subwf	___ftdiv@exp,f
  7197  0749  0840               	movf	___ftdiv@f1,w
  7198  074A  00C3               	movwf	??___ftdiv
  7199  074B  0841               	movf	___ftdiv@f1+1,w
  7200  074C  00C4               	movwf	??___ftdiv+1
  7201  074D  0842               	movf	___ftdiv@f1+2,w
  7202  074E  00C5               	movwf	??___ftdiv+2
  7203  074F  3010               	movlw	16
  7204  0750                     u6155:	
  7205  0750  36C5               	lsrf	??___ftdiv+2,f
  7206  0751  0CC4               	rrf	??___ftdiv+1,f
  7207  0752  0CC3               	rrf	??___ftdiv,f
  7208  0753  0B89               	decfsz	9,f
  7209  0754  2F50               	goto	u6155
  7210  0755  0843               	movf	??___ftdiv,w
  7211  0756  00C6               	movwf	??___ftdiv+3
  7212  0757  0846               	movf	??___ftdiv+3,w
  7213  0758  00CC               	movwf	___ftdiv@sign
  7214  0759  083D               	movf	___ftdiv@f2,w
  7215  075A  00C3               	movwf	??___ftdiv
  7216  075B  083E               	movf	___ftdiv@f2+1,w
  7217  075C  00C4               	movwf	??___ftdiv+1
  7218  075D  083F               	movf	___ftdiv@f2+2,w
  7219  075E  00C5               	movwf	??___ftdiv+2
  7220  075F  3010               	movlw	16
  7221  0760                     u6165:	
  7222  0760  36C5               	lsrf	??___ftdiv+2,f
  7223  0761  0CC4               	rrf	??___ftdiv+1,f
  7224  0762  0CC3               	rrf	??___ftdiv,f
  7225  0763  0B89               	decfsz	9,f
  7226  0764  2F60               	goto	u6165
  7227  0765  0843               	movf	??___ftdiv,w
  7228  0766  00C6               	movwf	??___ftdiv+3
  7229  0767  0846               	movf	??___ftdiv+3,w
  7230  0768  06CC               	xorwf	___ftdiv@sign,f
  7231  0769  3080               	movlw	128
  7232  076A  00C3               	movwf	??___ftdiv
  7233  076B  0843               	movf	??___ftdiv,w
  7234  076C  05CC               	andwf	___ftdiv@sign,f
  7235  076D  17C1               	bsf	___ftdiv@f1+1,7
  7236  076E  30FF               	movlw	255
  7237  076F  05C0               	andwf	___ftdiv@f1,f
  7238  0770  30FF               	movlw	255
  7239  0771  05C1               	andwf	___ftdiv@f1+1,f
  7240  0772  3000               	movlw	0
  7241  0773  05C2               	andwf	___ftdiv@f1+2,f
  7242  0774  17BE               	bsf	___ftdiv@f2+1,7
  7243  0775  30FF               	movlw	255
  7244  0776  05BD               	andwf	___ftdiv@f2,f
  7245  0777  30FF               	movlw	255
  7246  0778  05BE               	andwf	___ftdiv@f2+1,f
  7247  0779  3000               	movlw	0
  7248  077A  05BF               	andwf	___ftdiv@f2+2,f
  7249  077B  3018               	movlw	24
  7250  077C  00C3               	movwf	??___ftdiv
  7251  077D  0843               	movf	??___ftdiv,w
  7252  077E  00C7               	movwf	___ftdiv@cntr
  7253  077F                     l5896:	
  7254  077F  3001               	movlw	1
  7255  0780                     u6175:	
  7256  0780  35C8               	lslf	___ftdiv@f3,f
  7257  0781  0DC9               	rlf	___ftdiv@f3+1,f
  7258  0782  0DCA               	rlf	___ftdiv@f3+2,f
  7259  0783  0B89               	decfsz	9,f
  7260  0784  2F80               	goto	u6175
  7261  0785  083F               	movf	___ftdiv@f2+2,w
  7262  0786  0242               	subwf	___ftdiv@f1+2,w
  7263  0787  1D03               	skipz
  7264  0788  2F8F               	goto	u6185
  7265  0789  083E               	movf	___ftdiv@f2+1,w
  7266  078A  0241               	subwf	___ftdiv@f1+1,w
  7267  078B  1D03               	skipz
  7268  078C  2F8F               	goto	u6185
  7269  078D  083D               	movf	___ftdiv@f2,w
  7270  078E  0240               	subwf	___ftdiv@f1,w
  7271  078F                     u6185:	
  7272  078F  1C03               	skipc
  7273  0790  2F98               	goto	l5904
  7274  0791  083D               	movf	___ftdiv@f2,w
  7275  0792  02C0               	subwf	___ftdiv@f1,f
  7276  0793  083E               	movf	___ftdiv@f2+1,w
  7277  0794  3BC1               	subwfb	___ftdiv@f1+1,f
  7278  0795  083F               	movf	___ftdiv@f2+2,w
  7279  0796  3BC2               	subwfb	___ftdiv@f1+2,f
  7280  0797  1448               	bsf	___ftdiv@f3,0
  7281  0798                     l5904:	
  7282  0798  3001               	movlw	1
  7283  0799                     u6195:	
  7284  0799  35C0               	lslf	___ftdiv@f1,f
  7285  079A  0DC1               	rlf	___ftdiv@f1+1,f
  7286  079B  0DC2               	rlf	___ftdiv@f1+2,f
  7287  079C  0B89               	decfsz	9,f
  7288  079D  2F99               	goto	u6195
  7289  079E  3001               	movlw	1
  7290  079F  02C7               	subwf	___ftdiv@cntr,f
  7291  07A0  1D03               	btfss	3,2
  7292  07A1  2F7F               	goto	l5896
  7293  07A2  0848               	movf	___ftdiv@f3,w
  7294  07A3  00AD               	movwf	?___ftpack
  7295  07A4  0849               	movf	___ftdiv@f3+1,w
  7296  07A5  00AE               	movwf	?___ftpack+1
  7297  07A6  084A               	movf	___ftdiv@f3+2,w
  7298  07A7  00AF               	movwf	?___ftpack+2
  7299  07A8  084B               	movf	___ftdiv@exp,w
  7300  07A9  00C3               	movwf	??___ftdiv
  7301  07AA  0843               	movf	??___ftdiv,w
  7302  07AB  00B0               	movwf	?___ftpack+3
  7303  07AC  084C               	movf	___ftdiv@sign,w
  7304  07AD  00C4               	movwf	??___ftdiv+1
  7305  07AE  0844               	movf	??___ftdiv+1,w
  7306  07AF  00B1               	movwf	?___ftpack+4
  7307  07B0  318B  2317         	fcall	___ftpack
  7308  07B2  0020               	movlb	0	; select bank0
  7309  07B3  082D               	movf	?___ftpack,w
  7310  07B4  00BD               	movwf	?___ftdiv
  7311  07B5  082E               	movf	?___ftpack+1,w
  7312  07B6  00BE               	movwf	?___ftdiv+1
  7313  07B7  082F               	movf	?___ftpack+2,w
  7314  07B8  00BF               	movwf	?___ftdiv+2
  7315  07B9  0008               	return
  7316  07BA                     __end_of___ftdiv:	
  7317                           
  7318                           	psect	text32
  7319  0B17                     __ptext32:	
  7320 ;; *************** function ___ftpack *****************
  7321 ;; Defined at:
  7322 ;;		line 63 in file "/opt/microchip/xc8/v1.21/sources/pic/float.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;  arg             3   13[BANK0 ] unsigned um
  7325 ;;  exp             1   16[BANK0 ] unsigned char 
  7326 ;;  sign            1   17[BANK0 ] unsigned char 
  7327 ;; Auto vars:     Size  Location     Type
  7328 ;;		None
  7329 ;; Return value:  Size  Location     Type
  7330 ;;                  3   13[BANK0 ] float 
  7331 ;; Registers used:
  7332 ;;		wreg, status,2, status,0
  7333 ;; Tracked objects:
  7334 ;;		On entry : 0/0
  7335 ;;		On exit  : 0/0
  7336 ;;		Unchanged: 0/0
  7337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7338 ;;      Params:         0       5       0       0       0       0       0       0
  7339 ;;      Locals:         0       0       0       0       0       0       0       0
  7340 ;;      Temps:          0       3       0       0       0       0       0       0
  7341 ;;      Totals:         0       8       0       0       0       0       0       0
  7342 ;;Total ram usage:        8 bytes
  7343 ;; Hardware stack levels used:    1
  7344 ;; Hardware stack levels required when called:    4
  7345 ;; This function calls:
  7346 ;;		Nothing
  7347 ;; This function is called by:
  7348 ;;		___ftdiv
  7349 ;;		___lbtoft
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           
  7354                           ;psect for function ___ftpack
  7355  0B17                     ___ftpack:	
  7356                           
  7357                           ;incstack = 0
  7358                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7359  0B17  0020               	movlb	0	; select bank0
  7360  0B18  0830               	movf	___ftpack@exp,w
  7361  0B19  1903               	btfsc	3,2
  7362  0B1A  2B20               	goto	l5844
  7363  0B1B  082F               	movf	___ftpack@arg+2,w
  7364  0B1C  042E               	iorwf	___ftpack@arg+1,w
  7365  0B1D  042D               	iorwf	___ftpack@arg,w
  7366  0B1E  1D03               	skipz
  7367  0B1F  2B31               	goto	l5850
  7368  0B20                     l5844:	
  7369  0B20  3000               	movlw	0
  7370  0B21  00AD               	movwf	?___ftpack
  7371  0B22  3000               	movlw	0
  7372  0B23  00AE               	movwf	?___ftpack+1
  7373  0B24  3000               	movlw	0
  7374  0B25  00AF               	movwf	?___ftpack+2
  7375  0B26  0008               	return
  7376  0B27                     l5848:	
  7377  0B27  3001               	movlw	1
  7378  0B28  00B2               	movwf	??___ftpack
  7379  0B29  0832               	movf	??___ftpack,w
  7380  0B2A  07B0               	addwf	___ftpack@exp,f
  7381  0B2B  3001               	movlw	1
  7382  0B2C                     u6045:	
  7383  0B2C  36AF               	lsrf	___ftpack@arg+2,f
  7384  0B2D  0CAE               	rrf	___ftpack@arg+1,f
  7385  0B2E  0CAD               	rrf	___ftpack@arg,f
  7386  0B2F  0B89               	decfsz	9,f
  7387  0B30  2B2C               	goto	u6045
  7388  0B31                     l5850:	
  7389  0B31  30FE               	movlw	254
  7390  0B32  052F               	andwf	___ftpack@arg+2,w
  7391  0B33  1903               	btfsc	3,2
  7392  0B34  2B4A               	goto	l1230
  7393  0B35  2B27               	goto	l5848
  7394  0B36                     l5852:	
  7395  0B36  3001               	movlw	1
  7396  0B37  00B2               	movwf	??___ftpack
  7397  0B38  0832               	movf	??___ftpack,w
  7398  0B39  07B0               	addwf	___ftpack@exp,f
  7399  0B3A  3001               	movlw	1
  7400  0B3B  07AD               	addwf	___ftpack@arg,f
  7401  0B3C  3000               	movlw	0
  7402  0B3D  1803               	skipnc
  7403  0B3E  3001               	movlw	1
  7404  0B3F  07AE               	addwf	___ftpack@arg+1,f
  7405  0B40  3000               	movlw	0
  7406  0B41  1803               	skipnc
  7407  0B42  3001               	movlw	1
  7408  0B43  07AF               	addwf	___ftpack@arg+2,f
  7409  0B44  3001               	movlw	1
  7410  0B45                     u6065:	
  7411  0B45  36AF               	lsrf	___ftpack@arg+2,f
  7412  0B46  0CAE               	rrf	___ftpack@arg+1,f
  7413  0B47  0CAD               	rrf	___ftpack@arg,f
  7414  0B48  0B89               	decfsz	9,f
  7415  0B49  2B45               	goto	u6065
  7416  0B4A                     l1230:	
  7417  0B4A  30FF               	movlw	255
  7418  0B4B  052F               	andwf	___ftpack@arg+2,w
  7419  0B4C  1903               	btfsc	3,2
  7420  0B4D  2B57               	goto	l5860
  7421  0B4E  2B36               	goto	l5852
  7422  0B4F                     l5858:	
  7423  0B4F  3001               	movlw	1
  7424  0B50  02B0               	subwf	___ftpack@exp,f
  7425  0B51  3001               	movlw	1
  7426  0B52                     u6085:	
  7427  0B52  35AD               	lslf	___ftpack@arg,f
  7428  0B53  0DAE               	rlf	___ftpack@arg+1,f
  7429  0B54  0DAF               	rlf	___ftpack@arg+2,f
  7430  0B55  0B89               	decfsz	9,f
  7431  0B56  2B52               	goto	u6085
  7432  0B57                     l5860:	
  7433  0B57  1FAE               	btfss	___ftpack@arg+1,7
  7434  0B58  2B4F               	goto	l5858
  7435  0B59  1830               	btfsc	___ftpack@exp,0
  7436  0B5A  2B61               	goto	l1236
  7437  0B5B  30FF               	movlw	255
  7438  0B5C  05AD               	andwf	___ftpack@arg,f
  7439  0B5D  307F               	movlw	127
  7440  0B5E  05AE               	andwf	___ftpack@arg+1,f
  7441  0B5F  30FF               	movlw	255
  7442  0B60  05AF               	andwf	___ftpack@arg+2,f
  7443  0B61                     l1236:	
  7444  0B61  1003               	clrc
  7445  0B62  0CB0               	rrf	___ftpack@exp,f
  7446  0B63  0830               	movf	___ftpack@exp,w
  7447  0B64  00B2               	movwf	??___ftpack
  7448  0B65  01B3               	clrf	??___ftpack+1
  7449  0B66  01B4               	clrf	??___ftpack+2
  7450  0B67  3010               	movlw	16
  7451  0B68                     u6115:	
  7452  0B68  35B2               	lslf	??___ftpack,f
  7453  0B69  0DB3               	rlf	??___ftpack+1,f
  7454  0B6A  0DB4               	rlf	??___ftpack+2,f
  7455  0B6B  0B89               	decfsz	9,f
  7456  0B6C  2B68               	goto	u6115
  7457  0B6D  0832               	movf	??___ftpack,w
  7458  0B6E  04AD               	iorwf	___ftpack@arg,f
  7459  0B6F  0833               	movf	??___ftpack+1,w
  7460  0B70  04AE               	iorwf	___ftpack@arg+1,f
  7461  0B71  0834               	movf	??___ftpack+2,w
  7462  0B72  04AF               	iorwf	___ftpack@arg+2,f
  7463  0B73  0831               	movf	___ftpack@sign,w
  7464  0B74  1903               	btfsc	3,2
  7465  0B75  0008               	return
  7466  0B76  17AF               	bsf	___ftpack@arg+2,7
  7467  0B77  0008               	return
  7468  0B78                     __end_of___ftpack:	
  7469                           
  7470                           	psect	text33
  7471  1675                     __ptext33:	
  7472 ;; *************** function _read_ldr *****************
  7473 ;; Defined at:
  7474 ;;		line 399 in file "peripherals.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;		None
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;		None
  7479 ;; Return value:  Size  Location     Type
  7480 ;;		None               void
  7481 ;; Registers used:
  7482 ;;		wreg, status,2, status,0
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7488 ;;      Params:         0       0       0       0       0       0       0       0
  7489 ;;      Locals:         0       0       0       0       0       0       0       0
  7490 ;;      Temps:          0       2       0       0       0       0       0       0
  7491 ;;      Totals:         0       2       0       0       0       0       0       0
  7492 ;;Total ram usage:        2 bytes
  7493 ;; Hardware stack levels used:    1
  7494 ;; Hardware stack levels required when called:    4
  7495 ;; This function calls:
  7496 ;;		Nothing
  7497 ;; This function is called by:
  7498 ;;		_adc_read_service
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           
  7503                           ;psect for function _read_ldr
  7504  1675                     _read_ldr:	
  7505                           
  7506                           ;peripherals.c: 401: ADCON0 &= 0x83;
  7507                           
  7508                           ;incstack = 0
  7509                           ; Regs used in _read_ldr: [wreg+status,2+status,0]
  7510  1675  3083               	movlw	131
  7511  1676  0020               	movlb	0	; select bank0
  7512  1677  00AD               	movwf	??_read_ldr
  7513  1678  082D               	movf	??_read_ldr,w
  7514  1679  0021               	movlb	1	; select bank1
  7515  167A  059D               	andwf	29,f	;volatile
  7516                           
  7517                           ;peripherals.c: 402: ADCON0 |= 11 << 2;
  7518  167B  302C               	movlw	44
  7519  167C  0020               	movlb	0	; select bank0
  7520  167D  00AD               	movwf	??_read_ldr
  7521  167E  082D               	movf	??_read_ldr,w
  7522  167F  0021               	movlb	1	; select bank1
  7523  1680  049D               	iorwf	29,f	;volatile
  7524                           
  7525                           ;peripherals.c: 403: _delay((unsigned long)((2)*(4000000/4000.0)));
  7526  1681  3003               	movlw	3
  7527  1682  0020               	movlb	0	; select bank0
  7528  1683  00AE               	movwf	??_read_ldr+1
  7529  1684  3097               	movlw	151
  7530  1685  00AD               	movwf	??_read_ldr
  7531  1686                     u6377:	
  7532  1686  0BAD               	decfsz	??_read_ldr,f
  7533  1687  2E86               	goto	u6377
  7534  1688  0BAE               	decfsz	??_read_ldr+1,f
  7535  1689  2E86               	goto	u6377
  7536  168A  2E8B               	nop2
  7537                           
  7538                           ;peripherals.c: 404: GO_nDONE = 1;
  7539  168B  0021               	movlb	1	; select bank1
  7540  168C  149D               	bsf	29,1	;volatile
  7541  168D  0008               	return
  7542  168E                     __end_of_read_ldr:	
  7543                           
  7544                           	psect	text34
  7545  0A60                     __ptext34:	
  7546 ;; *************** function _motion_detect *****************
  7547 ;; Defined at:
  7548 ;;		line 244 in file "peripherals.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;		None
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;		None
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  2   46[COMMON] int 
  7555 ;; Registers used:
  7556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7562 ;;      Params:         0       0       0       0       0       0       0       0
  7563 ;;      Locals:         0       0       0       0       0       0       0       0
  7564 ;;      Temps:          0       1       0       0       0       0       0       0
  7565 ;;      Totals:         0       1       0       0       0       0       0       0
  7566 ;;Total ram usage:        1 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    6
  7569 ;; This function calls:
  7570 ;;		_push_i2c_reply_status
  7571 ;; This function is called by:
  7572 ;;		_main
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           
  7577                           ;psect for function _motion_detect
  7578  0A60                     _motion_detect:	
  7579                           
  7580                           ;peripherals.c: 245: if (motion_en == 1) {
  7581                           
  7582                           ;incstack = 0
  7583                           ; Regs used in _motion_detect: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  7584  0A60  3001               	movlw	1
  7585  0A61  0020               	movlb	0	; select bank0
  7586  0A62  0658               	xorwf	_motion_en,w
  7587  0A63  0459               	iorwf	_motion_en+1,w
  7588  0A64  1D03               	skipz
  7589  0A65  2A8D               	goto	l4980
  7590                           
  7591                           ;peripherals.c: 246: if (PORTDbits.RD0 == 0) {
  7592  0A66  180F               	btfsc	15,0	;volatile
  7593  0A67  2A89               	goto	l4978
  7594                           
  7595                           ;peripherals.c: 247: if (motion_counter < motion_sensitivity) {
  7596  0A68  0021               	movlb	1	; select bank1
  7597  0A69  0835               	movf	(_motion_counter+1)^(0+128),w
  7598  0A6A  3A80               	xorlw	128
  7599  0A6B  0020               	movlb	0	; select bank0
  7600  0A6C  00BA               	movwf	??_motion_detect
  7601  0A6D  0021               	movlb	1	; select bank1
  7602  0A6E  085F               	movf	(_motion_sensitivity+1)^(0+128),w
  7603  0A6F  3A80               	xorlw	128
  7604  0A70  0020               	movlb	0	; select bank0
  7605  0A71  023A               	subwf	??_motion_detect,w
  7606  0A72  1D03               	skipz
  7607  0A73  2A77               	goto	u4965
  7608  0A74  0021               	movlb	1	; select bank1
  7609  0A75  085E               	movf	_motion_sensitivity^(0+128),w
  7610  0A76  0234               	subwf	_motion_counter^(0+128),w
  7611  0A77                     u4965:	
  7612  0A77  1803               	skipnc
  7613  0A78  2A7F               	goto	l4974
  7614                           
  7615                           ;peripherals.c: 248: motion_counter++;
  7616  0A79  3001               	movlw	1
  7617  0A7A  0021               	movlb	1	; select bank1
  7618  0A7B  07B4               	addwf	_motion_counter^(0+128),f
  7619  0A7C  3000               	movlw	0
  7620  0A7D  3DB5               	addwfc	(_motion_counter+1)^(0+128),f
  7621                           
  7622                           ;peripherals.c: 249: } else {
  7623  0A7E  0008               	return
  7624  0A7F                     l4974:	
  7625                           
  7626                           ;peripherals.c: 250: push_i2c_reply_status(0xE3, 0x01);
  7627  0A7F  0020               	movlb	0	; select bank0
  7628  0A80  01B3               	clrf	?_push_i2c_reply_status
  7629  0A81  0AB3               	incf	?_push_i2c_reply_status,f
  7630  0A82  30E3               	movlw	227
  7631  0A83  318C  24F6         	fcall	_push_i2c_reply_status
  7632                           
  7633                           ;peripherals.c: 251: motion_counter = 0;
  7634  0A85  0021               	movlb	1	; select bank1
  7635  0A86  01B4               	clrf	_motion_counter^(0+128)
  7636  0A87  01B5               	clrf	(_motion_counter+1)^(0+128)
  7637                           
  7638                           ;peripherals.c: 252: }
  7639                           ;peripherals.c: 253: } else {
  7640  0A88  0008               	return
  7641  0A89                     l4978:	
  7642                           
  7643                           ;peripherals.c: 254: motion_counter = 0;
  7644  0A89  0021               	movlb	1	; select bank1
  7645  0A8A  01B4               	clrf	_motion_counter^(0+128)
  7646  0A8B  01B5               	clrf	(_motion_counter+1)^(0+128)
  7647                           
  7648                           ;peripherals.c: 255: }
  7649                           ;peripherals.c: 256: } else if (motion_en == 2) {
  7650  0A8C  0008               	return
  7651  0A8D                     l4980:	
  7652  0A8D  3002               	movlw	2
  7653  0A8E  0020               	movlb	0	; select bank0
  7654  0A8F  0658               	xorwf	_motion_en,w
  7655  0A90  0459               	iorwf	_motion_en+1,w
  7656  0A91  1D03               	skipz
  7657  0A92  0008               	return
  7658                           
  7659                           ;peripherals.c: 257: if (PORTDbits.RD0 == 1) {
  7660  0A93  1C0F               	btfss	15,0	;volatile
  7661  0A94  2AB6               	goto	l4992
  7662                           
  7663                           ;peripherals.c: 258: if (motion_counter < motion_sensitivity) {
  7664  0A95  0021               	movlb	1	; select bank1
  7665  0A96  0835               	movf	(_motion_counter+1)^(0+128),w
  7666  0A97  3A80               	xorlw	128
  7667  0A98  0020               	movlb	0	; select bank0
  7668  0A99  00BA               	movwf	??_motion_detect
  7669  0A9A  0021               	movlb	1	; select bank1
  7670  0A9B  085F               	movf	(_motion_sensitivity+1)^(0+128),w
  7671  0A9C  3A80               	xorlw	128
  7672  0A9D  0020               	movlb	0	; select bank0
  7673  0A9E  023A               	subwf	??_motion_detect,w
  7674  0A9F  1D03               	skipz
  7675  0AA0  2AA4               	goto	u4995
  7676  0AA1  0021               	movlb	1	; select bank1
  7677  0AA2  085E               	movf	_motion_sensitivity^(0+128),w
  7678  0AA3  0234               	subwf	_motion_counter^(0+128),w
  7679  0AA4                     u4995:	
  7680  0AA4  1803               	skipnc
  7681  0AA5  2AAC               	goto	l4988
  7682                           
  7683                           ;peripherals.c: 259: motion_counter++;
  7684  0AA6  3001               	movlw	1
  7685  0AA7  0021               	movlb	1	; select bank1
  7686  0AA8  07B4               	addwf	_motion_counter^(0+128),f
  7687  0AA9  3000               	movlw	0
  7688  0AAA  3DB5               	addwfc	(_motion_counter+1)^(0+128),f
  7689                           
  7690                           ;peripherals.c: 260: } else {
  7691  0AAB  0008               	return
  7692  0AAC                     l4988:	
  7693                           
  7694                           ;peripherals.c: 261: push_i2c_reply_status(0xE3, 0x01);
  7695  0AAC  0020               	movlb	0	; select bank0
  7696  0AAD  01B3               	clrf	?_push_i2c_reply_status
  7697  0AAE  0AB3               	incf	?_push_i2c_reply_status,f
  7698  0AAF  30E3               	movlw	227
  7699  0AB0  318C  24F6         	fcall	_push_i2c_reply_status
  7700                           
  7701                           ;peripherals.c: 262: motion_counter = 0;
  7702  0AB2  0021               	movlb	1	; select bank1
  7703  0AB3  01B4               	clrf	_motion_counter^(0+128)
  7704  0AB4  01B5               	clrf	(_motion_counter+1)^(0+128)
  7705                           
  7706                           ;peripherals.c: 263: }
  7707                           ;peripherals.c: 264: } else {
  7708  0AB5  0008               	return
  7709  0AB6                     l4992:	
  7710                           
  7711                           ;peripherals.c: 265: motion_counter = 0;
  7712  0AB6  0021               	movlb	1	; select bank1
  7713  0AB7  01B4               	clrf	_motion_counter^(0+128)
  7714  0AB8  01B5               	clrf	(_motion_counter+1)^(0+128)
  7715  0AB9  0008               	return
  7716  0ABA                     __end_of_motion_detect:	
  7717                           
  7718                           	psect	text35
  7719  0C71                     __ptext35:	
  7720 ;; *************** function _sensor1_detect *****************
  7721 ;; Defined at:
  7722 ;;		line 275 in file "peripherals.c"
  7723 ;; Parameters:    Size  Location     Type
  7724 ;;		None
  7725 ;; Auto vars:     Size  Location     Type
  7726 ;;		None
  7727 ;; Return value:  Size  Location     Type
  7728 ;;                  2   44[COMMON] int 
  7729 ;; Registers used:
  7730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7731 ;; Tracked objects:
  7732 ;;		On entry : 0/0
  7733 ;;		On exit  : 0/0
  7734 ;;		Unchanged: 0/0
  7735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7736 ;;      Params:         0       0       0       0       0       0       0       0
  7737 ;;      Locals:         0       0       0       0       0       0       0       0
  7738 ;;      Temps:          0       1       0       0       0       0       0       0
  7739 ;;      Totals:         0       1       0       0       0       0       0       0
  7740 ;;Total ram usage:        1 bytes
  7741 ;; Hardware stack levels used:    1
  7742 ;; Hardware stack levels required when called:    6
  7743 ;; This function calls:
  7744 ;;		_push_i2c_reply_status
  7745 ;; This function is called by:
  7746 ;;		_main
  7747 ;; This function uses a non-reentrant model
  7748 ;;
  7749                           
  7750                           
  7751                           ;psect for function _sensor1_detect
  7752  0C71                     _sensor1_detect:	
  7753                           
  7754                           ;peripherals.c: 276: if (sensor1_en == 1){
  7755                           
  7756                           ;incstack = 0
  7757                           ; Regs used in _sensor1_detect: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  7758  0C71  3001               	movlw	1
  7759  0C72  0020               	movlb	0	; select bank0
  7760  0C73  065E               	xorwf	_sensor1_en,w
  7761  0C74  045F               	iorwf	_sensor1_en+1,w
  7762  0C75  1D03               	skipz
  7763  0C76  2CB4               	goto	l4942
  7764                           
  7765                           ;peripherals.c: 277: if (PORTAbits.RA1 == 0) {
  7766  0C77  188C               	btfsc	12,1	;volatile
  7767  0C78  2CA3               	goto	l4934
  7768                           
  7769                           ;peripherals.c: 278: if (sensor1_counter < sensor1_sensitivity) {
  7770  0C79  0021               	movlb	1	; select bank1
  7771  0C7A  0841               	movf	(_sensor1_counter+1)^(0+128),w
  7772  0C7B  3A80               	xorlw	128
  7773  0C7C  0020               	movlb	0	; select bank0
  7774  0C7D  00BA               	movwf	??_sensor1_detect
  7775  0C7E  0021               	movlb	1	; select bank1
  7776  0C7F  0863               	movf	(_sensor1_sensitivity+1)^(0+128),w
  7777  0C80  3A80               	xorlw	128
  7778  0C81  0020               	movlb	0	; select bank0
  7779  0C82  023A               	subwf	??_sensor1_detect,w
  7780  0C83  1D03               	skipz
  7781  0C84  2C88               	goto	u4865
  7782  0C85  0021               	movlb	1	; select bank1
  7783  0C86  0862               	movf	_sensor1_sensitivity^(0+128),w
  7784  0C87  0240               	subwf	_sensor1_counter^(0+128),w
  7785  0C88                     u4865:	
  7786  0C88  1803               	skipnc
  7787  0C89  2C90               	goto	l4926
  7788                           
  7789                           ;peripherals.c: 279: sensor1_counter++;
  7790  0C8A  3001               	movlw	1
  7791  0C8B  0021               	movlb	1	; select bank1
  7792  0C8C  07C0               	addwf	_sensor1_counter^(0+128),f
  7793  0C8D  3000               	movlw	0
  7794  0C8E  3DC1               	addwfc	(_sensor1_counter+1)^(0+128),f
  7795                           
  7796                           ;peripherals.c: 280: } else {
  7797  0C8F  0008               	return
  7798  0C90                     l4926:	
  7799                           
  7800                           ;peripherals.c: 281: if (sensor1_status == 0) {
  7801  0C90  0020               	movlb	0	; select bank0
  7802  0C91  0861               	movf	_sensor1_status+1,w
  7803  0C92  0460               	iorwf	_sensor1_status,w
  7804  0C93  1D03               	skipz
  7805  0C94  2C9F               	goto	l4932
  7806                           
  7807                           ;peripherals.c: 282: push_i2c_reply_status(0xE2, 0x01);
  7808  0C95  01B3               	clrf	?_push_i2c_reply_status
  7809  0C96  0AB3               	incf	?_push_i2c_reply_status,f
  7810  0C97  30E2               	movlw	226
  7811  0C98  318C  24F6         	fcall	_push_i2c_reply_status
  7812                           
  7813                           ;peripherals.c: 283: sensor1_status = 1;
  7814  0C9A  3001               	movlw	1
  7815  0C9B  0020               	movlb	0	; select bank0
  7816  0C9C  00E0               	movwf	_sensor1_status
  7817  0C9D  3000               	movlw	0
  7818  0C9E  00E1               	movwf	_sensor1_status+1
  7819  0C9F                     l4932:	
  7820                           
  7821                           ;peripherals.c: 284: }
  7822                           ;peripherals.c: 285: sensor1_counter = 0;
  7823  0C9F  0021               	movlb	1	; select bank1
  7824  0CA0  01C0               	clrf	_sensor1_counter^(0+128)
  7825  0CA1  01C1               	clrf	(_sensor1_counter+1)^(0+128)
  7826                           
  7827                           ;peripherals.c: 286: }
  7828                           ;peripherals.c: 287: } else {
  7829  0CA2  0008               	return
  7830  0CA3                     l4934:	
  7831                           
  7832                           ;peripherals.c: 288: sensor1_counter = 0;
  7833  0CA3  0021               	movlb	1	; select bank1
  7834  0CA4  01C0               	clrf	_sensor1_counter^(0+128)
  7835  0CA5  01C1               	clrf	(_sensor1_counter+1)^(0+128)
  7836                           
  7837                           ;peripherals.c: 289: if (sensor1_status == 1) {
  7838  0CA6  3001               	movlw	1
  7839  0CA7  0020               	movlb	0	; select bank0
  7840  0CA8  0660               	xorwf	_sensor1_status,w
  7841  0CA9  0461               	iorwf	_sensor1_status+1,w
  7842  0CAA  1D03               	skipz
  7843  0CAB  0008               	return
  7844                           
  7845                           ;peripherals.c: 290: push_i2c_reply_status(0xE2, 0x00);
  7846  0CAC  01B3               	clrf	?_push_i2c_reply_status
  7847  0CAD  30E2               	movlw	226
  7848  0CAE  318C  24F6         	fcall	_push_i2c_reply_status
  7849                           
  7850                           ;peripherals.c: 291: sensor1_status = 0;
  7851  0CB0  0020               	movlb	0	; select bank0
  7852  0CB1  01E0               	clrf	_sensor1_status
  7853  0CB2  01E1               	clrf	_sensor1_status+1
  7854                           
  7855                           ;peripherals.c: 292: }
  7856                           ;peripherals.c: 293: }
  7857                           ;peripherals.c: 294: } else if (sensor1_en == 2){
  7858  0CB3  0008               	return
  7859  0CB4                     l4942:	
  7860  0CB4  3002               	movlw	2
  7861  0CB5  065E               	xorwf	_sensor1_en,w
  7862  0CB6  045F               	iorwf	_sensor1_en+1,w
  7863  0CB7  1D03               	skipz
  7864  0CB8  0008               	return
  7865                           
  7866                           ;peripherals.c: 295: if (PORTAbits.RA1 == 1) {
  7867  0CB9  1C8C               	btfss	12,1	;volatile
  7868  0CBA  2CE5               	goto	l4958
  7869                           
  7870                           ;peripherals.c: 296: if (sensor1_counter < sensor1_sensitivity) {
  7871  0CBB  0021               	movlb	1	; select bank1
  7872  0CBC  0841               	movf	(_sensor1_counter+1)^(0+128),w
  7873  0CBD  3A80               	xorlw	128
  7874  0CBE  0020               	movlb	0	; select bank0
  7875  0CBF  00BA               	movwf	??_sensor1_detect
  7876  0CC0  0021               	movlb	1	; select bank1
  7877  0CC1  0863               	movf	(_sensor1_sensitivity+1)^(0+128),w
  7878  0CC2  3A80               	xorlw	128
  7879  0CC3  0020               	movlb	0	; select bank0
  7880  0CC4  023A               	subwf	??_sensor1_detect,w
  7881  0CC5  1D03               	skipz
  7882  0CC6  2CCA               	goto	u4915
  7883  0CC7  0021               	movlb	1	; select bank1
  7884  0CC8  0862               	movf	_sensor1_sensitivity^(0+128),w
  7885  0CC9  0240               	subwf	_sensor1_counter^(0+128),w
  7886  0CCA                     u4915:	
  7887  0CCA  1803               	skipnc
  7888  0CCB  2CD2               	goto	l4950
  7889                           
  7890                           ;peripherals.c: 297: sensor1_counter++;
  7891  0CCC  3001               	movlw	1
  7892  0CCD  0021               	movlb	1	; select bank1
  7893  0CCE  07C0               	addwf	_sensor1_counter^(0+128),f
  7894  0CCF  3000               	movlw	0
  7895  0CD0  3DC1               	addwfc	(_sensor1_counter+1)^(0+128),f
  7896                           
  7897                           ;peripherals.c: 298: } else {
  7898  0CD1  0008               	return
  7899  0CD2                     l4950:	
  7900                           
  7901                           ;peripherals.c: 299: if (sensor1_status == 0) {
  7902  0CD2  0020               	movlb	0	; select bank0
  7903  0CD3  0861               	movf	_sensor1_status+1,w
  7904  0CD4  0460               	iorwf	_sensor1_status,w
  7905  0CD5  1D03               	skipz
  7906  0CD6  2CE1               	goto	l4956
  7907                           
  7908                           ;peripherals.c: 300: push_i2c_reply_status(0xE2, 0x01);
  7909  0CD7  01B3               	clrf	?_push_i2c_reply_status
  7910  0CD8  0AB3               	incf	?_push_i2c_reply_status,f
  7911  0CD9  30E2               	movlw	226
  7912  0CDA  318C  24F6         	fcall	_push_i2c_reply_status
  7913                           
  7914                           ;peripherals.c: 301: sensor1_status = 1;
  7915  0CDC  3001               	movlw	1
  7916  0CDD  0020               	movlb	0	; select bank0
  7917  0CDE  00E0               	movwf	_sensor1_status
  7918  0CDF  3000               	movlw	0
  7919  0CE0  00E1               	movwf	_sensor1_status+1
  7920  0CE1                     l4956:	
  7921                           
  7922                           ;peripherals.c: 302: }
  7923                           ;peripherals.c: 303: sensor1_counter = 0;
  7924  0CE1  0021               	movlb	1	; select bank1
  7925  0CE2  01C0               	clrf	_sensor1_counter^(0+128)
  7926  0CE3  01C1               	clrf	(_sensor1_counter+1)^(0+128)
  7927                           
  7928                           ;peripherals.c: 304: }
  7929                           ;peripherals.c: 305: } else {
  7930  0CE4  0008               	return
  7931  0CE5                     l4958:	
  7932                           
  7933                           ;peripherals.c: 306: sensor1_counter = 0;
  7934  0CE5  0021               	movlb	1	; select bank1
  7935  0CE6  01C0               	clrf	_sensor1_counter^(0+128)
  7936  0CE7  01C1               	clrf	(_sensor1_counter+1)^(0+128)
  7937                           
  7938                           ;peripherals.c: 307: if (sensor1_status == 1) {
  7939  0CE8  3001               	movlw	1
  7940  0CE9  0020               	movlb	0	; select bank0
  7941  0CEA  0660               	xorwf	_sensor1_status,w
  7942  0CEB  0461               	iorwf	_sensor1_status+1,w
  7943  0CEC  1D03               	skipz
  7944  0CED  0008               	return
  7945                           
  7946                           ;peripherals.c: 308: push_i2c_reply_status(0xE2, 0x00);
  7947  0CEE  01B3               	clrf	?_push_i2c_reply_status
  7948  0CEF  30E2               	movlw	226
  7949  0CF0  318C  24F6         	fcall	_push_i2c_reply_status
  7950                           
  7951                           ;peripherals.c: 309: sensor1_status = 0;
  7952  0CF2  0020               	movlb	0	; select bank0
  7953  0CF3  01E0               	clrf	_sensor1_status
  7954  0CF4  01E1               	clrf	_sensor1_status+1
  7955  0CF5  0008               	return
  7956  0CF6                     __end_of_sensor1_detect:	
  7957                           
  7958                           	psect	text36
  7959  0BEC                     __ptext36:	
  7960 ;; *************** function _sensor0_detect *****************
  7961 ;; Defined at:
  7962 ;;		line 320 in file "peripherals.c"
  7963 ;; Parameters:    Size  Location     Type
  7964 ;;		None
  7965 ;; Auto vars:     Size  Location     Type
  7966 ;;		None
  7967 ;; Return value:  Size  Location     Type
  7968 ;;                  2   42[COMMON] int 
  7969 ;; Registers used:
  7970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7971 ;; Tracked objects:
  7972 ;;		On entry : 0/0
  7973 ;;		On exit  : 0/0
  7974 ;;		Unchanged: 0/0
  7975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7976 ;;      Params:         0       0       0       0       0       0       0       0
  7977 ;;      Locals:         0       0       0       0       0       0       0       0
  7978 ;;      Temps:          0       1       0       0       0       0       0       0
  7979 ;;      Totals:         0       1       0       0       0       0       0       0
  7980 ;;Total ram usage:        1 bytes
  7981 ;; Hardware stack levels used:    1
  7982 ;; Hardware stack levels required when called:    6
  7983 ;; This function calls:
  7984 ;;		_push_i2c_reply_status
  7985 ;; This function is called by:
  7986 ;;		_main
  7987 ;; This function uses a non-reentrant model
  7988 ;;
  7989                           
  7990                           
  7991                           ;psect for function _sensor0_detect
  7992  0BEC                     _sensor0_detect:	
  7993                           
  7994                           ;peripherals.c: 321: if(sensor0_en == 1){
  7995                           
  7996                           ;incstack = 0
  7997                           ; Regs used in _sensor0_detect: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  7998  0BEC  3001               	movlw	1
  7999  0BED  0020               	movlb	0	; select bank0
  8000  0BEE  065A               	xorwf	_sensor0_en,w
  8001  0BEF  045B               	iorwf	_sensor0_en+1,w
  8002  0BF0  1D03               	skipz
  8003  0BF1  2C2F               	goto	l4894
  8004                           
  8005                           ;peripherals.c: 322: if (PORTAbits.RA0 == 0) {
  8006  0BF2  180C               	btfsc	12,0	;volatile
  8007  0BF3  2C1E               	goto	l4886
  8008                           
  8009                           ;peripherals.c: 323: if (sensor0_counter < sensor0_sensitivity) {
  8010  0BF4  0021               	movlb	1	; select bank1
  8011  0BF5  083F               	movf	(_sensor0_counter+1)^(0+128),w
  8012  0BF6  3A80               	xorlw	128
  8013  0BF7  0020               	movlb	0	; select bank0
  8014  0BF8  00BA               	movwf	??_sensor0_detect
  8015  0BF9  0021               	movlb	1	; select bank1
  8016  0BFA  0861               	movf	(_sensor0_sensitivity+1)^(0+128),w
  8017  0BFB  3A80               	xorlw	128
  8018  0BFC  0020               	movlb	0	; select bank0
  8019  0BFD  023A               	subwf	??_sensor0_detect,w
  8020  0BFE  1D03               	skipz
  8021  0BFF  2C03               	goto	u4765
  8022  0C00  0021               	movlb	1	; select bank1
  8023  0C01  0860               	movf	_sensor0_sensitivity^(0+128),w
  8024  0C02  023E               	subwf	_sensor0_counter^(0+128),w
  8025  0C03                     u4765:	
  8026  0C03  1803               	skipnc
  8027  0C04  2C0B               	goto	l4878
  8028                           
  8029                           ;peripherals.c: 324: sensor0_counter++;
  8030  0C05  3001               	movlw	1
  8031  0C06  0021               	movlb	1	; select bank1
  8032  0C07  07BE               	addwf	_sensor0_counter^(0+128),f
  8033  0C08  3000               	movlw	0
  8034  0C09  3DBF               	addwfc	(_sensor0_counter+1)^(0+128),f
  8035                           
  8036                           ;peripherals.c: 325: } else {
  8037  0C0A  0008               	return
  8038  0C0B                     l4878:	
  8039                           
  8040                           ;peripherals.c: 326: if (sensor0_status == 0) {
  8041  0C0B  0020               	movlb	0	; select bank0
  8042  0C0C  085D               	movf	_sensor0_status+1,w
  8043  0C0D  045C               	iorwf	_sensor0_status,w
  8044  0C0E  1D03               	skipz
  8045  0C0F  2C1A               	goto	l4884
  8046                           
  8047                           ;peripherals.c: 327: push_i2c_reply_status(0xE1, 0x01);
  8048  0C10  01B3               	clrf	?_push_i2c_reply_status
  8049  0C11  0AB3               	incf	?_push_i2c_reply_status,f
  8050  0C12  30E1               	movlw	225
  8051  0C13  318C  24F6         	fcall	_push_i2c_reply_status
  8052                           
  8053                           ;peripherals.c: 328: sensor0_status = 1;
  8054  0C15  3001               	movlw	1
  8055  0C16  0020               	movlb	0	; select bank0
  8056  0C17  00DC               	movwf	_sensor0_status
  8057  0C18  3000               	movlw	0
  8058  0C19  00DD               	movwf	_sensor0_status+1
  8059  0C1A                     l4884:	
  8060                           
  8061                           ;peripherals.c: 329: }
  8062                           ;peripherals.c: 330: sensor0_counter = 0;
  8063  0C1A  0021               	movlb	1	; select bank1
  8064  0C1B  01BE               	clrf	_sensor0_counter^(0+128)
  8065  0C1C  01BF               	clrf	(_sensor0_counter+1)^(0+128)
  8066                           
  8067                           ;peripherals.c: 331: }
  8068                           ;peripherals.c: 332: } else {
  8069  0C1D  0008               	return
  8070  0C1E                     l4886:	
  8071                           
  8072                           ;peripherals.c: 333: sensor0_counter = 0;
  8073  0C1E  0021               	movlb	1	; select bank1
  8074  0C1F  01BE               	clrf	_sensor0_counter^(0+128)
  8075  0C20  01BF               	clrf	(_sensor0_counter+1)^(0+128)
  8076                           
  8077                           ;peripherals.c: 334: if (sensor0_status == 1) {
  8078  0C21  3001               	movlw	1
  8079  0C22  0020               	movlb	0	; select bank0
  8080  0C23  065C               	xorwf	_sensor0_status,w
  8081  0C24  045D               	iorwf	_sensor0_status+1,w
  8082  0C25  1D03               	skipz
  8083  0C26  0008               	return
  8084                           
  8085                           ;peripherals.c: 335: push_i2c_reply_status(0xE1, 0x00);
  8086  0C27  01B3               	clrf	?_push_i2c_reply_status
  8087  0C28  30E1               	movlw	225
  8088  0C29  318C  24F6         	fcall	_push_i2c_reply_status
  8089                           
  8090                           ;peripherals.c: 336: sensor0_status = 0;
  8091  0C2B  0020               	movlb	0	; select bank0
  8092  0C2C  01DC               	clrf	_sensor0_status
  8093  0C2D  01DD               	clrf	_sensor0_status+1
  8094                           
  8095                           ;peripherals.c: 337: }
  8096                           ;peripherals.c: 338: }
  8097                           ;peripherals.c: 339: } else if (sensor0_en == 2){
  8098  0C2E  0008               	return
  8099  0C2F                     l4894:	
  8100  0C2F  3002               	movlw	2
  8101  0C30  065A               	xorwf	_sensor0_en,w
  8102  0C31  045B               	iorwf	_sensor0_en+1,w
  8103  0C32  1D03               	skipz
  8104  0C33  0008               	return
  8105                           
  8106                           ;peripherals.c: 340: if (PORTAbits.RA0 == 1) {
  8107  0C34  1C0C               	btfss	12,0	;volatile
  8108  0C35  2C60               	goto	l4910
  8109                           
  8110                           ;peripherals.c: 341: if (sensor0_counter < sensor0_sensitivity) {
  8111  0C36  0021               	movlb	1	; select bank1
  8112  0C37  083F               	movf	(_sensor0_counter+1)^(0+128),w
  8113  0C38  3A80               	xorlw	128
  8114  0C39  0020               	movlb	0	; select bank0
  8115  0C3A  00BA               	movwf	??_sensor0_detect
  8116  0C3B  0021               	movlb	1	; select bank1
  8117  0C3C  0861               	movf	(_sensor0_sensitivity+1)^(0+128),w
  8118  0C3D  3A80               	xorlw	128
  8119  0C3E  0020               	movlb	0	; select bank0
  8120  0C3F  023A               	subwf	??_sensor0_detect,w
  8121  0C40  1D03               	skipz
  8122  0C41  2C45               	goto	u4815
  8123  0C42  0021               	movlb	1	; select bank1
  8124  0C43  0860               	movf	_sensor0_sensitivity^(0+128),w
  8125  0C44  023E               	subwf	_sensor0_counter^(0+128),w
  8126  0C45                     u4815:	
  8127  0C45  1803               	skipnc
  8128  0C46  2C4D               	goto	l4902
  8129                           
  8130                           ;peripherals.c: 342: sensor0_counter++;
  8131  0C47  3001               	movlw	1
  8132  0C48  0021               	movlb	1	; select bank1
  8133  0C49  07BE               	addwf	_sensor0_counter^(0+128),f
  8134  0C4A  3000               	movlw	0
  8135  0C4B  3DBF               	addwfc	(_sensor0_counter+1)^(0+128),f
  8136                           
  8137                           ;peripherals.c: 343: } else {
  8138  0C4C  0008               	return
  8139  0C4D                     l4902:	
  8140                           
  8141                           ;peripherals.c: 344: if (sensor0_status == 0) {
  8142  0C4D  0020               	movlb	0	; select bank0
  8143  0C4E  085D               	movf	_sensor0_status+1,w
  8144  0C4F  045C               	iorwf	_sensor0_status,w
  8145  0C50  1D03               	skipz
  8146  0C51  2C5C               	goto	l4908
  8147                           
  8148                           ;peripherals.c: 345: push_i2c_reply_status(0xE1, 0x01);
  8149  0C52  01B3               	clrf	?_push_i2c_reply_status
  8150  0C53  0AB3               	incf	?_push_i2c_reply_status,f
  8151  0C54  30E1               	movlw	225
  8152  0C55  318C  24F6         	fcall	_push_i2c_reply_status
  8153                           
  8154                           ;peripherals.c: 346: sensor0_status = 1;
  8155  0C57  3001               	movlw	1
  8156  0C58  0020               	movlb	0	; select bank0
  8157  0C59  00DC               	movwf	_sensor0_status
  8158  0C5A  3000               	movlw	0
  8159  0C5B  00DD               	movwf	_sensor0_status+1
  8160  0C5C                     l4908:	
  8161                           
  8162                           ;peripherals.c: 347: }
  8163                           ;peripherals.c: 348: sensor0_counter = 0;
  8164  0C5C  0021               	movlb	1	; select bank1
  8165  0C5D  01BE               	clrf	_sensor0_counter^(0+128)
  8166  0C5E  01BF               	clrf	(_sensor0_counter+1)^(0+128)
  8167                           
  8168                           ;peripherals.c: 349: }
  8169                           ;peripherals.c: 350: } else {
  8170  0C5F  0008               	return
  8171  0C60                     l4910:	
  8172                           
  8173                           ;peripherals.c: 351: sensor0_counter = 0;
  8174  0C60  0021               	movlb	1	; select bank1
  8175  0C61  01BE               	clrf	_sensor0_counter^(0+128)
  8176  0C62  01BF               	clrf	(_sensor0_counter+1)^(0+128)
  8177                           
  8178                           ;peripherals.c: 352: if (sensor0_status == 1) {
  8179  0C63  3001               	movlw	1
  8180  0C64  0020               	movlb	0	; select bank0
  8181  0C65  065C               	xorwf	_sensor0_status,w
  8182  0C66  045D               	iorwf	_sensor0_status+1,w
  8183  0C67  1D03               	skipz
  8184  0C68  0008               	return
  8185                           
  8186                           ;peripherals.c: 353: push_i2c_reply_status(0xE1, 0x00);
  8187  0C69  01B3               	clrf	?_push_i2c_reply_status
  8188  0C6A  30E1               	movlw	225
  8189  0C6B  318C  24F6         	fcall	_push_i2c_reply_status
  8190                           
  8191                           ;peripherals.c: 354: sensor0_status = 0;
  8192  0C6D  0020               	movlb	0	; select bank0
  8193  0C6E  01DC               	clrf	_sensor0_status
  8194  0C6F  01DD               	clrf	_sensor0_status+1
  8195  0C70  0008               	return
  8196  0C71                     __end_of_sensor0_detect:	
  8197                           
  8198                           	psect	text37
  8199  0B78                     __ptext37:	
  8200 ;; *************** function _GetKeyPressed *****************
  8201 ;; Defined at:
  8202 ;;		line 82 in file "keypad_Api.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;		None
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;  column          1   29[BANK0 ] unsigned char 
  8207 ;;  key             1   28[BANK0 ] unsigned char 
  8208 ;;  keypress        1   27[BANK0 ] unsigned char 
  8209 ;;  row             1    0        unsigned char 
  8210 ;;  k               1    0        unsigned char 
  8211 ;; Return value:  Size  Location     Type
  8212 ;;		None               void
  8213 ;; Registers used:
  8214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8215 ;; Tracked objects:
  8216 ;;		On entry : 0/0
  8217 ;;		On exit  : 0/0
  8218 ;;		Unchanged: 0/0
  8219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8220 ;;      Params:         0       0       0       0       0       0       0       0
  8221 ;;      Locals:         0       3       0       0       0       0       0       0
  8222 ;;      Temps:          0       1       0       0       0       0       0       0
  8223 ;;      Totals:         0       4       0       0       0       0       0       0
  8224 ;;Total ram usage:        4 bytes
  8225 ;; Hardware stack levels used:    1
  8226 ;; Hardware stack levels required when called:    6
  8227 ;; This function calls:
  8228 ;;		_push_i2c_reply_status
  8229 ;; This function is called by:
  8230 ;;		_main
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           
  8235                           ;psect for function _GetKeyPressed
  8236  0B78                     _GetKeyPressed:	
  8237                           
  8238                           ;keypad_Api.c: 83: unsigned char k, key = 0xFF, row, column, keypress = 0xFF;
  8239                           
  8240                           ;incstack = 0
  8241                           ; Regs used in _GetKeyPressed: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  8242  0B78  30FF               	movlw	255
  8243  0B79  0020               	movlb	0	; select bank0
  8244  0B7A  00BA               	movwf	??_GetKeyPressed
  8245  0B7B  083A               	movf	??_GetKeyPressed,w
  8246  0B7C  00BC               	movwf	GetKeyPressed@key
  8247  0B7D  30FF               	movlw	255
  8248  0B7E  00BA               	movwf	??_GetKeyPressed
  8249  0B7F  083A               	movf	??_GetKeyPressed,w
  8250  0B80  00BB               	movwf	GetKeyPressed@keypress
  8251                           
  8252                           ;keypad_Api.c: 85: LATBbits.LATB0 = 0;
  8253  0B81  0022               	movlb	2	; select bank2
  8254  0B82  100D               	bcf	13,0	;volatile
  8255                           
  8256                           ;keypad_Api.c: 86: LATBbits.LATB1 = 0;
  8257  0B83  108D               	bcf	13,1	;volatile
  8258                           
  8259                           ;keypad_Api.c: 87: LATBbits.LATB5 = 0;
  8260  0B84  128D               	bcf	13,5	;volatile
  8261                           
  8262                           ;keypad_Api.c: 89: LATAbits.LATA7 = 1;
  8263  0B85  178C               	bsf	12,7	;volatile
  8264                           
  8265                           ;keypad_Api.c: 90: LATEbits.LATE0 = 1;
  8266  0B86  1410               	bsf	16,0	;volatile
  8267                           
  8268                           ;keypad_Api.c: 91: LATEbits.LATE1 = 1;
  8269  0B87  1490               	bsf	16,1	;volatile
  8270                           
  8271                           ;keypad_Api.c: 92: LATEbits.LATE2 = 1;
  8272  0B88  1510               	bsf	16,2	;volatile
  8273                           
  8274                           ;keypad_Api.c: 95: for(column = 1; column <= 3; column++)
  8275  0B89  0020               	movlb	0	; select bank0
  8276  0B8A  01BD               	clrf	GetKeyPressed@column
  8277  0B8B  0ABD               	incf	GetKeyPressed@column,f
  8278  0B8C  3004               	movlw	4
  8279  0B8D  023D               	subwf	GetKeyPressed@column,w
  8280  0B8E  1803               	btfsc	3,0
  8281  0B8F  2BD3               	goto	l4862
  8282  0B90                     l1071:	
  8283                           
  8284                           ;keypad_Api.c: 96: {
  8285                           ;keypad_Api.c: 98: TRISBbits.TRISB0 = 1;
  8286  0B90  0021               	movlb	1	; select bank1
  8287  0B91  140D               	bsf	13,0	;volatile
  8288                           
  8289                           ;keypad_Api.c: 99: TRISBbits.TRISB1 = 1;
  8290  0B92  148D               	bsf	13,1	;volatile
  8291                           
  8292                           ;keypad_Api.c: 100: TRISBbits.TRISB5 = 1;
  8293  0B93  168D               	bsf	13,5	;volatile
  8294                           
  8295                           ;keypad_Api.c: 102: TRISAbits.TRISA7 = 1;
  8296  0B94  178C               	bsf	12,7	;volatile
  8297                           
  8298                           ;keypad_Api.c: 103: TRISEbits.TRISE0 = 1;
  8299  0B95  1410               	bsf	16,0	;volatile
  8300                           
  8301                           ;keypad_Api.c: 104: TRISEbits.TRISE1 = 1;
  8302  0B96  1490               	bsf	16,1	;volatile
  8303                           
  8304                           ;keypad_Api.c: 105: TRISEbits.TRISE2 = 1;
  8305  0B97  1510               	bsf	16,2	;volatile
  8306                           
  8307                           ;keypad_Api.c: 107: switch (column)
  8308  0B98  2BA7               	goto	l4848
  8309  0B99                     l1074:	
  8310                           ;keypad_Api.c: 108: {
  8311                           ;keypad_Api.c: 109: case 1:
  8312                           
  8313                           
  8314                           ;keypad_Api.c: 111: TRISBbits.TRISB0 = 0;
  8315  0B99  0021               	movlb	1	; select bank1
  8316  0B9A  100D               	bcf	13,0	;volatile
  8317                           
  8318                           ;keypad_Api.c: 112: TRISBbits.TRISB1 = 1;
  8319  0B9B  148D               	bsf	13,1	;volatile
  8320  0B9C  2BA0               	goto	L1
  8321  0B9D                     l1076:	
  8322                           ;keypad_Api.c: 115: case 2:
  8323                           
  8324                           ;keypad_Api.c: 114: break;
  8325                           
  8326                           ;keypad_Api.c: 113: TRISBbits.TRISB5 = 1;
  8327                           
  8328                           
  8329                           ;keypad_Api.c: 117: TRISBbits.TRISB0 = 1;
  8330  0B9D  0021               	movlb	1	; select bank1
  8331  0B9E  140D               	bsf	13,0	;volatile
  8332                           
  8333                           ;keypad_Api.c: 118: TRISBbits.TRISB1 = 0;
  8334  0B9F  108D               	bcf	13,1	;volatile
  8335  0BA0                     L1:	
  8336                           
  8337                           ;keypad_Api.c: 119: TRISBbits.TRISB5 = 1;
  8338  0BA0  168D               	bsf	13,5	;volatile
  8339                           
  8340                           ;keypad_Api.c: 120: break;
  8341  0BA1  2BB3               	goto	l1075
  8342  0BA2                     l1077:	
  8343                           ;keypad_Api.c: 121: case 3:
  8344                           
  8345                           
  8346                           ;keypad_Api.c: 123: TRISBbits.TRISB0 = 1;
  8347  0BA2  0021               	movlb	1	; select bank1
  8348  0BA3  140D               	bsf	13,0	;volatile
  8349                           
  8350                           ;keypad_Api.c: 124: TRISBbits.TRISB1 = 1;
  8351  0BA4  148D               	bsf	13,1	;volatile
  8352                           
  8353                           ;keypad_Api.c: 125: TRISBbits.TRISB5 = 0;
  8354  0BA5  128D               	bcf	13,5	;volatile
  8355                           
  8356                           ;keypad_Api.c: 127: }
  8357                           
  8358                           ;keypad_Api.c: 126: break;
  8359  0BA6  2BB3               	goto	l1075
  8360  0BA7                     l4848:	
  8361  0BA7  0020               	movlb	0	; select bank0
  8362  0BA8  083D               	movf	GetKeyPressed@column,w
  8363                           
  8364                           ; Switch size 1, requested type "space"
  8365                           ; Number of cases is 3, Range of values is 1 to 3
  8366                           ; switch strategies available:
  8367                           ; Name         Instructions Cycles
  8368                           ; simple_byte           10     6 (average)
  8369                           ; direct_byte           15     9 (fixed)
  8370                           ; jumptable            263     9 (fixed)
  8371                           ;	Chosen strategy is simple_byte
  8372  0BA9  3A01               	xorlw	1	; case 1
  8373  0BAA  1903               	skipnz
  8374  0BAB  2B99               	goto	l1074
  8375  0BAC  3A03               	xorlw	3	; case 2
  8376  0BAD  1903               	skipnz
  8377  0BAE  2B9D               	goto	l1076
  8378  0BAF  3A01               	xorlw	1	; case 3
  8379  0BB0  1903               	skipnz
  8380  0BB1  2BA2               	goto	l1077
  8381  0BB2  2BB3               	goto	l1075
  8382  0BB3                     l1075:	
  8383                           
  8384                           ;keypad_Api.c: 130: if(PORTAbits.RA7 == 0)
  8385  0BB3  0020               	movlb	0	; select bank0
  8386  0BB4  1B8C               	btfsc	12,7	;volatile
  8387  0BB5  2BB9               	goto	l1078
  8388                           
  8389                           ;keypad_Api.c: 131: {
  8390                           ;keypad_Api.c: 132: key = 0*3+(column-1);
  8391  0BB6  083D               	movf	GetKeyPressed@column,w
  8392  0BB7  3EFF               	addlw	255
  8393  0BB8  2BC7               	goto	L4
  8394  0BB9                     l1078:	
  8395                           ;keypad_Api.c: 134: break;
  8396                           
  8397                           
  8398                           ;keypad_Api.c: 135: }
  8399                           ;keypad_Api.c: 136: if(PORTEbits.RE0 == 0)
  8400  0BB9  1810               	btfsc	16,0	;volatile
  8401  0BBA  2BBE               	goto	l1079
  8402                           
  8403                           ;keypad_Api.c: 137: {
  8404                           ;keypad_Api.c: 138: key = 1*3+(column-1);
  8405  0BBB  083D               	movf	GetKeyPressed@column,w
  8406  0BBC  3E02               	addlw	2
  8407  0BBD  2BC7               	goto	L4
  8408  0BBE                     l1079:	
  8409                           ;keypad_Api.c: 140: break;
  8410                           
  8411                           
  8412                           ;keypad_Api.c: 141: }
  8413                           ;keypad_Api.c: 142: if(PORTEbits.RE1 == 0)
  8414  0BBE  1890               	btfsc	16,1	;volatile
  8415  0BBF  2BC3               	goto	l1080
  8416                           
  8417                           ;keypad_Api.c: 143: {
  8418                           ;keypad_Api.c: 144: key = 2*3+(column-1);
  8419  0BC0  083D               	movf	GetKeyPressed@column,w
  8420  0BC1  3E05               	addlw	5
  8421  0BC2  2BC7               	goto	L4
  8422  0BC3                     l1080:	
  8423                           ;keypad_Api.c: 146: break;
  8424                           
  8425                           
  8426                           ;keypad_Api.c: 147: }
  8427                           ;keypad_Api.c: 148: if(PORTEbits.RE2 == 0)
  8428  0BC3  1910               	btfsc	16,2	;volatile
  8429  0BC4  2BCB               	goto	l4858
  8430                           
  8431                           ;keypad_Api.c: 149: {
  8432                           ;keypad_Api.c: 150: key = 3*3+(column-1);
  8433  0BC5  083D               	movf	GetKeyPressed@column,w
  8434  0BC6  3E08               	addlw	8
  8435  0BC7                     L4:	
  8436  0BC7  00BA               	movwf	??_GetKeyPressed
  8437  0BC8  083A               	movf	??_GetKeyPressed,w
  8438  0BC9  00BC               	movwf	GetKeyPressed@key
  8439                           
  8440                           ;keypad_Api.c: 152: break;
  8441  0BCA  2BD3               	goto	l4862
  8442  0BCB                     l4858:	
  8443  0BCB  3001               	movlw	1
  8444  0BCC  00BA               	movwf	??_GetKeyPressed
  8445  0BCD  083A               	movf	??_GetKeyPressed,w
  8446  0BCE  07BD               	addwf	GetKeyPressed@column,f
  8447  0BCF  3004               	movlw	4
  8448  0BD0  023D               	subwf	GetKeyPressed@column,w
  8449  0BD1  1C03               	skipc
  8450  0BD2  2B90               	goto	l1071
  8451  0BD3                     l4862:	
  8452                           
  8453                           ;keypad_Api.c: 153: }
  8454                           ;keypad_Api.c: 155: }
  8455                           ;keypad_Api.c: 156: keypress = keyPadMatrix[key];
  8456  0BD3  083C               	movf	GetKeyPressed@key,w
  8457  0BD4  3E01               	addlw	low (_keyPadMatrix| (0+32768))
  8458  0BD5  3190               	movlp	high __stringtab
  8459  0BD6  000A               	callw
  8460  0BD7  318B               	pagesel	$	;select current page
  8461  0BD8  00BA               	movwf	??_GetKeyPressed
  8462  0BD9  083A               	movf	??_GetKeyPressed,w
  8463  0BDA  00BB               	movwf	GetKeyPressed@keypress
  8464                           
  8465                           ;keypad_Api.c: 157: if(key!= 0xFF)
  8466  0BDB  083C               	movf	GetKeyPressed@key,w
  8467  0BDC  3AFF               	xorlw	255
  8468  0BDD  1903               	skipnz
  8469  0BDE  2BE6               	goto	l4868
  8470                           
  8471                           ;keypad_Api.c: 158: push_i2c_reply_status(0x71, keypress);
  8472  0BDF  083B               	movf	GetKeyPressed@keypress,w
  8473  0BE0  00BA               	movwf	??_GetKeyPressed
  8474  0BE1  083A               	movf	??_GetKeyPressed,w
  8475  0BE2  00B3               	movwf	?_push_i2c_reply_status
  8476  0BE3  3071               	movlw	113
  8477  0BE4  318C  24F6         	fcall	_push_i2c_reply_status
  8478  0BE6                     l4868:	
  8479                           
  8480                           ;keypad_Api.c: 160: key = 0xFF;
  8481  0BE6  30FF               	movlw	255
  8482  0BE7  0020               	movlb	0	; select bank0
  8483  0BE8  00BA               	movwf	??_GetKeyPressed
  8484  0BE9  083A               	movf	??_GetKeyPressed,w
  8485  0BEA  00BC               	movwf	GetKeyPressed@key
  8486  0BEB  0008               	return
  8487  0BEC                     __end_of_GetKeyPressed:	
  8488                           
  8489                           	psect	text38
  8490  0CF6                     __ptext38:	
  8491 ;; *************** function _push_i2c_reply_status *****************
  8492 ;; Defined at:
  8493 ;;		line 122 in file "i2c_Api.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;  reg_add         1    wreg     unsigned char 
  8496 ;;  i2c_event       1   19[BANK0 ] unsigned char 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  reg_add         1   23[BANK0 ] unsigned char 
  8499 ;;  i               2   24[BANK0 ] int 
  8500 ;;  reg             2   21[BANK0 ] int 
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  2   19[BANK0 ] int 
  8503 ;; Registers used:
  8504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8510 ;;      Params:         0       1       0       0       0       0       0       0
  8511 ;;      Locals:         0       5       0       0       0       0       0       0
  8512 ;;      Temps:          0       1       0       0       0       0       0       0
  8513 ;;      Totals:         0       7       0       0       0       0       0       0
  8514 ;;Total ram usage:        7 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; Hardware stack levels required when called:    5
  8517 ;; This function calls:
  8518 ;;		_verify_byte_address
  8519 ;;		_verify_word_address
  8520 ;; This function is called by:
  8521 ;;		_motion_detect
  8522 ;;		_sensor1_detect
  8523 ;;		_sensor0_detect
  8524 ;;		_adc_read_service
  8525 ;;		_GetKeyPressed
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           
  8530                           ;psect for function _push_i2c_reply_status
  8531  0CF6                     _push_i2c_reply_status:	
  8532                           
  8533                           ;incstack = 0
  8534                           ; Regs used in _push_i2c_reply_status: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  8535                           ;push_i2c_reply_status@reg_add stored from wreg
  8536  0CF6  0020               	movlb	0	; select bank0
  8537  0CF7  00B7               	movwf	push_i2c_reply_status@reg_add
  8538                           
  8539                           ;i2c_Api.c: 123: int i;
  8540                           ;i2c_Api.c: 124: int reg;
  8541                           ;i2c_Api.c: 125: reg = verify_byte_address(reg_add);
  8542  0CF8  0837               	movf	push_i2c_reply_status@reg_add,w
  8543  0CF9  3188  2041  318C   	fcall	_verify_byte_address
  8544  0CFC  0020               	movlb	0	; select bank0
  8545  0CFD  082E               	movf	?_verify_byte_address+1,w
  8546  0CFE  01B6               	clrf	push_i2c_reply_status@reg+1
  8547  0CFF  07B6               	addwf	push_i2c_reply_status@reg+1,f
  8548  0D00  082D               	movf	?_verify_byte_address,w
  8549  0D01  01B5               	clrf	push_i2c_reply_status@reg
  8550  0D02  07B5               	addwf	push_i2c_reply_status@reg,f
  8551                           
  8552                           ;i2c_Api.c: 126: if (reg == 0xFF)
  8553  0D03  30FF               	movlw	255
  8554  0D04  0635               	xorwf	push_i2c_reply_status@reg,w
  8555  0D05  0436               	iorwf	push_i2c_reply_status@reg+1,w
  8556  0D06  1D03               	skipz
  8557  0D07  2D13               	goto	l5738
  8558                           
  8559                           ;i2c_Api.c: 127: {
  8560                           ;i2c_Api.c: 128: reg = verify_word_address(reg_add);
  8561  0D08  0837               	movf	push_i2c_reply_status@reg_add,w
  8562  0D09  3188  2076  318C   	fcall	_verify_word_address
  8563  0D0C  0020               	movlb	0	; select bank0
  8564  0D0D  082E               	movf	?_verify_word_address+1,w
  8565  0D0E  01B6               	clrf	push_i2c_reply_status@reg+1
  8566  0D0F  07B6               	addwf	push_i2c_reply_status@reg+1,f
  8567  0D10  082D               	movf	?_verify_word_address,w
  8568  0D11  01B5               	clrf	push_i2c_reply_status@reg
  8569  0D12  07B5               	addwf	push_i2c_reply_status@reg,f
  8570  0D13                     l5738:	
  8571                           
  8572                           ;i2c_Api.c: 129: }
  8573                           ;i2c_Api.c: 130: if (reg < 0xFF)
  8574  0D13  0836               	movf	push_i2c_reply_status@reg+1,w
  8575  0D14  3A80               	xorlw	128
  8576  0D15  00FF               	movwf	127
  8577  0D16  3080               	movlw	128
  8578  0D17  027F               	subwf	127,w
  8579  0D18  1D03               	skipz
  8580  0D19  2D1C               	goto	u5895
  8581  0D1A  30FF               	movlw	255
  8582  0D1B  0235               	subwf	push_i2c_reply_status@reg,w
  8583  0D1C                     u5895:	
  8584  0D1C  1803               	skipnc
  8585  0D1D  0008               	return
  8586                           
  8587                           ;i2c_Api.c: 131: {
  8588                           ;i2c_Api.c: 132: for (i = 0; i < 6; i++)
  8589  0D1E  0020               	movlb	0	; select bank0
  8590  0D1F  01B8               	clrf	push_i2c_reply_status@i
  8591  0D20  01B9               	clrf	push_i2c_reply_status@i+1
  8592  0D21  2D77               	goto	L5
  8593  0D22                     l5746:	
  8594                           ;i2c_Api.c: 135: {
  8595                           ;i2c_Api.c: 136: case 0xE3:
  8596                           
  8597                           ;i2c_Api.c: 133: {
  8598                           ;i2c_Api.c: 134: switch (reg_add)
  8599                           
  8600                           
  8601                           ;i2c_Api.c: 137: case 0x60:
  8602                           ;i2c_Api.c: 138: case 0xE1:
  8603                           ;i2c_Api.c: 139: case 0xE2:
  8604                           ;i2c_Api.c: 140: case 0x71:
  8605                           ;i2c_Api.c: 141: case 0xE4:
  8606                           ;i2c_Api.c: 144: if (i2c_tx_radd_buff_byte[i] == reg_add)
  8607  0D22  0020               	movlb	0	; select bank0
  8608  0D23  0838               	movf	push_i2c_reply_status@i,w
  8609  0D24  3ED1               	addlw	_i2c_tx_radd_buff_byte& (0+255)
  8610  0D25  0086               	movwf	6
  8611  0D26  0187               	clrf	7
  8612  0D27  0801               	movf	1,w
  8613  0D28  0637               	xorwf	push_i2c_reply_status@reg_add,w
  8614  0D29  1D03               	skipz
  8615  0D2A  2D3D               	goto	l5752
  8616                           
  8617                           ;i2c_Api.c: 145: {
  8618                           ;i2c_Api.c: 146: i2c_tx_radd_buff_byte[i] = reg_add;
  8619  0D2B  0837               	movf	push_i2c_reply_status@reg_add,w
  8620  0D2C  00B4               	movwf	??_push_i2c_reply_status
  8621  0D2D  0838               	movf	push_i2c_reply_status@i,w
  8622  0D2E  3ED1               	addlw	_i2c_tx_radd_buff_byte& (0+255)
  8623  0D2F  0086               	movwf	6
  8624  0D30  0187               	clrf	7
  8625  0D31  0834               	movf	??_push_i2c_reply_status,w
  8626  0D32  0081               	movwf	1
  8627                           
  8628                           ;i2c_Api.c: 147: i2c_tx_data_buff_byte[i] = i2c_event;
  8629  0D33  0833               	movf	push_i2c_reply_status@i2c_event,w
  8630  0D34  00B4               	movwf	??_push_i2c_reply_status
  8631  0D35  0838               	movf	push_i2c_reply_status@i,w
  8632  0D36  3E61               	addlw	_i2c_tx_data_buff_byte& (0+255)
  8633  0D37  0086               	movwf	6
  8634  0D38  3001               	movlw	1	; select bank2/3
  8635  0D39  0087               	movwf	7
  8636  0D3A  0834               	movf	??_push_i2c_reply_status,w
  8637  0D3B  0081               	movwf	1
  8638                           
  8639                           ;i2c_Api.c: 148: return 1;
  8640                           ;	Return value of _push_i2c_reply_status is never used
  8641  0D3C  0008               	return
  8642  0D3D                     l5752:	
  8643                           ;i2c_Api.c: 149: }
  8644                           ;i2c_Api.c: 150: default:
  8645                           
  8646                           
  8647                           ;i2c_Api.c: 153: if (i2c_tx_data_buff_byte[i] == 0xFF)
  8648  0D3D  0838               	movf	push_i2c_reply_status@i,w
  8649  0D3E  3E61               	addlw	_i2c_tx_data_buff_byte& (0+255)
  8650  0D3F  0086               	movwf	6
  8651  0D40  3001               	movlw	1	; select bank2/3
  8652  0D41  0087               	movwf	7
  8653  0D42  0801               	movf	1,w
  8654  0D43  3AFF               	xorlw	255
  8655  0D44  1D03               	skipz
  8656  0D45  2D72               	goto	l5762
  8657                           
  8658                           ;i2c_Api.c: 154: {
  8659                           ;i2c_Api.c: 155: i2c_tx_radd_buff_byte[i] = reg_add;
  8660  0D46  0837               	movf	push_i2c_reply_status@reg_add,w
  8661  0D47  00B4               	movwf	??_push_i2c_reply_status
  8662  0D48  0838               	movf	push_i2c_reply_status@i,w
  8663  0D49  3ED1               	addlw	_i2c_tx_radd_buff_byte& (0+255)
  8664  0D4A  0086               	movwf	6
  8665  0D4B  0187               	clrf	7
  8666  0D4C  0834               	movf	??_push_i2c_reply_status,w
  8667  0D4D  0081               	movwf	1
  8668                           
  8669                           ;i2c_Api.c: 156: i2c_tx_data_buff_byte[i] = i2c_event;
  8670  0D4E  0833               	movf	push_i2c_reply_status@i2c_event,w
  8671  0D4F  00B4               	movwf	??_push_i2c_reply_status
  8672  0D50  0838               	movf	push_i2c_reply_status@i,w
  8673  0D51  3E61               	addlw	_i2c_tx_data_buff_byte& (0+255)
  8674  0D52  0086               	movwf	6
  8675  0D53  3001               	movlw	1	; select bank2/3
  8676  0D54  0087               	movwf	7
  8677  0D55  0834               	movf	??_push_i2c_reply_status,w
  8678  0D56  0081               	movwf	1
  8679                           
  8680                           ;i2c_Api.c: 157: i2c_interrupt_flag++;
  8681  0D57  3001               	movlw	1
  8682  0D58  0021               	movlb	1	; select bank1
  8683  0D59  07A6               	addwf	_i2c_interrupt_flag^(0+128),f
  8684  0D5A  3000               	movlw	0
  8685  0D5B  3DA7               	addwfc	(_i2c_interrupt_flag+1)^(0+128),f
  8686                           
  8687                           ;i2c_Api.c: 158: return 1;
  8688                           ;	Return value of _push_i2c_reply_status is never used
  8689  0D5C  0008               	return
  8690  0D5D                     l5760:	
  8691                           ;i2c_Api.c: 159: }
  8692                           ;i2c_Api.c: 160: }
  8693                           
  8694  0D5D  0020               	movlb	0	; select bank0
  8695  0D5E  0837               	movf	push_i2c_reply_status@reg_add,w
  8696                           
  8697                           ; Switch size 1, requested type "space"
  8698                           ; Number of cases is 6, Range of values is 96 to 228
  8699                           ; switch strategies available:
  8700                           ; Name         Instructions Cycles
  8701                           ; simple_byte           19    10 (average)
  8702                           ; jumptable            263     9 (fixed)
  8703                           ;	Chosen strategy is simple_byte
  8704  0D5F  3A60               	xorlw	96	; case 96
  8705  0D60  1903               	skipnz
  8706  0D61  2D22               	goto	l5746
  8707  0D62  3A11               	xorlw	17	; case 113
  8708  0D63  1903               	skipnz
  8709  0D64  2D22               	goto	l5746
  8710  0D65  3A90               	xorlw	144	; case 225
  8711  0D66  1903               	skipnz
  8712  0D67  2D22               	goto	l5746
  8713  0D68  3A03               	xorlw	3	; case 226
  8714  0D69  1903               	skipnz
  8715  0D6A  2D22               	goto	l5746
  8716  0D6B  3A01               	xorlw	1	; case 227
  8717  0D6C  1903               	skipnz
  8718  0D6D  2D22               	goto	l5746
  8719  0D6E  3A07               	xorlw	7	; case 228
  8720  0D6F  1903               	skipnz
  8721  0D70  2D22               	goto	l5746
  8722  0D71  2D3D               	goto	l5752
  8723  0D72                     l5762:	
  8724  0D72  3001               	movlw	1
  8725  0D73  0020               	movlb	0	; select bank0
  8726  0D74  07B8               	addwf	push_i2c_reply_status@i,f
  8727  0D75  3000               	movlw	0
  8728  0D76  3DB9               	addwfc	push_i2c_reply_status@i+1,f
  8729  0D77                     L5:	
  8730  0D77  0839               	movf	push_i2c_reply_status@i+1,w
  8731  0D78  3A80               	xorlw	128
  8732  0D79  00FF               	movwf	127
  8733  0D7A  3080               	movlw	128
  8734  0D7B  027F               	subwf	127,w
  8735  0D7C  1D03               	skipz
  8736  0D7D  2D80               	goto	u5935
  8737  0D7E  3006               	movlw	6
  8738  0D7F  0238               	subwf	push_i2c_reply_status@i,w
  8739  0D80                     u5935:	
  8740  0D80  1803               	btfsc	3,0
  8741  0D81  0008               	return
  8742  0D82  2D5D               	goto	l5760
  8743  0D83                     __end_of_push_i2c_reply_status:	
  8744                           ;i2c_Api.c: 161: }
  8745                           ;i2c_Api.c: 162: }
  8746                           ;i2c_Api.c: 163: return 0;
  8747                           ;	Return value of _push_i2c_reply_status is never used
  8748                           
  8749                           
  8750                           	psect	text39
  8751  0876                     __ptext39:	
  8752 ;; *************** function _verify_word_address *****************
  8753 ;; Defined at:
  8754 ;;		line 350 in file "i2c_Api.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;  register_add    1    wreg     unsigned char 
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;  register_add    1   16[BANK0 ] unsigned char 
  8759 ;;  i               2   17[BANK0 ] int 
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  2   13[BANK0 ] int 
  8762 ;; Registers used:
  8763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8769 ;;      Params:         0       3       0       0       0       0       0       0
  8770 ;;      Locals:         0       3       0       0       0       0       0       0
  8771 ;;      Temps:          0       0       0       0       0       0       0       0
  8772 ;;      Totals:         0       6       0       0       0       0       0       0
  8773 ;;Total ram usage:        6 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; Hardware stack levels required when called:    4
  8776 ;; This function calls:
  8777 ;;		Nothing
  8778 ;; This function is called by:
  8779 ;;		_push_i2c_reply_status
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           
  8784                           ;psect for function _verify_word_address
  8785  0876                     _verify_word_address:	
  8786                           
  8787                           ;incstack = 0
  8788                           ; Regs used in _verify_word_address: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1]
  8789                           ;verify_word_address@register_add stored from wreg
  8790  0876  0020               	movlb	0	; select bank0
  8791  0877  00B0               	movwf	verify_word_address@register_add
  8792                           
  8793                           ;i2c_Api.c: 351: for (int i = 0; i < 6; i++)
  8794  0878  01B1               	clrf	verify_word_address@i
  8795  0879  01B2               	clrf	verify_word_address@i+1
  8796  087A  0832               	movf	verify_word_address@i+1,w
  8797  087B  3A80               	xorlw	128
  8798  087C  00FF               	movwf	127
  8799  087D  3080               	movlw	128
  8800  087E  027F               	subwf	127,w
  8801  087F  1D03               	skipz
  8802  0880  2883               	goto	u5975
  8803  0881  3006               	movlw	6
  8804  0882  0231               	subwf	verify_word_address@i,w
  8805  0883                     u5975:	
  8806  0883  1803               	btfsc	3,0
  8807  0884  28A5               	goto	l5802
  8808  0885                     l5792:	
  8809                           
  8810                           ;i2c_Api.c: 352: {
  8811                           ;i2c_Api.c: 353: if (register_add == i2c_reg_add_word[i])
  8812  0885  0020               	movlb	0	; select bank0
  8813  0886  0831               	movf	verify_word_address@i,w
  8814  0887  3E68               	addlw	_i2c_reg_add_word& (0+255)
  8815  0888  0086               	movwf	6
  8816  0889  3001               	movlw	1	; select bank2/3
  8817  088A  0087               	movwf	7
  8818  088B  0801               	movf	1,w
  8819  088C  0630               	xorwf	verify_word_address@register_add,w
  8820  088D  1D03               	skipz
  8821  088E  2896               	goto	l5798
  8822                           
  8823                           ;i2c_Api.c: 354: {
  8824                           ;i2c_Api.c: 355: return i;
  8825  088F  0832               	movf	verify_word_address@i+1,w
  8826  0890  01AE               	clrf	?_verify_word_address+1
  8827  0891  07AE               	addwf	?_verify_word_address+1,f
  8828  0892  0831               	movf	verify_word_address@i,w
  8829  0893  01AD               	clrf	?_verify_word_address
  8830  0894  07AD               	addwf	?_verify_word_address,f
  8831  0895  0008               	return
  8832  0896                     l5798:	
  8833  0896  3001               	movlw	1
  8834  0897  07B1               	addwf	verify_word_address@i,f
  8835  0898  3000               	movlw	0
  8836  0899  3DB2               	addwfc	verify_word_address@i+1,f
  8837  089A  0832               	movf	verify_word_address@i+1,w
  8838  089B  3A80               	xorlw	128
  8839  089C  00FF               	movwf	127
  8840  089D  3080               	movlw	128
  8841  089E  027F               	subwf	127,w
  8842  089F  1D03               	skipz
  8843  08A0  28A3               	goto	u5995
  8844  08A1  3006               	movlw	6
  8845  08A2  0231               	subwf	verify_word_address@i,w
  8846  08A3                     u5995:	
  8847  08A3  1C03               	skipc
  8848  08A4  2885               	goto	l5792
  8849  08A5                     l5802:	
  8850                           
  8851                           ;i2c_Api.c: 356: }
  8852                           ;i2c_Api.c: 357: }
  8853                           ;i2c_Api.c: 358: return 0XFF;
  8854  08A5  30FF               	movlw	255
  8855  08A6  0020               	movlb	0	; select bank0
  8856  08A7  00AD               	movwf	?_verify_word_address
  8857  08A8  3000               	movlw	0
  8858  08A9  00AE               	movwf	?_verify_word_address+1
  8859  08AA  0008               	return
  8860  08AB                     __end_of_verify_word_address:	
  8861                           
  8862                           	psect	text40
  8863  0841                     __ptext40:	
  8864 ;; *************** function _verify_byte_address *****************
  8865 ;; Defined at:
  8866 ;;		line 459 in file "i2c_Api.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;  register_add    1    wreg     unsigned char 
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;  register_add    1   16[BANK0 ] unsigned char 
  8871 ;;  i               2   17[BANK0 ] int 
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  2   13[BANK0 ] int 
  8874 ;; Registers used:
  8875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8881 ;;      Params:         0       3       0       0       0       0       0       0
  8882 ;;      Locals:         0       3       0       0       0       0       0       0
  8883 ;;      Temps:          0       0       0       0       0       0       0       0
  8884 ;;      Totals:         0       6       0       0       0       0       0       0
  8885 ;;Total ram usage:        6 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    4
  8888 ;; This function calls:
  8889 ;;		Nothing
  8890 ;; This function is called by:
  8891 ;;		_push_i2c_reply_status
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           
  8896                           ;psect for function _verify_byte_address
  8897  0841                     _verify_byte_address:	
  8898                           
  8899                           ;incstack = 0
  8900                           ; Regs used in _verify_byte_address: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1]
  8901                           ;verify_byte_address@register_add stored from wreg
  8902  0841  0020               	movlb	0	; select bank0
  8903  0842  00B0               	movwf	verify_byte_address@register_add
  8904                           
  8905                           ;i2c_Api.c: 460: for (int i = 0; i < 36; i++)
  8906  0843  01B1               	clrf	verify_byte_address@i
  8907  0844  01B2               	clrf	verify_byte_address@i+1
  8908  0845  0832               	movf	verify_byte_address@i+1,w
  8909  0846  3A80               	xorlw	128
  8910  0847  00FF               	movwf	127
  8911  0848  3080               	movlw	128
  8912  0849  027F               	subwf	127,w
  8913  084A  1D03               	skipz
  8914  084B  284E               	goto	u5945
  8915  084C  3024               	movlw	36
  8916  084D  0231               	subwf	verify_byte_address@i,w
  8917  084E                     u5945:	
  8918  084E  1803               	btfsc	3,0
  8919  084F  2870               	goto	l5782
  8920  0850                     l5772:	
  8921                           
  8922                           ;i2c_Api.c: 461: {
  8923                           ;i2c_Api.c: 462: if (register_add == i2c_reg_add_byte[i])
  8924  0850  0020               	movlb	0	; select bank0
  8925  0851  0831               	movf	verify_byte_address@i,w
  8926  0852  3EA0               	addlw	_i2c_reg_add_byte& (0+255)
  8927  0853  0086               	movwf	6
  8928  0854  3001               	movlw	1	; select bank3/4
  8929  0855  0087               	movwf	7
  8930  0856  0801               	movf	1,w
  8931  0857  0630               	xorwf	verify_byte_address@register_add,w
  8932  0858  1D03               	skipz
  8933  0859  2861               	goto	l5778
  8934                           
  8935                           ;i2c_Api.c: 463: {
  8936                           ;i2c_Api.c: 464: return i;
  8937  085A  0832               	movf	verify_byte_address@i+1,w
  8938  085B  01AE               	clrf	?_verify_byte_address+1
  8939  085C  07AE               	addwf	?_verify_byte_address+1,f
  8940  085D  0831               	movf	verify_byte_address@i,w
  8941  085E  01AD               	clrf	?_verify_byte_address
  8942  085F  07AD               	addwf	?_verify_byte_address,f
  8943  0860  0008               	return
  8944  0861                     l5778:	
  8945  0861  3001               	movlw	1
  8946  0862  07B1               	addwf	verify_byte_address@i,f
  8947  0863  3000               	movlw	0
  8948  0864  3DB2               	addwfc	verify_byte_address@i+1,f
  8949  0865  0832               	movf	verify_byte_address@i+1,w
  8950  0866  3A80               	xorlw	128
  8951  0867  00FF               	movwf	127
  8952  0868  3080               	movlw	128
  8953  0869  027F               	subwf	127,w
  8954  086A  1D03               	skipz
  8955  086B  286E               	goto	u5965
  8956  086C  3024               	movlw	36
  8957  086D  0231               	subwf	verify_byte_address@i,w
  8958  086E                     u5965:	
  8959  086E  1C03               	skipc
  8960  086F  2850               	goto	l5772
  8961  0870                     l5782:	
  8962                           
  8963                           ;i2c_Api.c: 465: }
  8964                           ;i2c_Api.c: 466: }
  8965                           ;i2c_Api.c: 467: return 0XFF;
  8966  0870  30FF               	movlw	255
  8967  0871  0020               	movlb	0	; select bank0
  8968  0872  00AD               	movwf	?_verify_byte_address
  8969  0873  3000               	movlw	0
  8970  0874  00AE               	movwf	?_verify_byte_address+1
  8971  0875  0008               	return
  8972  0876                     __end_of_verify_byte_address:	
  8973                           
  8974                           	psect	text41
  8975  1608                     __ptext41:	
  8976 ;; *************** function _init_keypad *****************
  8977 ;; Defined at:
  8978 ;;		line 23 in file "keypad_Api.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;		None
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;		None
  8983 ;; Return value:  Size  Location     Type
  8984 ;;		None               void
  8985 ;; Registers used:
  8986 ;;		None
  8987 ;; Tracked objects:
  8988 ;;		On entry : 0/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8992 ;;      Params:         0       0       0       0       0       0       0       0
  8993 ;;      Locals:         0       0       0       0       0       0       0       0
  8994 ;;      Temps:          0       0       0       0       0       0       0       0
  8995 ;;      Totals:         0       0       0       0       0       0       0       0
  8996 ;;Total ram usage:        0 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; Hardware stack levels required when called:    4
  8999 ;; This function calls:
  9000 ;;		Nothing
  9001 ;; This function is called by:
  9002 ;;		_main
  9003 ;; This function uses a non-reentrant model
  9004 ;;
  9005                           
  9006                           
  9007                           ;psect for function _init_keypad
  9008  1608                     _init_keypad:	
  9009                           
  9010                           ;keypad_Api.c: 25: TRISBbits.TRISB0 = 0;
  9011                           
  9012                           ;incstack = 0
  9013                           ; Regs used in _init_keypad: []
  9014  1608  0021               	movlb	1	; select bank1
  9015  1609  100D               	bcf	13,0	;volatile
  9016                           
  9017                           ;keypad_Api.c: 26: TRISBbits.TRISB1 = 0;
  9018  160A  108D               	bcf	13,1	;volatile
  9019                           
  9020                           ;keypad_Api.c: 27: TRISBbits.TRISB5 = 0;
  9021  160B  128D               	bcf	13,5	;volatile
  9022                           
  9023                           ;keypad_Api.c: 29: TRISAbits.TRISA7 = 0;
  9024  160C  138C               	bcf	12,7	;volatile
  9025                           
  9026                           ;keypad_Api.c: 30: TRISEbits.TRISE0 = 0;
  9027  160D  1010               	bcf	16,0	;volatile
  9028                           
  9029                           ;keypad_Api.c: 31: TRISEbits.TRISE1 = 0;
  9030  160E  1090               	bcf	16,1	;volatile
  9031                           
  9032                           ;keypad_Api.c: 32: TRISEbits.TRISE2 = 0;
  9033  160F  1110               	bcf	16,2	;volatile
  9034                           
  9035                           ;keypad_Api.c: 35: ANSELBbits.ANSB0 = 0;
  9036  1610  0023               	movlb	3	; select bank3
  9037  1611  100D               	bcf	13,0	;volatile
  9038                           
  9039                           ;keypad_Api.c: 36: ANSELBbits.ANSB1 = 0;
  9040  1612  108D               	bcf	13,1	;volatile
  9041                           
  9042                           ;keypad_Api.c: 37: ANSELBbits.ANSB5 = 0;
  9043  1613  128D               	bcf	13,5	;volatile
  9044                           
  9045                           ;keypad_Api.c: 40: ANSELEbits.ANSE0 = 0;
  9046  1614  1010               	bcf	16,0	;volatile
  9047                           
  9048                           ;keypad_Api.c: 41: ANSELEbits.ANSE1 = 0;
  9049  1615  1090               	bcf	16,1	;volatile
  9050                           
  9051                           ;keypad_Api.c: 42: ANSELEbits.ANSE2 = 0;
  9052  1616  1110               	bcf	16,2	;volatile
  9053  1617  0008               	return
  9054  1618                     __end_of_init_keypad:	
  9055                           
  9056                           	psect	text42
  9057  1590                     __ptext42:	
  9058 ;; *************** function _init_mcu *****************
  9059 ;; Defined at:
  9060 ;;		line 591 in file "main.c"
  9061 ;; Parameters:    Size  Location     Type
  9062 ;;		None
  9063 ;; Auto vars:     Size  Location     Type
  9064 ;;		None
  9065 ;; Return value:  Size  Location     Type
  9066 ;;		None               void
  9067 ;; Registers used:
  9068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9069 ;; Tracked objects:
  9070 ;;		On entry : 0/0
  9071 ;;		On exit  : 0/0
  9072 ;;		Unchanged: 0/0
  9073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9074 ;;      Params:         0       0       0       0       0       0       0       0
  9075 ;;      Locals:         0       0       0       0       0       0       0       0
  9076 ;;      Temps:          0       0       0       0       0       0       0       0
  9077 ;;      Totals:         0       0       0       0       0       0       0       0
  9078 ;;Total ram usage:        0 bytes
  9079 ;; Hardware stack levels used:    1
  9080 ;; Hardware stack levels required when called:    6
  9081 ;; This function calls:
  9082 ;;		_init_gpio
  9083 ;;		_init_internal_clock
  9084 ;;		_init_i2c
  9085 ;; This function is called by:
  9086 ;;		_main
  9087 ;; This function uses a non-reentrant model
  9088 ;;
  9089                           
  9090                           
  9091                           ;psect for function _init_mcu
  9092  1590                     _init_mcu:	
  9093                           
  9094                           ;main.c: 592: init_internal_clock();
  9095                           
  9096                           ;incstack = 0
  9097                           ; Regs used in _init_mcu: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9098  1590  3195  257F  3195   	fcall	_init_internal_clock
  9099                           
  9100                           ;main.c: 593: init_gpio();
  9101  1593  3197  272A  3195   	fcall	_init_gpio
  9102                           
  9103                           ;main.c: 595: init_i2c();
  9104  1596  318E  261A         	fcall	_init_i2c
  9105  1598  0008               	return
  9106  1599                     __end_of_init_mcu:	
  9107                           
  9108                           	psect	text43
  9109  0E1A                     __ptext43:	
  9110 ;; *************** function _init_i2c *****************
  9111 ;; Defined at:
  9112 ;;		line 37 in file "i2c_Api.c"
  9113 ;; Parameters:    Size  Location     Type
  9114 ;;		None
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;		None
  9117 ;; Return value:  Size  Location     Type
  9118 ;;		None               void
  9119 ;; Registers used:
  9120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9126 ;;      Params:         0       0       0       0       0       0       0       0
  9127 ;;      Locals:         0       0       0       0       0       0       0       0
  9128 ;;      Temps:          0       0       0       0       0       0       0       0
  9129 ;;      Totals:         0       0       0       0       0       0       0       0
  9130 ;;Total ram usage:        0 bytes
  9131 ;; Hardware stack levels used:    1
  9132 ;; Hardware stack levels required when called:    5
  9133 ;; This function calls:
  9134 ;;		_memset
  9135 ;; This function is called by:
  9136 ;;		_init_mcu
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           
  9141                           ;psect for function _init_i2c
  9142  0E1A                     _init_i2c:	
  9143                           
  9144                           ;i2c_Api.c: 39: SSPADD = 0x33 << 1;
  9145                           
  9146                           ;incstack = 0
  9147                           ; Regs used in _init_i2c: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9148  0E1A  3066               	movlw	102
  9149  0E1B  0024               	movlb	4	; select bank4
  9150  0E1C  0092               	movwf	18	;volatile
  9151                           
  9152                           ;i2c_Api.c: 41: TRISCbits.TRISC4 = 1;
  9153  0E1D  0021               	movlb	1	; select bank1
  9154  0E1E  160E               	bsf	14,4	;volatile
  9155                           
  9156                           ;i2c_Api.c: 42: TRISCbits.TRISC3 = 1;
  9157  0E1F  158E               	bsf	14,3	;volatile
  9158                           
  9159                           ;i2c_Api.c: 43: TRISCbits.TRISC2 = 0;
  9160  0E20  110E               	bcf	14,2	;volatile
  9161                           
  9162                           ;i2c_Api.c: 44: LATCbits.LATC4 = 1;
  9163  0E21  0022               	movlb	2	; select bank2
  9164  0E22  160E               	bsf	14,4	;volatile
  9165                           
  9166                           ;i2c_Api.c: 45: LATCbits.LATC3 = 1;
  9167  0E23  158E               	bsf	14,3	;volatile
  9168                           
  9169                           ;i2c_Api.c: 46: ANSELCbits.ANSC4 = 0;
  9170  0E24  0023               	movlb	3	; select bank3
  9171  0E25  120E               	bcf	14,4	;volatile
  9172                           
  9173                           ;i2c_Api.c: 47: ANSELCbits.ANSC3 = 0;
  9174  0E26  118E               	bcf	14,3	;volatile
  9175                           
  9176                           ;i2c_Api.c: 48: ANSELCbits.ANSC2 = 0;
  9177  0E27  110E               	bcf	14,2	;volatile
  9178                           
  9179                           ;i2c_Api.c: 51: SSPSTAT = 0x00;
  9180  0E28  0024               	movlb	4	; select bank4
  9181  0E29  0194               	clrf	20	;volatile
  9182                           
  9183                           ;i2c_Api.c: 52: SSPSTATbits.SMP = 1;
  9184  0E2A  1794               	bsf	20,7	;volatile
  9185                           
  9186                           ;i2c_Api.c: 53: SSPSTATbits.CKE = 1;
  9187  0E2B  1714               	bsf	20,6	;volatile
  9188                           
  9189                           ;i2c_Api.c: 56: SSPCON1 = 0x0E;
  9190  0E2C  300E               	movlw	14
  9191  0E2D  0095               	movwf	21	;volatile
  9192                           
  9193                           ;i2c_Api.c: 57: WCOL = 0;
  9194  0E2E  1395               	bcf	21,7	;volatile
  9195                           
  9196                           ;i2c_Api.c: 58: SSPOV = 1;
  9197  0E2F  1715               	bsf	21,6	;volatile
  9198                           
  9199                           ;i2c_Api.c: 59: SSPEN = 1;
  9200  0E30  1695               	bsf	21,5	;volatile
  9201                           
  9202                           ;i2c_Api.c: 60: CKP = 1;
  9203  0E31  1615               	bsf	21,4	;volatile
  9204                           
  9205                           ;i2c_Api.c: 63: SSPCON2 = 0x00;
  9206  0E32  0196               	clrf	22	;volatile
  9207                           
  9208                           ;i2c_Api.c: 64: ACKDT = 0;
  9209  0E33  1296               	bcf	22,5	;volatile
  9210                           
  9211                           ;i2c_Api.c: 65: ACKEN = 1;
  9212  0E34  1616               	bsf	22,4	;volatile
  9213                           
  9214                           ;i2c_Api.c: 66: SEN = 1;
  9215  0E35  1416               	bsf	22,0	;volatile
  9216                           
  9217                           ;i2c_Api.c: 69: SSPCON3 = 0x00;
  9218  0E36  0197               	clrf	23	;volatile
  9219                           
  9220                           ;i2c_Api.c: 70: PCIE = 1;
  9221  0E37  1717               	bsf	23,6	;volatile
  9222                           
  9223                           ;i2c_Api.c: 71: SCIE = 1;
  9224  0E38  1697               	bsf	23,5	;volatile
  9225                           
  9226                           ;i2c_Api.c: 72: BOEN = 1;
  9227  0E39  1617               	bsf	23,4	;volatile
  9228                           
  9229                           ;i2c_Api.c: 73: SDAHT = 0;
  9230  0E3A  1197               	bcf	23,3	;volatile
  9231                           
  9232                           ;i2c_Api.c: 74: SBCDE = 0;
  9233  0E3B  1117               	bcf	23,2	;volatile
  9234                           
  9235                           ;i2c_Api.c: 77: SSPMSK = 0x00;
  9236  0E3C  0193               	clrf	19	;volatile
  9237                           
  9238                           ;i2c_Api.c: 78: SSPMSK = 0xfe;
  9239  0E3D  30FE               	movlw	254
  9240  0E3E  0093               	movwf	19	;volatile
  9241                           
  9242                           ;i2c_Api.c: 82: INTCON = 0x00;
  9243  0E3F  018B               	clrf	11	;volatile
  9244                           
  9245                           ;i2c_Api.c: 83: INTCONbits.PEIE = 1;
  9246  0E40  170B               	bsf	11,6	;volatile
  9247                           
  9248                           ;i2c_Api.c: 84: INTCONbits.GIE = 1;
  9249  0E41  178B               	bsf	11,7	;volatile
  9250                           
  9251                           ;i2c_Api.c: 86: PIE2 = 0x00;
  9252  0E42  0021               	movlb	1	; select bank1
  9253  0E43  0192               	clrf	18	;volatile
  9254                           
  9255                           ;i2c_Api.c: 87: PIE1bits.SSPIE = 1;
  9256  0E44  1591               	bsf	17,3	;volatile
  9257                           
  9258                           ;i2c_Api.c: 89: PIR1bits.SSPIF = 0;
  9259  0E45  0020               	movlb	0	; select bank0
  9260  0E46  1191               	bcf	17,3	;volatile
  9261                           
  9262                           ;i2c_Api.c: 91: memset(i2c_tx_radd_buff_byte, 0xFF, 7);
  9263  0E47  30D1               	movlw	low _i2c_tx_radd_buff_byte
  9264  0E48  00AD               	movwf	?_memset
  9265  0E49  3000               	movlw	high _i2c_tx_radd_buff_byte
  9266  0E4A  00AE               	movwf	?_memset+1
  9267  0E4B  30FF               	movlw	255
  9268  0E4C  00AF               	movwf	?_memset+2
  9269  0E4D  3000               	movlw	0
  9270  0E4E  00B0               	movwf	?_memset+3
  9271  0E4F  3007               	movlw	7
  9272  0E50  00B1               	movwf	?_memset+4
  9273  0E51  3000               	movlw	0
  9274  0E52  00B2               	movwf	?_memset+5
  9275  0E53  3196  26C5  318E   	fcall	_memset
  9276                           
  9277                           ;i2c_Api.c: 92: memset(i2c_tx_data_buff_byte, 0xFF, 7);
  9278  0E56  3061               	movlw	low _i2c_tx_data_buff_byte
  9279  0E57  0020               	movlb	0	; select bank0
  9280  0E58  00AD               	movwf	?_memset
  9281  0E59  3001               	movlw	high _i2c_tx_data_buff_byte
  9282  0E5A  00AE               	movwf	?_memset+1
  9283  0E5B  30FF               	movlw	255
  9284  0E5C  00AF               	movwf	?_memset+2
  9285  0E5D  3000               	movlw	0
  9286  0E5E  00B0               	movwf	?_memset+3
  9287  0E5F  3007               	movlw	7
  9288  0E60  00B1               	movwf	?_memset+4
  9289  0E61  3000               	movlw	0
  9290  0E62  00B2               	movwf	?_memset+5
  9291  0E63  3196  26C5  318E   	fcall	_memset
  9292                           
  9293                           ;i2c_Api.c: 94: memset(i2c_rx_data_buff_byte, 0xFB, 7);
  9294  0E66  304C               	movlw	low _i2c_rx_data_buff_byte
  9295  0E67  0020               	movlb	0	; select bank0
  9296  0E68  00AD               	movwf	?_memset
  9297  0E69  3001               	movlw	high _i2c_rx_data_buff_byte
  9298  0E6A  00AE               	movwf	?_memset+1
  9299  0E6B  30FB               	movlw	251
  9300  0E6C  00AF               	movwf	?_memset+2
  9301  0E6D  3000               	movlw	0
  9302  0E6E  00B0               	movwf	?_memset+3
  9303  0E6F  3007               	movlw	7
  9304  0E70  00B1               	movwf	?_memset+4
  9305  0E71  3000               	movlw	0
  9306  0E72  00B2               	movwf	?_memset+5
  9307  0E73  3196  26C5  318E   	fcall	_memset
  9308                           
  9309                           ;i2c_Api.c: 95: memset(i2c_rx_radd_buff_byte, 0xFB, 7 * 2);
  9310  0E76  303E               	movlw	low _i2c_rx_radd_buff_byte
  9311  0E77  0020               	movlb	0	; select bank0
  9312  0E78  00AD               	movwf	?_memset
  9313  0E79  3001               	movlw	high _i2c_rx_radd_buff_byte
  9314  0E7A  00AE               	movwf	?_memset+1
  9315  0E7B  30FB               	movlw	251
  9316  0E7C  00AF               	movwf	?_memset+2
  9317  0E7D  3000               	movlw	0
  9318  0E7E  00B0               	movwf	?_memset+3
  9319  0E7F  300E               	movlw	14
  9320  0E80  00B1               	movwf	?_memset+4
  9321  0E81  3000               	movlw	0
  9322  0E82  00B2               	movwf	?_memset+5
  9323  0E83  3196  26C5  318E   	fcall	_memset
  9324                           
  9325                           ;i2c_Api.c: 97: memset(i2c_rx_radd_buff_word, 0xFB, 7 * 2);
  9326  0E86  30D1               	movlw	low _i2c_rx_radd_buff_word
  9327  0E87  0020               	movlb	0	; select bank0
  9328  0E88  00AD               	movwf	?_memset
  9329  0E89  3001               	movlw	high _i2c_rx_radd_buff_word
  9330  0E8A  00AE               	movwf	?_memset+1
  9331  0E8B  30FB               	movlw	251
  9332  0E8C  00AF               	movwf	?_memset+2
  9333  0E8D  3000               	movlw	0
  9334  0E8E  00B0               	movwf	?_memset+3
  9335  0E8F  300E               	movlw	14
  9336  0E90  00B1               	movwf	?_memset+4
  9337  0E91  3000               	movlw	0
  9338  0E92  00B2               	movwf	?_memset+5
  9339  0E93  3196  26C5  318E   	fcall	_memset
  9340                           
  9341                           ;i2c_Api.c: 98: memset(i2c_rx_data_buff_word_lsb, 0xFB, 7);
  9342  0E96  3053               	movlw	low _i2c_rx_data_buff_word_lsb
  9343  0E97  0020               	movlb	0	; select bank0
  9344  0E98  00AD               	movwf	?_memset
  9345  0E99  3001               	movlw	high _i2c_rx_data_buff_word_lsb
  9346  0E9A  00AE               	movwf	?_memset+1
  9347  0E9B  30FB               	movlw	251
  9348  0E9C  00AF               	movwf	?_memset+2
  9349  0E9D  3000               	movlw	0
  9350  0E9E  00B0               	movwf	?_memset+3
  9351  0E9F  3007               	movlw	7
  9352  0EA0  00B1               	movwf	?_memset+4
  9353  0EA1  3000               	movlw	0
  9354  0EA2  00B2               	movwf	?_memset+5
  9355  0EA3  3196  26C5  318E   	fcall	_memset
  9356                           
  9357                           ;i2c_Api.c: 99: memset(i2c_rx_data_buff_word_msb, 0xFB, 7);
  9358  0EA6  305A               	movlw	low _i2c_rx_data_buff_word_msb
  9359  0EA7  0020               	movlb	0	; select bank0
  9360  0EA8  00AD               	movwf	?_memset
  9361  0EA9  3001               	movlw	high _i2c_rx_data_buff_word_msb
  9362  0EAA  00AE               	movwf	?_memset+1
  9363  0EAB  30FB               	movlw	251
  9364  0EAC  00AF               	movwf	?_memset+2
  9365  0EAD  3000               	movlw	0
  9366  0EAE  00B0               	movwf	?_memset+3
  9367  0EAF  3007               	movlw	7
  9368  0EB0  00B1               	movwf	?_memset+4
  9369  0EB1  3000               	movlw	0
  9370  0EB2  00B2               	movwf	?_memset+5
  9371  0EB3  3196  26C5         	fcall	_memset
  9372                           
  9373                           ;i2c_Api.c: 103: PORTCbits.RC2 = 0;
  9374  0EB5  0020               	movlb	0	; select bank0
  9375  0EB6  110E               	bcf	14,2	;volatile
  9376  0EB7  0008               	return
  9377  0EB8                     __end_of_init_i2c:	
  9378                           
  9379                           	psect	text44
  9380  16C5                     __ptext44:	
  9381 ;; *************** function _memset *****************
  9382 ;; Defined at:
  9383 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/memset.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;  p1              2   13[BANK0 ] PTR void 
  9386 ;;		 -> i2c_rx_data_buff_word_msb(7), i2c_rx_data_buff_word_lsb(7), i2c_rx_radd_buff_word(14), i2c_rx_radd_buff_byte(14)
      +, 
  9387 ;;		 -> i2c_rx_data_buff_byte(7), i2c_tx_data_buff_byte(7), i2c_tx_radd_buff_byte(7), 
  9388 ;;  c               2   15[BANK0 ] int 
  9389 ;;  n               2   17[BANK0 ] unsigned int 
  9390 ;; Auto vars:     Size  Location     Type
  9391 ;;  p               2   20[BANK0 ] PTR unsigned char 
  9392 ;;		 -> i2c_rx_data_buff_word_msb(7), i2c_rx_data_buff_word_lsb(7), i2c_rx_radd_buff_word(14), i2c_rx_radd_buff_byte(14)
      +, 
  9393 ;;		 -> i2c_rx_data_buff_byte(7), i2c_tx_data_buff_byte(7), i2c_tx_radd_buff_byte(7), 
  9394 ;; Return value:  Size  Location     Type
  9395 ;;                  2   13[BANK0 ] PTR void 
  9396 ;; Registers used:
  9397 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9398 ;; Tracked objects:
  9399 ;;		On entry : 0/0
  9400 ;;		On exit  : 0/0
  9401 ;;		Unchanged: 0/0
  9402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9403 ;;      Params:         0       6       0       0       0       0       0       0
  9404 ;;      Locals:         0       2       0       0       0       0       0       0
  9405 ;;      Temps:          0       1       0       0       0       0       0       0
  9406 ;;      Totals:         0       9       0       0       0       0       0       0
  9407 ;;Total ram usage:        9 bytes
  9408 ;; Hardware stack levels used:    1
  9409 ;; Hardware stack levels required when called:    4
  9410 ;; This function calls:
  9411 ;;		Nothing
  9412 ;; This function is called by:
  9413 ;;		_init_i2c
  9414 ;; This function uses a non-reentrant model
  9415 ;;
  9416                           
  9417                           
  9418                           ;psect for function _memset
  9419  16C5                     _memset:	
  9420                           
  9421                           ;incstack = 0
  9422                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9423  16C5  0020               	movlb	0	; select bank0
  9424  16C6  082E               	movf	memset@p1+1,w
  9425  16C7  01B5               	clrf	memset@p+1
  9426  16C8  07B5               	addwf	memset@p+1,f
  9427  16C9  082D               	movf	memset@p1,w
  9428  16CA  01B4               	clrf	memset@p
  9429  16CB  07B4               	addwf	memset@p,f
  9430  16CC                     l5730:	
  9431  16CC  3001               	movlw	1
  9432  16CD  02B1               	subwf	memset@n,f
  9433  16CE  3000               	movlw	0
  9434  16CF  3BB2               	subwfb	memset@n+1,f
  9435  16D0  30FF               	movlw	255
  9436  16D1  0632               	xorwf	memset@n+1,w
  9437  16D2  1D03               	skipz
  9438  16D3  2ED6               	goto	u5875
  9439  16D4  30FF               	movlw	255
  9440  16D5  0631               	xorwf	memset@n,w
  9441  16D6                     u5875:	
  9442  16D6  1903               	btfsc	3,2
  9443  16D7  0008               	return
  9444  16D8  082F               	movf	memset@c,w
  9445  16D9  00B3               	movwf	??_memset
  9446  16DA  0834               	movf	memset@p,w
  9447  16DB  0086               	movwf	6
  9448  16DC  0835               	movf	memset@p+1,w
  9449  16DD  0087               	movwf	7
  9450  16DE  0833               	movf	??_memset,w
  9451  16DF  0081               	movwf	1
  9452  16E0  3001               	movlw	1
  9453  16E1  07B4               	addwf	memset@p,f
  9454  16E2  3000               	movlw	0
  9455  16E3  3DB5               	addwfc	memset@p+1,f
  9456  16E4  2ECC               	goto	l5730
  9457  16E5                     __end_of_memset:	
  9458                           ;	Return value of _memset is never used
  9459                           
  9460                           
  9461                           	psect	text45
  9462  157F                     __ptext45:	
  9463 ;; *************** function _init_internal_clock *****************
  9464 ;; Defined at:
  9465 ;;		line 7 in file "internal_clock_api.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;		None
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;		None
  9470 ;; Return value:  Size  Location     Type
  9471 ;;		None               void
  9472 ;; Registers used:
  9473 ;;		wreg, status,2, status,0
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/0
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9479 ;;      Params:         0       0       0       0       0       0       0       0
  9480 ;;      Locals:         0       0       0       0       0       0       0       0
  9481 ;;      Temps:          0       0       0       0       0       0       0       0
  9482 ;;      Totals:         0       0       0       0       0       0       0       0
  9483 ;;Total ram usage:        0 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:    4
  9486 ;; This function calls:
  9487 ;;		Nothing
  9488 ;; This function is called by:
  9489 ;;		_init_mcu
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           
  9494                           ;psect for function _init_internal_clock
  9495  157F                     _init_internal_clock:	
  9496                           
  9497                           ;internal_clock_api.c: 8: OSCCONbits.IRCF = 0b1101;
  9498                           
  9499                           ;incstack = 0
  9500                           ; Regs used in _init_internal_clock: [wreg+status,2+status,0]
  9501  157F  0021               	movlb	1	; select bank1
  9502  1580  0819               	movf	25,w	;volatile
  9503  1581  3987               	andlw	-121
  9504  1582  3868               	iorlw	104
  9505  1583  0099               	movwf	25	;volatile
  9506                           
  9507                           ;internal_clock_api.c: 11: OSCCONbits.SCS = 0b11;
  9508  1584  3003               	movlw	3
  9509  1585  0499               	iorwf	25,f	;volatile
  9510  1586  0008               	return
  9511  1587                     __end_of_init_internal_clock:	
  9512                           
  9513                           	psect	text46
  9514  172A                     __ptext46:	
  9515 ;; *************** function _init_gpio *****************
  9516 ;; Defined at:
  9517 ;;		line 573 in file "main.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;		None
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;		None
  9522 ;; Return value:  Size  Location     Type
  9523 ;;		None               void
  9524 ;; Registers used:
  9525 ;;		status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9531 ;;      Params:         0       0       0       0       0       0       0       0
  9532 ;;      Locals:         0       0       0       0       0       0       0       0
  9533 ;;      Temps:          0       0       0       0       0       0       0       0
  9534 ;;      Totals:         0       0       0       0       0       0       0       0
  9535 ;;Total ram usage:        0 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    5
  9538 ;; This function calls:
  9539 ;;		_init_auto_on
  9540 ;;		_init_relay1
  9541 ;;		_init_relay2
  9542 ;;		_init_led_light
  9543 ;;		_init_led_flash_en1
  9544 ;;		_init_led_flash_en2
  9545 ;;		_init_led_ol
  9546 ;;		_init_led_lock
  9547 ;;		_init_led_unlock
  9548 ;;		_init_led_phone_button
  9549 ;;		_init_audio_switch
  9550 ;; This function is called by:
  9551 ;;		_init_mcu
  9552 ;; This function uses a non-reentrant model
  9553 ;;
  9554                           
  9555                           
  9556                           ;psect for function _init_gpio
  9557  172A                     _init_gpio:	
  9558                           
  9559                           ;main.c: 574: ANSELA = 0x00;
  9560                           
  9561                           ;incstack = 0
  9562                           ; Regs used in _init_gpio: [status,2+status,0+pclath+cstack]
  9563  172A  0023               	movlb	3	; select bank3
  9564  172B  018C               	clrf	12	;volatile
  9565                           
  9566                           ;main.c: 575: ANSELB = 0x00;
  9567  172C  018D               	clrf	13	;volatile
  9568                           
  9569                           ;main.c: 576: ANSELC = 0x00;
  9570  172D  018E               	clrf	14	;volatile
  9571                           
  9572                           ;main.c: 577: ANSELD = 0x00;
  9573  172E  018F               	clrf	15	;volatile
  9574                           
  9575                           ;main.c: 578: init_auto_on();
  9576  172F  3195  252B  3197   	fcall	_init_auto_on
  9577                           
  9578                           ;main.c: 579: init_relay1();
  9579  1732  3195  2532  3197   	fcall	_init_relay1
  9580                           
  9581                           ;main.c: 580: init_relay2();
  9582  1735  3195  2539  3197   	fcall	_init_relay2
  9583                           
  9584                           ;main.c: 581: init_led_light();
  9585  1738  3195  2540  3197   	fcall	_init_led_light
  9586                           
  9587                           ;main.c: 582: init_led_flash_en1();
  9588  173B  3195  2505  3197   	fcall	_init_led_flash_en1
  9589                           
  9590                           ;main.c: 583: init_led_flash_en2();
  9591  173E  3195  2547  3197   	fcall	_init_led_flash_en2
  9592                           
  9593                           ;main.c: 584: init_led_ol();
  9594  1741  3195  250A  3197   	fcall	_init_led_ol
  9595                           
  9596                           ;main.c: 585: init_led_lock();
  9597  1744  3195  250F  3197   	fcall	_init_led_lock
  9598                           
  9599                           ;main.c: 586: init_led_unlock();
  9600  1747  3195  2514  3197   	fcall	_init_led_unlock
  9601                           
  9602                           ;main.c: 587: init_led_phone_button();
  9603  174A  3195  254E  3197   	fcall	_init_led_phone_button
  9604                           
  9605                           ;main.c: 588: init_audio_switch();
  9606  174D  3196  263B         	fcall	_init_audio_switch
  9607  174F  0008               	return
  9608  1750                     __end_of_init_gpio:	
  9609                           
  9610                           	psect	text47
  9611  163B                     __ptext47:	
  9612 ;; *************** function _init_audio_switch *****************
  9613 ;; Defined at:
  9614 ;;		line 123 in file "peripherals.c"
  9615 ;; Parameters:    Size  Location     Type
  9616 ;;		None
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;		None
  9619 ;; Return value:  Size  Location     Type
  9620 ;;		None               void
  9621 ;; Registers used:
  9622 ;;		None
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9628 ;;      Params:         0       0       0       0       0       0       0       0
  9629 ;;      Locals:         0       0       0       0       0       0       0       0
  9630 ;;      Temps:          0       0       0       0       0       0       0       0
  9631 ;;      Totals:         0       0       0       0       0       0       0       0
  9632 ;;Total ram usage:        0 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    4
  9635 ;; This function calls:
  9636 ;;		Nothing
  9637 ;; This function is called by:
  9638 ;;		_init_gpio
  9639 ;; This function uses a non-reentrant model
  9640 ;;
  9641                           
  9642                           
  9643                           ;psect for function _init_audio_switch
  9644  163B                     _init_audio_switch:	
  9645                           
  9646                           ;peripherals.c: 124: TRISBbits.TRISB3 = 0;
  9647                           
  9648                           ;incstack = 0
  9649                           ; Regs used in _init_audio_switch: []
  9650  163B  0021               	movlb	1	; select bank1
  9651  163C  118D               	bcf	13,3	;volatile
  9652                           
  9653                           ;peripherals.c: 125: PORTBbits.RB3 = 1;
  9654  163D  0020               	movlb	0	; select bank0
  9655  163E  158D               	bsf	13,3	;volatile
  9656                           
  9657                           ;peripherals.c: 126: ANSELBbits.ANSB3 = 0;
  9658  163F  0023               	movlb	3	; select bank3
  9659  1640  118D               	bcf	13,3	;volatile
  9660                           
  9661                           ;peripherals.c: 127: TRISBbits.TRISB2 = 0;
  9662  1641  0021               	movlb	1	; select bank1
  9663  1642  110D               	bcf	13,2	;volatile
  9664                           
  9665                           ;peripherals.c: 128: PORTBbits.RB2 = 1;
  9666  1643  0020               	movlb	0	; select bank0
  9667  1644  150D               	bsf	13,2	;volatile
  9668                           
  9669                           ;peripherals.c: 129: ANSELBbits.ANSB2 = 0;
  9670  1645  0023               	movlb	3	; select bank3
  9671  1646  110D               	bcf	13,2	;volatile
  9672                           
  9673                           ;peripherals.c: 130: TRISBbits.TRISB4 = 0;
  9674  1647  0021               	movlb	1	; select bank1
  9675  1648  120D               	bcf	13,4	;volatile
  9676                           
  9677                           ;peripherals.c: 131: PORTBbits.RB4 = 1;
  9678  1649  0020               	movlb	0	; select bank0
  9679  164A  160D               	bsf	13,4	;volatile
  9680                           
  9681                           ;peripherals.c: 132: ANSELBbits.ANSB4 = 0;
  9682  164B  0023               	movlb	3	; select bank3
  9683  164C  120D               	bcf	13,4	;volatile
  9684  164D  0008               	return
  9685  164E                     __end_of_init_audio_switch:	
  9686                           
  9687                           	psect	text48
  9688  154E                     __ptext48:	
  9689 ;; *************** function _init_led_phone_button *****************
  9690 ;; Defined at:
  9691 ;;		line 116 in file "peripherals.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;		None
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;		None
  9696 ;; Return value:  Size  Location     Type
  9697 ;;		None               void
  9698 ;; Registers used:
  9699 ;;		None
  9700 ;; Tracked objects:
  9701 ;;		On entry : 0/0
  9702 ;;		On exit  : 0/0
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9705 ;;      Params:         0       0       0       0       0       0       0       0
  9706 ;;      Locals:         0       0       0       0       0       0       0       0
  9707 ;;      Temps:          0       0       0       0       0       0       0       0
  9708 ;;      Totals:         0       0       0       0       0       0       0       0
  9709 ;;Total ram usage:        0 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:    4
  9712 ;; This function calls:
  9713 ;;		Nothing
  9714 ;; This function is called by:
  9715 ;;		_init_gpio
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           
  9720                           ;psect for function _init_led_phone_button
  9721  154E                     _init_led_phone_button:	
  9722                           
  9723                           ;peripherals.c: 117: TRISEbits.TRISE1 = 0;
  9724                           
  9725                           ;incstack = 0
  9726                           ; Regs used in _init_led_phone_button: []
  9727  154E  0021               	movlb	1	; select bank1
  9728  154F  1090               	bcf	16,1	;volatile
  9729                           
  9730                           ;peripherals.c: 118: PORTEbits.RE1 = 0;
  9731  1550  0020               	movlb	0	; select bank0
  9732  1551  1090               	bcf	16,1	;volatile
  9733                           
  9734                           ;peripherals.c: 119: ANSELEbits.ANSE1 = 0;
  9735  1552  0023               	movlb	3	; select bank3
  9736  1553  1090               	bcf	16,1	;volatile
  9737  1554  0008               	return
  9738  1555                     __end_of_init_led_phone_button:	
  9739                           
  9740                           	psect	text49
  9741  1514                     __ptext49:	
  9742 ;; *************** function _init_led_unlock *****************
  9743 ;; Defined at:
  9744 ;;		line 102 in file "peripherals.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;		None
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;		None
  9749 ;; Return value:  Size  Location     Type
  9750 ;;		None               void
  9751 ;; Registers used:
  9752 ;;		None
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9758 ;;      Params:         0       0       0       0       0       0       0       0
  9759 ;;      Locals:         0       0       0       0       0       0       0       0
  9760 ;;      Temps:          0       0       0       0       0       0       0       0
  9761 ;;      Totals:         0       0       0       0       0       0       0       0
  9762 ;;Total ram usage:        0 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:    4
  9765 ;; This function calls:
  9766 ;;		Nothing
  9767 ;; This function is called by:
  9768 ;;		_init_gpio
  9769 ;; This function uses a non-reentrant model
  9770 ;;
  9771                           
  9772                           
  9773                           ;psect for function _init_led_unlock
  9774  1514                     _init_led_unlock:	
  9775                           
  9776                           ;peripherals.c: 103: TRISAbits.TRISA6 = 0;
  9777                           
  9778                           ;incstack = 0
  9779                           ; Regs used in _init_led_unlock: []
  9780  1514  0021               	movlb	1	; select bank1
  9781  1515  130C               	bcf	12,6	;volatile
  9782                           
  9783                           ;peripherals.c: 104: PORTAbits.RA6 = 0;
  9784  1516  0020               	movlb	0	; select bank0
  9785  1517  130C               	bcf	12,6	;volatile
  9786  1518  0008               	return
  9787  1519                     __end_of_init_led_unlock:	
  9788                           
  9789                           	psect	text50
  9790  150F                     __ptext50:	
  9791 ;; *************** function _init_led_lock *****************
  9792 ;; Defined at:
  9793 ;;		line 95 in file "peripherals.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;		None
  9798 ;; Return value:  Size  Location     Type
  9799 ;;		None               void
  9800 ;; Registers used:
  9801 ;;		None
  9802 ;; Tracked objects:
  9803 ;;		On entry : 0/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9807 ;;      Params:         0       0       0       0       0       0       0       0
  9808 ;;      Locals:         0       0       0       0       0       0       0       0
  9809 ;;      Temps:          0       0       0       0       0       0       0       0
  9810 ;;      Totals:         0       0       0       0       0       0       0       0
  9811 ;;Total ram usage:        0 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:    4
  9814 ;; This function calls:
  9815 ;;		Nothing
  9816 ;; This function is called by:
  9817 ;;		_init_gpio
  9818 ;; This function uses a non-reentrant model
  9819 ;;
  9820                           
  9821                           
  9822                           ;psect for function _init_led_lock
  9823  150F                     _init_led_lock:	
  9824                           
  9825                           ;peripherals.c: 96: TRISAbits.TRISA5 = 0;
  9826                           
  9827                           ;incstack = 0
  9828                           ; Regs used in _init_led_lock: []
  9829  150F  0021               	movlb	1	; select bank1
  9830  1510  128C               	bcf	12,5	;volatile
  9831                           
  9832                           ;peripherals.c: 97: PORTAbits.RA5 = 0;
  9833  1511  0020               	movlb	0	; select bank0
  9834  1512  128C               	bcf	12,5	;volatile
  9835  1513  0008               	return
  9836  1514                     __end_of_init_led_lock:	
  9837                           
  9838                           	psect	text51
  9839  150A                     __ptext51:	
  9840 ;; *************** function _init_led_ol *****************
  9841 ;; Defined at:
  9842 ;;		line 88 in file "peripherals.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;		None
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;		None
  9847 ;; Return value:  Size  Location     Type
  9848 ;;		None               void
  9849 ;; Registers used:
  9850 ;;		None
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9856 ;;      Params:         0       0       0       0       0       0       0       0
  9857 ;;      Locals:         0       0       0       0       0       0       0       0
  9858 ;;      Temps:          0       0       0       0       0       0       0       0
  9859 ;;      Totals:         0       0       0       0       0       0       0       0
  9860 ;;Total ram usage:        0 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    4
  9863 ;; This function calls:
  9864 ;;		Nothing
  9865 ;; This function is called by:
  9866 ;;		_init_gpio
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           
  9871                           ;psect for function _init_led_ol
  9872  150A                     _init_led_ol:	
  9873                           
  9874                           ;peripherals.c: 89: TRISAbits.TRISA4 = 0;
  9875                           
  9876                           ;incstack = 0
  9877                           ; Regs used in _init_led_ol: []
  9878  150A  0021               	movlb	1	; select bank1
  9879  150B  120C               	bcf	12,4	;volatile
  9880                           
  9881                           ;peripherals.c: 90: PORTAbits.RA4 = 0;
  9882  150C  0020               	movlb	0	; select bank0
  9883  150D  120C               	bcf	12,4	;volatile
  9884  150E  0008               	return
  9885  150F                     __end_of_init_led_ol:	
  9886                           
  9887                           	psect	text52
  9888  1547                     __ptext52:	
  9889 ;; *************** function _init_led_flash_en2 *****************
  9890 ;; Defined at:
  9891 ;;		line 81 in file "peripherals.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;		None
  9894 ;; Auto vars:     Size  Location     Type
  9895 ;;		None
  9896 ;; Return value:  Size  Location     Type
  9897 ;;		None               void
  9898 ;; Registers used:
  9899 ;;		None
  9900 ;; Tracked objects:
  9901 ;;		On entry : 0/0
  9902 ;;		On exit  : 0/0
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9905 ;;      Params:         0       0       0       0       0       0       0       0
  9906 ;;      Locals:         0       0       0       0       0       0       0       0
  9907 ;;      Temps:          0       0       0       0       0       0       0       0
  9908 ;;      Totals:         0       0       0       0       0       0       0       0
  9909 ;;Total ram usage:        0 bytes
  9910 ;; Hardware stack levels used:    1
  9911 ;; Hardware stack levels required when called:    4
  9912 ;; This function calls:
  9913 ;;		Nothing
  9914 ;; This function is called by:
  9915 ;;		_init_gpio
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919                           
  9920                           ;psect for function _init_led_flash_en2
  9921  1547                     _init_led_flash_en2:	
  9922                           
  9923                           ;peripherals.c: 82: TRISEbits.TRISE0 = 0;
  9924                           
  9925                           ;incstack = 0
  9926                           ; Regs used in _init_led_flash_en2: []
  9927  1547  0021               	movlb	1	; select bank1
  9928  1548  1010               	bcf	16,0	;volatile
  9929                           
  9930                           ;peripherals.c: 83: PORTEbits.RE0 = 0;
  9931  1549  0020               	movlb	0	; select bank0
  9932  154A  1010               	bcf	16,0	;volatile
  9933                           
  9934                           ;peripherals.c: 84: ANSELEbits.ANSE0 = 0;
  9935  154B  0023               	movlb	3	; select bank3
  9936  154C  1010               	bcf	16,0	;volatile
  9937  154D  0008               	return
  9938  154E                     __end_of_init_led_flash_en2:	
  9939                           
  9940                           	psect	text53
  9941  1505                     __ptext53:	
  9942 ;; *************** function _init_led_flash_en1 *****************
  9943 ;; Defined at:
  9944 ;;		line 74 in file "peripherals.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;		None
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;		None
  9949 ;; Return value:  Size  Location     Type
  9950 ;;		None               void
  9951 ;; Registers used:
  9952 ;;		None
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9958 ;;      Params:         0       0       0       0       0       0       0       0
  9959 ;;      Locals:         0       0       0       0       0       0       0       0
  9960 ;;      Temps:          0       0       0       0       0       0       0       0
  9961 ;;      Totals:         0       0       0       0       0       0       0       0
  9962 ;;Total ram usage:        0 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:    4
  9965 ;; This function calls:
  9966 ;;		Nothing
  9967 ;; This function is called by:
  9968 ;;		_init_gpio
  9969 ;; This function uses a non-reentrant model
  9970 ;;
  9971                           
  9972                           
  9973                           ;psect for function _init_led_flash_en1
  9974  1505                     _init_led_flash_en1:	
  9975                           
  9976                           ;peripherals.c: 75: TRISAbits.TRISA7 = 0;
  9977                           
  9978                           ;incstack = 0
  9979                           ; Regs used in _init_led_flash_en1: []
  9980  1505  0021               	movlb	1	; select bank1
  9981  1506  138C               	bcf	12,7	;volatile
  9982                           
  9983                           ;peripherals.c: 76: PORTAbits.RA7 = 0;
  9984  1507  0020               	movlb	0	; select bank0
  9985  1508  138C               	bcf	12,7	;volatile
  9986  1509  0008               	return
  9987  150A                     __end_of_init_led_flash_en1:	
  9988                           
  9989                           	psect	text54
  9990  1540                     __ptext54:	
  9991 ;; *************** function _init_led_light *****************
  9992 ;; Defined at:
  9993 ;;		line 67 in file "peripherals.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;		None
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;		None
  9998 ;; Return value:  Size  Location     Type
  9999 ;;		None               void
 10000 ;; Registers used:
 10001 ;;		None
 10002 ;; Tracked objects:
 10003 ;;		On entry : 0/0
 10004 ;;		On exit  : 0/0
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10007 ;;      Params:         0       0       0       0       0       0       0       0
 10008 ;;      Locals:         0       0       0       0       0       0       0       0
 10009 ;;      Temps:          0       0       0       0       0       0       0       0
 10010 ;;      Totals:         0       0       0       0       0       0       0       0
 10011 ;;Total ram usage:        0 bytes
 10012 ;; Hardware stack levels used:    1
 10013 ;; Hardware stack levels required when called:    4
 10014 ;; This function calls:
 10015 ;;		Nothing
 10016 ;; This function is called by:
 10017 ;;		_init_gpio
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           
 10022                           ;psect for function _init_led_light
 10023  1540                     _init_led_light:	
 10024                           
 10025                           ;peripherals.c: 68: TRISDbits.TRISD1 = 0;
 10026                           
 10027                           ;incstack = 0
 10028                           ; Regs used in _init_led_light: []
 10029  1540  0021               	movlb	1	; select bank1
 10030  1541  108F               	bcf	15,1	;volatile
 10031                           
 10032                           ;peripherals.c: 69: PORTDbits.RD1 = 0;
 10033  1542  0020               	movlb	0	; select bank0
 10034  1543  108F               	bcf	15,1	;volatile
 10035                           
 10036                           ;peripherals.c: 70: ANSELAbits.ANSA2 = 0;
 10037  1544  0023               	movlb	3	; select bank3
 10038  1545  110C               	bcf	12,2	;volatile
 10039  1546  0008               	return
 10040  1547                     __end_of_init_led_light:	
 10041                           
 10042                           	psect	text55
 10043  1539                     __ptext55:	
 10044 ;; *************** function _init_relay2 *****************
 10045 ;; Defined at:
 10046 ;;		line 60 in file "peripherals.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;		None
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;		None
 10051 ;; Return value:  Size  Location     Type
 10052 ;;		None               void
 10053 ;; Registers used:
 10054 ;;		None
 10055 ;; Tracked objects:
 10056 ;;		On entry : 0/0
 10057 ;;		On exit  : 0/0
 10058 ;;		Unchanged: 0/0
 10059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10060 ;;      Params:         0       0       0       0       0       0       0       0
 10061 ;;      Locals:         0       0       0       0       0       0       0       0
 10062 ;;      Temps:          0       0       0       0       0       0       0       0
 10063 ;;      Totals:         0       0       0       0       0       0       0       0
 10064 ;;Total ram usage:        0 bytes
 10065 ;; Hardware stack levels used:    1
 10066 ;; Hardware stack levels required when called:    4
 10067 ;; This function calls:
 10068 ;;		Nothing
 10069 ;; This function is called by:
 10070 ;;		_init_gpio
 10071 ;; This function uses a non-reentrant model
 10072 ;;
 10073                           
 10074                           
 10075                           ;psect for function _init_relay2
 10076  1539                     _init_relay2:	
 10077                           
 10078                           ;peripherals.c: 61: TRISAbits.TRISA3 = 0;
 10079                           
 10080                           ;incstack = 0
 10081                           ; Regs used in _init_relay2: []
 10082  1539  0021               	movlb	1	; select bank1
 10083  153A  118C               	bcf	12,3	;volatile
 10084                           
 10085                           ;peripherals.c: 62: PORTAbits.RA3 = 0;
 10086  153B  0020               	movlb	0	; select bank0
 10087  153C  118C               	bcf	12,3	;volatile
 10088                           
 10089                           ;peripherals.c: 63: ANSELAbits.ANSA3 = 0;
 10090  153D  0023               	movlb	3	; select bank3
 10091  153E  118C               	bcf	12,3	;volatile
 10092  153F  0008               	return
 10093  1540                     __end_of_init_relay2:	
 10094                           
 10095                           	psect	text56
 10096  1532                     __ptext56:	
 10097 ;; *************** function _init_relay1 *****************
 10098 ;; Defined at:
 10099 ;;		line 53 in file "peripherals.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;		None
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;		None
 10104 ;; Return value:  Size  Location     Type
 10105 ;;		None               void
 10106 ;; Registers used:
 10107 ;;		None
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10113 ;;      Params:         0       0       0       0       0       0       0       0
 10114 ;;      Locals:         0       0       0       0       0       0       0       0
 10115 ;;      Temps:          0       0       0       0       0       0       0       0
 10116 ;;      Totals:         0       0       0       0       0       0       0       0
 10117 ;;Total ram usage:        0 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    4
 10120 ;; This function calls:
 10121 ;;		Nothing
 10122 ;; This function is called by:
 10123 ;;		_init_gpio
 10124 ;; This function uses a non-reentrant model
 10125 ;;
 10126                           
 10127                           
 10128                           ;psect for function _init_relay1
 10129  1532                     _init_relay1:	
 10130                           
 10131                           ;peripherals.c: 54: TRISAbits.TRISA2 = 0;
 10132                           
 10133                           ;incstack = 0
 10134                           ; Regs used in _init_relay1: []
 10135  1532  0021               	movlb	1	; select bank1
 10136  1533  110C               	bcf	12,2	;volatile
 10137                           
 10138                           ;peripherals.c: 55: PORTAbits.RA2 = 0;
 10139  1534  0020               	movlb	0	; select bank0
 10140  1535  110C               	bcf	12,2	;volatile
 10141                           
 10142                           ;peripherals.c: 56: ANSELAbits.ANSA2 = 0;
 10143  1536  0023               	movlb	3	; select bank3
 10144  1537  110C               	bcf	12,2	;volatile
 10145  1538  0008               	return
 10146  1539                     __end_of_init_relay1:	
 10147                           
 10148                           	psect	text57
 10149  152B                     __ptext57:	
 10150 ;; *************** function _init_auto_on *****************
 10151 ;; Defined at:
 10152 ;;		line 109 in file "peripherals.c"
 10153 ;; Parameters:    Size  Location     Type
 10154 ;;		None
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;		None
 10157 ;; Return value:  Size  Location     Type
 10158 ;;		None               void
 10159 ;; Registers used:
 10160 ;;		None
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10166 ;;      Params:         0       0       0       0       0       0       0       0
 10167 ;;      Locals:         0       0       0       0       0       0       0       0
 10168 ;;      Temps:          0       0       0       0       0       0       0       0
 10169 ;;      Totals:         0       0       0       0       0       0       0       0
 10170 ;;Total ram usage:        0 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    4
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		_init_gpio
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           
 10181                           ;psect for function _init_auto_on
 10182  152B                     _init_auto_on:	
 10183                           
 10184                           ;peripherals.c: 110: TRISDbits.TRISD2 = 0;
 10185                           
 10186                           ;incstack = 0
 10187                           ; Regs used in _init_auto_on: []
 10188  152B  0021               	movlb	1	; select bank1
 10189  152C  110F               	bcf	15,2	;volatile
 10190                           
 10191                           ;peripherals.c: 111: PORTDbits.RD2 = 0;
 10192  152D  0020               	movlb	0	; select bank0
 10193  152E  110F               	bcf	15,2	;volatile
 10194                           
 10195                           ;peripherals.c: 112: ANSELDbits.ANSD2 = 0;
 10196  152F  0023               	movlb	3	; select bank3
 10197  1530  110F               	bcf	15,2	;volatile
 10198  1531  0008               	return
 10199  1532                     __end_of_init_auto_on:	
 10200                           
 10201                           	psect	text58
 10202  08AB                     __ptext58:	
 10203 ;; *************** function _cpu_watchdog_handler *****************
 10204 ;; Defined at:
 10205 ;;		line 10 in file "watchdog.c"
 10206 ;; Parameters:    Size  Location     Type
 10207 ;;		None
 10208 ;; Auto vars:     Size  Location     Type
 10209 ;;		None
 10210 ;; Return value:  Size  Location     Type
 10211 ;;		None               void
 10212 ;; Registers used:
 10213 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10219 ;;      Params:         0       0       0       0       0       0       0       0
 10220 ;;      Locals:         0       0       0       0       0       0       0       0
 10221 ;;      Temps:          0       2       0       0       0       0       0       0
 10222 ;;      Totals:         0       2       0       0       0       0       0       0
 10223 ;;Total ram usage:        2 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; Hardware stack levels required when called:    5
 10226 ;; This function calls:
 10227 ;;		_auto_on
 10228 ;; This function is called by:
 10229 ;;		_main
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           
 10234                           ;psect for function _cpu_watchdog_handler
 10235  08AB                     _cpu_watchdog_handler:	
 10236                           
 10237                           ;watchdog.c: 11: if (wtimer_flag == 1)
 10238                           
 10239                           ;incstack = 0
 10240                           ; Regs used in _cpu_watchdog_handler: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 10241  08AB  3001               	movlw	1
 10242  08AC  0021               	movlb	1	; select bank1
 10243  08AD  064A               	xorwf	_wtimer_flag^(0+128),w
 10244  08AE  044B               	iorwf	(_wtimer_flag+1)^(0+128),w
 10245  08AF  1D03               	skipz
 10246  08B0  0008               	return
 10247                           
 10248                           ;watchdog.c: 12: {
 10249                           ;watchdog.c: 13: if (wtimer_prescale >= 5)
 10250  08B1  084D               	movf	(_wtimer_prescale+1)^(0+128),w
 10251  08B2  3A80               	xorlw	128
 10252  08B3  00FF               	movwf	127
 10253  08B4  3080               	movlw	128
 10254  08B5  027F               	subwf	127,w
 10255  08B6  1D03               	skipz
 10256  08B7  28BA               	goto	u4545
 10257  08B8  3005               	movlw	5
 10258  08B9  024C               	subwf	_wtimer_prescale^(0+128),w
 10259  08BA                     u4545:	
 10260  08BA  1C03               	skipc
 10261  08BB  28D6               	goto	l4740
 10262                           
 10263                           ;watchdog.c: 14: {
 10264                           ;watchdog.c: 15: wtimer_prescale = 0;
 10265  08BC  0021               	movlb	1	; select bank1
 10266  08BD  01CC               	clrf	_wtimer_prescale^(0+128)
 10267  08BE  01CD               	clrf	(_wtimer_prescale+1)^(0+128)
 10268                           
 10269                           ;watchdog.c: 16: if (wtimer >= 50)
 10270  08BF  0849               	movf	(_wtimer+1)^(0+128),w
 10271  08C0  3A80               	xorlw	128
 10272  08C1  00FF               	movwf	127
 10273  08C2  3080               	movlw	128
 10274  08C3  027F               	subwf	127,w
 10275  08C4  1D03               	skipz
 10276  08C5  28C8               	goto	u4555
 10277  08C6  3032               	movlw	50
 10278  08C7  0248               	subwf	_wtimer^(0+128),w
 10279  08C8                     u4555:	
 10280  08C8  1C03               	skipc
 10281  08C9  28D0               	goto	l4738
 10282                           
 10283                           ;watchdog.c: 17: {
 10284                           ;watchdog.c: 18: auto_on();
 10285  08CA  3196  2629         	fcall	_auto_on
 10286                           
 10287                           ;watchdog.c: 19: wtimer = 0;
 10288  08CC  0021               	movlb	1	; select bank1
 10289  08CD  01C8               	clrf	_wtimer^(0+128)
 10290  08CE  01C9               	clrf	(_wtimer+1)^(0+128)
 10291                           
 10292                           ;watchdog.c: 20: } else
 10293  08CF  0008               	return
 10294  08D0                     l4738:	
 10295                           
 10296                           ;watchdog.c: 21: {
 10297                           ;watchdog.c: 22: wtimer++;
 10298  08D0  3001               	movlw	1
 10299  08D1  0021               	movlb	1	; select bank1
 10300  08D2  07C8               	addwf	_wtimer^(0+128),f
 10301  08D3  3000               	movlw	0
 10302  08D4  3DC9               	addwfc	(_wtimer+1)^(0+128),f
 10303                           
 10304                           ;watchdog.c: 23: }
 10305                           ;watchdog.c: 24: } else
 10306  08D5  0008               	return
 10307  08D6                     l4740:	
 10308                           
 10309                           ;watchdog.c: 25: {
 10310                           ;watchdog.c: 26: _delay((unsigned long)((20)*(4000000/4000.0)));
 10311  08D6  301A               	movlw	26
 10312  08D7  0020               	movlb	0	; select bank0
 10313  08D8  00B1               	movwf	??_cpu_watchdog_handler+1
 10314  08D9  30F8               	movlw	248
 10315  08DA  00B0               	movwf	??_cpu_watchdog_handler
 10316  08DB                     u6387:	
 10317  08DB  0BB0               	decfsz	??_cpu_watchdog_handler,f
 10318  08DC  28DB               	goto	u6387
 10319  08DD  0BB1               	decfsz	??_cpu_watchdog_handler+1,f
 10320  08DE  28DB               	goto	u6387
 10321  08DF  0000               	nop
 10322                           
 10323                           ;watchdog.c: 27: wtimer_prescale++;
 10324  08E0  3001               	movlw	1
 10325  08E1  0021               	movlb	1	; select bank1
 10326  08E2  07CC               	addwf	_wtimer_prescale^(0+128),f
 10327  08E3  3000               	movlw	0
 10328  08E4  3DCD               	addwfc	(_wtimer_prescale+1)^(0+128),f
 10329  08E5  0008               	return
 10330  08E6                     __end_of_cpu_watchdog_handler:	
 10331                           
 10332                           	psect	text59
 10333  1629                     __ptext59:	
 10334 ;; *************** function _auto_on *****************
 10335 ;; Defined at:
 10336 ;;		line 602 in file "main.c"
 10337 ;; Parameters:    Size  Location     Type
 10338 ;;		None
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;		None
 10341 ;; Return value:  Size  Location     Type
 10342 ;;		None               void
 10343 ;; Registers used:
 10344 ;;		wreg
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 0/0
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10350 ;;      Params:         0       0       0       0       0       0       0       0
 10351 ;;      Locals:         0       0       0       0       0       0       0       0
 10352 ;;      Temps:          0       3       0       0       0       0       0       0
 10353 ;;      Totals:         0       3       0       0       0       0       0       0
 10354 ;;Total ram usage:        3 bytes
 10355 ;; Hardware stack levels used:    1
 10356 ;; Hardware stack levels required when called:    4
 10357 ;; This function calls:
 10358 ;;		Nothing
 10359 ;; This function is called by:
 10360 ;;		_cpu_watchdog_handler
 10361 ;;		_main
 10362 ;; This function uses a non-reentrant model
 10363 ;;
 10364                           
 10365                           
 10366                           ;psect for function _auto_on
 10367  1629                     _auto_on:	
 10368                           
 10369                           ;main.c: 604: PORTDbits.RD2 = 1;
 10370                           
 10371                           ;incstack = 0
 10372                           ; Regs used in _auto_on: [wreg]
 10373  1629  0020               	movlb	0	; select bank0
 10374  162A  150F               	bsf	15,2	;volatile
 10375                           
 10376                           ;main.c: 606: _delay((unsigned long)((5000)*(4000000/4000.0)));
 10377  162B  301A               	movlw	26
 10378  162C  00AF               	movwf	??_auto_on+2
 10379  162D  305E               	movlw	94
 10380  162E  00AE               	movwf	??_auto_on+1
 10381  162F  3086               	movlw	134
 10382  1630  00AD               	movwf	??_auto_on
 10383  1631                     u6397:	
 10384  1631  0BAD               	decfsz	??_auto_on,f
 10385  1632  2E31               	goto	u6397
 10386  1633  0BAE               	decfsz	??_auto_on+1,f
 10387  1634  2E31               	goto	u6397
 10388  1635  0BAF               	decfsz	??_auto_on+2,f
 10389  1636  2E31               	goto	u6397
 10390  1637  0000               	nop
 10391                           
 10392                           ;main.c: 607: PORTDbits.RD2 = 0;
 10393  1638  0020               	movlb	0	; select bank0
 10394  1639  110F               	bcf	15,2	;volatile
 10395  163A  0008               	return
 10396  163B                     __end_of_auto_on:	
 10397                           
 10398                           	psect	intentry
 10399  0004                     __pintentry:	
 10400 ;; *************** function _InterruptServiceRoutine *****************
 10401 ;; Defined at:
 10402 ;;		line 44 in file "main.c"
 10403 ;; Parameters:    Size  Location     Type
 10404 ;;		None
 10405 ;; Auto vars:     Size  Location     Type
 10406 ;;		None
 10407 ;; Return value:  Size  Location     Type
 10408 ;;		None               void
 10409 ;; Registers used:
 10410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 10411 ;; Tracked objects:
 10412 ;;		On entry : 0/0
 10413 ;;		On exit  : 0/0
 10414 ;;		Unchanged: 0/0
 10415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10416 ;;      Params:         0       0       0       0       0       0       0       0
 10417 ;;      Locals:         1       0       0       0       0       0       0       0
 10418 ;;      Temps:          0       3       0       0       0       0       0       0
 10419 ;;      Totals:         1       3       0       0       0       0       0       0
 10420 ;;Total ram usage:        4 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:    3
 10423 ;; This function calls:
 10424 ;;		_work_i2c_handler
 10425 ;; This function is called by:
 10426 ;;		Interrupt level 1
 10427 ;; This function uses a non-reentrant model
 10428 ;;
 10429                           
 10430  0004                     _InterruptServiceRoutine:	
 10431                           
 10432                           ;incstack = 0
 10433                           ; Regs used in _InterruptServiceRoutine: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
 10434  0004  3180               	pagesel	$
 10435  0005  0020               	movlb	0	; select bank0
 10436  0006  087F               	movf	127,w
 10437  0007  00AC               	movwf	??_InterruptServiceRoutine+2
 10438                           
 10439                           ;main.c: 50: if (PIR1bits.SSPIF == 1 && SSPSTATbits.S == 1 && i2c_start_flag == 0) {
 10440  0008  1D91               	btfss	17,3	;volatile
 10441  0009  2815               	goto	i1l4662
 10442  000A  0024               	movlb	4	; select bank4
 10443  000B  1D94               	btfss	20,3	;volatile
 10444  000C  2815               	goto	i1l4662
 10445  000D  0021               	movlb	1	; select bank1
 10446  000E  082B               	movf	(_i2c_start_flag+1)^(0+128),w
 10447  000F  042A               	iorwf	_i2c_start_flag^(0+128),w
 10448  0010  1D03               	skipz
 10449  0011  2815               	goto	i1l4662
 10450                           
 10451                           ;main.c: 51: work_i2c_handler();
 10452  0012  3185  250D  3180   	fcall	_work_i2c_handler
 10453  0015                     i1l4662:	
 10454                           
 10455                           ;main.c: 53: }
 10456                           ;main.c: 54: PIR1bits.SSPIF = 0;
 10457  0015  0020               	movlb	0	; select bank0
 10458  0016  1191               	bcf	17,3	;volatile
 10459                           
 10460                           ;main.c: 55: if (i2c_start_flag = 0 && SSPSTATbits.S == 0) {
 10461  0017  01FD               	clrf	_InterruptServiceRoutine$449
 10462  0018  087D               	movf	_InterruptServiceRoutine$449,w
 10463  0019  0020               	movlb	0	; select bank0
 10464  001A  00AA               	movwf	??_InterruptServiceRoutine
 10465  001B  01AB               	clrf	??_InterruptServiceRoutine+1
 10466  001C  082A               	movf	??_InterruptServiceRoutine,w
 10467  001D  0021               	movlb	1	; select bank1
 10468  001E  00AA               	movwf	_i2c_start_flag^(0+128)
 10469  001F  0020               	movlb	0	; select bank0
 10470  0020  082B               	movf	??_InterruptServiceRoutine+1,w
 10471  0021  0021               	movlb	1	; select bank1
 10472  0022  00AB               	movwf	(_i2c_start_flag+1)^(0+128)
 10473  0023  082B               	movf	(_i2c_start_flag+1)^(0+128),w
 10474  0024  042A               	iorwf	_i2c_start_flag^(0+128),w
 10475  0025  1903               	skipnz
 10476  0026  2829               	goto	i1l226
 10477                           
 10478                           ;main.c: 56: SSPCON1bits.CKP = 1;
 10479  0027  0024               	movlb	4	; select bank4
 10480  0028  1615               	bsf	21,4	;volatile
 10481  0029                     i1l226:	
 10482                           
 10483                           ;main.c: 57: }
 10484                           ;main.c: 59: if (PIE1bits.ADIE == 1 && PIR1bits.ADIF)
 10485  0029  0021               	movlb	1	; select bank1
 10486  002A  1F11               	btfss	17,6	;volatile
 10487  002B  2836               	goto	i1l230
 10488                           
 10489                           ;main.c: 60: {
 10490                           ;main.c: 61: adc_flag = adc_flag++;
 10491  002C  0020               	movlb	0	; select bank0
 10492  002D  1F11               	btfss	17,6	;volatile
 10493  002E  2836               	goto	i1l230
 10494  002F  3001               	movlw	1
 10495  0030  0021               	movlb	1	; select bank1
 10496  0031  07A0               	addwf	_adc_flag^(0+128),f
 10497  0032  3000               	movlw	0
 10498  0033  3DA1               	addwfc	(_adc_flag+1)^(0+128),f
 10499                           
 10500                           ;main.c: 62: PIR1bits.ADIF = 0;
 10501  0034  0020               	movlb	0	; select bank0
 10502  0035  1311               	bcf	17,6	;volatile
 10503  0036                     i1l230:	
 10504  0036  0020               	movlb	0	; select bank0
 10505  0037  082C               	movf	??_InterruptServiceRoutine+2,w
 10506  0038  00FF               	movwf	127
 10507  0039  0009               	retfie
 10508  003A                     __end_of_InterruptServiceRoutine:	
 10509                           
 10510                           	psect	text61
 10511  050D                     __ptext61:	
 10512 ;; *************** function _work_i2c_handler *****************
 10513 ;; Defined at:
 10514 ;;		line 471 in file "i2c_Api.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;		None
 10517 ;; Auto vars:     Size  Location     Type
 10518 ;;  reg             2    8[BANK0 ] int 
 10519 ;;  reg_add         1    7[BANK0 ] unsigned char 
 10520 ;;  i2c_add         1    6[BANK0 ] unsigned char 
 10521 ;;  garbage         1    5[BANK0 ] unsigned char 
 10522 ;;  reg_data        1    4[BANK0 ] unsigned char 
 10523 ;; Return value:  Size  Location     Type
 10524 ;;		None               void
 10525 ;; Registers used:
 10526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 10527 ;; Tracked objects:
 10528 ;;		On entry : 0/0
 10529 ;;		On exit  : 0/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10532 ;;      Params:         0       0       0       0       0       0       0       0
 10533 ;;      Locals:         0       6       0       0       0       0       0       0
 10534 ;;      Temps:          0       4       0       0       0       0       0       0
 10535 ;;      Totals:         0      10       0       0       0       0       0       0
 10536 ;;Total ram usage:       10 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:    2
 10539 ;; This function calls:
 10540 ;;		_i2c_data_rcv
 10541 ;;		_i2c_bit_info
 10542 ;;		_i2c_read_handler
 10543 ;;		_read_databyte
 10544 ;;		_read_dataword
 10545 ;;		i1_verify_word_address
 10546 ;;		i1_verify_byte_address
 10547 ;; This function is called by:
 10548 ;;		_InterruptServiceRoutine
 10549 ;; This function uses a non-reentrant model
 10550 ;;
 10551                           
 10552                           
 10553                           ;psect for function _work_i2c_handler
 10554  050D                     _work_i2c_handler:	
 10555                           
 10556                           ;i2c_Api.c: 472: int reg = 0xFF;
 10557                           
 10558                           ;incstack = 0
 10559                           ; Regs used in _work_i2c_handler: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 10560  050D  30FF               	movlw	255
 10561  050E  0020               	movlb	0	; select bank0
 10562  050F  00A8               	movwf	work_i2c_handler@reg
 10563  0510  3000               	movlw	0
 10564  0511  00A9               	movwf	work_i2c_handler@reg+1
 10565                           
 10566                           ;i2c_Api.c: 473: unsigned char i2c_add = 0;
 10567  0512  01A6               	clrf	work_i2c_handler@i2c_add
 10568                           
 10569                           ;i2c_Api.c: 474: unsigned char reg_add = 0;
 10570  0513  01A7               	clrf	work_i2c_handler@reg_add
 10571                           
 10572                           ;i2c_Api.c: 475: unsigned char reg_data = 0xFF;
 10573  0514  30FF               	movlw	255
 10574  0515  00A0               	movwf	??_work_i2c_handler
 10575  0516  0820               	movf	??_work_i2c_handler,w
 10576  0517  00A4               	movwf	work_i2c_handler@reg_data
 10577                           
 10578                           ;i2c_Api.c: 476: unsigned char garbage = 0;
 10579  0518  01A5               	clrf	work_i2c_handler@garbage
 10580                           
 10581                           ;i2c_Api.c: 480: if (PIR1bits.SSPIF == 0)
 10582  0519  1D91               	btfss	17,3	;volatile
 10583  051A  0008               	return
 10584                           
 10585                           ;i2c_Api.c: 483: }
 10586                           ;i2c_Api.c: 484: i2c_start_flag = 1;
 10587                           
 10588                           ;i2c_Api.c: 481: {
 10589                           ;i2c_Api.c: 482: return;
 10590  051B  3001               	movlw	1
 10591  051C  0021               	movlb	1	; select bank1
 10592  051D  00AA               	movwf	_i2c_start_flag^(0+128)
 10593  051E  3000               	movlw	0
 10594  051F  00AB               	movwf	(_i2c_start_flag^(0+128)+1)
 10595                           
 10596                           ;i2c_Api.c: 485: if (SSPCON1bits.SSPOV != 0)
 10597  0520  0024               	movlb	4	; select bank4
 10598  0521  1B15               	btfsc	21,6	;volatile
 10599                           
 10600                           ;i2c_Api.c: 486: {
 10601                           ;i2c_Api.c: 487: SSPCON1bits.SSPOV = 0;
 10602  0522  1315               	bcf	21,6	;volatile
 10603                           
 10604                           ;i2c_Api.c: 488: }
 10605                           ;i2c_Api.c: 491: i2c_add = SSPBUF;
 10606  0523  0811               	movf	17,w	;volatile
 10607  0524  0020               	movlb	0	; select bank0
 10608  0525  00A0               	movwf	??_work_i2c_handler
 10609  0526  0820               	movf	??_work_i2c_handler,w
 10610  0527  00A6               	movwf	work_i2c_handler@i2c_add
 10611                           
 10612                           ;i2c_Api.c: 492: if (i2c_data_rcv() == 0)
 10613  0528  3195  25A2  3185   	fcall	_i2c_data_rcv
 10614  052B  0871               	movf	?_i2c_data_rcv+1,w
 10615  052C  0470               	iorwf	?_i2c_data_rcv,w
 10616  052D  1D03               	skipz
 10617  052E  2E21               	goto	i1l4644
 10618                           
 10619                           ;i2c_Api.c: 493: {
 10620                           ;i2c_Api.c: 498: if (i2c_add == 0x33 << 1)
 10621  052F  0020               	movlb	0	; select bank0
 10622  0530  0826               	movf	work_i2c_handler@i2c_add,w
 10623  0531  3A66               	xorlw	102
 10624  0532  1D03               	skipz
 10625  0533  2E21               	goto	i1l4644
 10626                           
 10627                           ;i2c_Api.c: 499: {
 10628                           ;i2c_Api.c: 504: SSPCON1bits.CKP = 1;
 10629  0534  0024               	movlb	4	; select bank4
 10630  0535  1615               	bsf	21,4	;volatile
 10631                           
 10632                           ;i2c_Api.c: 505: PIR1bits.SSPIF = 0;
 10633  0536  0020               	movlb	0	; select bank0
 10634  0537  1191               	bcf	17,3	;volatile
 10635                           
 10636                           ;i2c_Api.c: 506: if (i2c_bit_info() == 0)
 10637  0538  3195  25AD  3185   	fcall	_i2c_bit_info
 10638  053B  0871               	movf	?_i2c_bit_info+1,w
 10639  053C  0470               	iorwf	?_i2c_bit_info,w
 10640  053D  1D03               	skipz
 10641  053E  2DEC               	goto	i1l4630
 10642  053F                     i1l687:	
 10643                           ;i2c_Api.c: 507: {
 10644                           ;i2c_Api.c: 512: while (PIR1bits.SSPIF == 0);
 10645                           
 10646  053F  0020               	movlb	0	; select bank0
 10647  0540  1D91               	btfss	17,3	;volatile
 10648  0541  2D3F               	goto	i1l687
 10649                           
 10650                           ;i2c_Api.c: 513: reg_add = SSPBUF;
 10651  0542  0024               	movlb	4	; select bank4
 10652  0543  0811               	movf	17,w	;volatile
 10653  0544  0020               	movlb	0	; select bank0
 10654  0545  00A0               	movwf	??_work_i2c_handler
 10655  0546  0820               	movf	??_work_i2c_handler,w
 10656  0547  00A7               	movwf	work_i2c_handler@reg_add
 10657                           
 10658                           ;i2c_Api.c: 514: SSPCON1bits.CKP = 1;
 10659  0548  0024               	movlb	4	; select bank4
 10660  0549  1615               	bsf	21,4	;volatile
 10661                           
 10662                           ;i2c_Api.c: 515: PIR1bits.SSPIF = 0;
 10663  054A  0020               	movlb	0	; select bank0
 10664  054B  1191               	bcf	17,3	;volatile
 10665                           
 10666                           ;i2c_Api.c: 516: reg = verify_byte_address(reg_add);
 10667  054C  0827               	movf	work_i2c_handler@reg_add,w
 10668  054D  3188  200D  3185   	fcall	i1_verify_byte_address
 10669  0550  0871               	movf	?i1_verify_byte_address+1,w
 10670  0551  0020               	movlb	0	; select bank0
 10671  0552  01A9               	clrf	work_i2c_handler@reg+1
 10672  0553  07A9               	addwf	work_i2c_handler@reg+1,f
 10673  0554  0870               	movf	?i1_verify_byte_address,w
 10674  0555  01A8               	clrf	work_i2c_handler@reg
 10675  0556  07A8               	addwf	work_i2c_handler@reg,f
 10676                           
 10677                           ;i2c_Api.c: 519: if (i2c_bit_info() == 1)
 10678  0557  3195  25AD  3185   	fcall	_i2c_bit_info
 10679                           
 10680                           ;i2c_Api.c: 525: }
 10681                           ;i2c_Api.c: 526: if (i2c_bit_info() == 0)
 10682                           
 10683                           ;i2c_Api.c: 520: {
 10684  055A  3195  25AD  3185   	fcall	_i2c_bit_info
 10685                           
 10686                           ;i2c_Api.c: 532: }
 10687                           ;i2c_Api.c: 533: if (i2c_data_rcv() == 0)
 10688                           
 10689                           ;i2c_Api.c: 527: {
 10690  055D  3195  25A2  3185   	fcall	_i2c_data_rcv
 10691                           
 10692                           ;i2c_Api.c: 539: }
 10693                           ;i2c_Api.c: 540: if (i2c_data_rcv() == 1)
 10694                           
 10695                           ;i2c_Api.c: 534: {
 10696  0560  3195  25A2  3185   	fcall	_i2c_data_rcv
 10697                           
 10698                           ;i2c_Api.c: 546: }
 10699                           ;i2c_Api.c: 554: if (i2c_data_rcv() == 1)
 10700                           
 10701                           ;i2c_Api.c: 541: {
 10702  0563  3195  25A2  3185   	fcall	_i2c_data_rcv
 10703  0566  3001               	movlw	1
 10704  0567  0670               	xorwf	?_i2c_data_rcv,w
 10705  0568  0471               	iorwf	?_i2c_data_rcv+1,w
 10706  0569  1D03               	skipz
 10707  056A  2DAF               	goto	i1l4612
 10708                           
 10709                           ;i2c_Api.c: 555: {
 10710                           ;i2c_Api.c: 561: if (reg < 0xFF)
 10711  056B  0020               	movlb	0	; select bank0
 10712  056C  0829               	movf	work_i2c_handler@reg+1,w
 10713  056D  3A80               	xorlw	128
 10714  056E  00FF               	movwf	127
 10715  056F  3080               	movlw	128
 10716  0570  027F               	subwf	127,w
 10717  0571  1D03               	skipz
 10718  0572  2D75               	goto	u436_25
 10719  0573  30FF               	movlw	255
 10720  0574  0228               	subwf	work_i2c_handler@reg,w
 10721  0575                     u436_25:	
 10722  0575  1803               	skipnc
 10723  0576  2D84               	goto	i1l4602
 10724  0577                     i1l696:	
 10725                           ;i2c_Api.c: 562: {
 10726                           ;i2c_Api.c: 567: while (PIR1bits.SSPIF == 0);
 10727                           
 10728  0577  0020               	movlb	0	; select bank0
 10729  0578  1D91               	btfss	17,3	;volatile
 10730  0579  2D77               	goto	i1l696
 10731                           
 10732                           ;i2c_Api.c: 568: read_databyte(reg);
 10733  057A  0829               	movf	work_i2c_handler@reg+1,w
 10734  057B  01F7               	clrf	?_read_databyte+1
 10735  057C  07F7               	addwf	?_read_databyte+1,f
 10736  057D  0828               	movf	work_i2c_handler@reg,w
 10737  057E  01F6               	clrf	?_read_databyte
 10738  057F  07F6               	addwf	?_read_databyte,f
 10739  0580  3196  26A9  3185   	fcall	_read_databyte
 10740                           
 10741                           ;i2c_Api.c: 569: } else
 10742  0583  2E21               	goto	i1l4644
 10743  0584                     i1l4602:	
 10744                           
 10745                           ;i2c_Api.c: 570: {
 10746                           ;i2c_Api.c: 575: reg = verify_word_address(reg_add);
 10747  0584  0020               	movlb	0	; select bank0
 10748  0585  0827               	movf	work_i2c_handler@reg_add,w
 10749  0586  3197  27CC  3185   	fcall	i1_verify_word_address
 10750  0589  0871               	movf	?i1_verify_word_address+1,w
 10751  058A  0020               	movlb	0	; select bank0
 10752  058B  01A9               	clrf	work_i2c_handler@reg+1
 10753  058C  07A9               	addwf	work_i2c_handler@reg+1,f
 10754  058D  0870               	movf	?i1_verify_word_address,w
 10755  058E  01A8               	clrf	work_i2c_handler@reg
 10756  058F  07A8               	addwf	work_i2c_handler@reg,f
 10757                           
 10758                           ;i2c_Api.c: 576: if (reg < 0xFF)
 10759  0590  0829               	movf	work_i2c_handler@reg+1,w
 10760  0591  3A80               	xorlw	128
 10761  0592  00FF               	movwf	127
 10762  0593  3080               	movlw	128
 10763  0594  027F               	subwf	127,w
 10764  0595  1D03               	skipz
 10765  0596  2D99               	goto	u438_25
 10766  0597  30FF               	movlw	255
 10767  0598  0228               	subwf	work_i2c_handler@reg,w
 10768  0599                     u438_25:	
 10769  0599  1803               	skipnc
 10770  059A  2DA8               	goto	i1l4610
 10771  059B                     i1l701:	
 10772                           ;i2c_Api.c: 577: {
 10773                           ;i2c_Api.c: 582: while (PIR1bits.SSPIF == 0);
 10774                           
 10775  059B  0020               	movlb	0	; select bank0
 10776  059C  1D91               	btfss	17,3	;volatile
 10777  059D  2D9B               	goto	i1l701
 10778                           
 10779                           ;i2c_Api.c: 583: read_dataword(reg);
 10780  059E  0829               	movf	work_i2c_handler@reg+1,w
 10781  059F  01F8               	clrf	?_read_dataword+1
 10782  05A0  07F8               	addwf	?_read_dataword+1,f
 10783  05A1  0828               	movf	work_i2c_handler@reg,w
 10784  05A2  01F7               	clrf	?_read_dataword
 10785  05A3  07F7               	addwf	?_read_dataword,f
 10786  05A4  3189  219D  3185   	fcall	_read_dataword
 10787                           
 10788                           ;i2c_Api.c: 584: } else
 10789  05A7  2E21               	goto	i1l4644
 10790  05A8                     i1l4610:	
 10791                           
 10792                           ;i2c_Api.c: 585: {
 10793                           ;i2c_Api.c: 590: garbage = SSPBUF;
 10794  05A8  0024               	movlb	4	; select bank4
 10795  05A9  0811               	movf	17,w	;volatile
 10796  05AA  0020               	movlb	0	; select bank0
 10797  05AB  00A0               	movwf	??_work_i2c_handler
 10798  05AC  0820               	movf	??_work_i2c_handler,w
 10799  05AD  00A5               	movwf	work_i2c_handler@garbage
 10800                           
 10801                           ;i2c_Api.c: 592: }
 10802                           ;i2c_Api.c: 593: }
 10803                           ;i2c_Api.c: 594: } else
 10804  05AE  2E21               	goto	i1l4644
 10805  05AF                     i1l4612:	
 10806                           
 10807                           ;i2c_Api.c: 595: {
 10808                           ;i2c_Api.c: 601: i2c_add = SSPBUF;
 10809  05AF  0024               	movlb	4	; select bank4
 10810  05B0  0811               	movf	17,w	;volatile
 10811  05B1  0020               	movlb	0	; select bank0
 10812  05B2  00A0               	movwf	??_work_i2c_handler
 10813  05B3  0820               	movf	??_work_i2c_handler,w
 10814  05B4  00A6               	movwf	work_i2c_handler@i2c_add
 10815                           
 10816                           ;i2c_Api.c: 605: if (i2c_add == 0x33 << 1 | 1)
 10817  05B5  0826               	movf	work_i2c_handler@i2c_add,w
 10818  05B6  3A66               	xorlw	102
 10819  05B7  3000               	movlw	0
 10820  05B8  1903               	skipnz
 10821  05B9  3001               	movlw	1
 10822  05BA  00A0               	movwf	??_work_i2c_handler
 10823  05BB  01A1               	clrf	??_work_i2c_handler+1
 10824  05BC  3001               	movlw	1
 10825  05BD  0420               	iorwf	??_work_i2c_handler,w
 10826  05BE  00A2               	movwf	??_work_i2c_handler+2
 10827  05BF  3000               	movlw	0
 10828  05C0  0421               	iorwf	??_work_i2c_handler+1,w
 10829  05C1  00A3               	movwf	??_work_i2c_handler+3
 10830  05C2  0823               	movf	??_work_i2c_handler+3,w
 10831  05C3  0422               	iorwf	??_work_i2c_handler+2,w
 10832  05C4  1903               	skipnz
 10833  05C5  2E21               	goto	i1l4644
 10834                           
 10835                           ;i2c_Api.c: 606: {
 10836                           ;i2c_Api.c: 611: if (i2c_bit_info() == 1)
 10837  05C6  3195  25AD  3185   	fcall	_i2c_bit_info
 10838  05C9  3001               	movlw	1
 10839  05CA  0670               	xorwf	?_i2c_bit_info,w
 10840  05CB  0471               	iorwf	?_i2c_bit_info+1,w
 10841  05CC  1D03               	skipz
 10842  05CD  2E21               	goto	i1l4644
 10843                           
 10844                           ;i2c_Api.c: 612: {
 10845                           ;i2c_Api.c: 625: if (reg < 0xFF)
 10846  05CE  0020               	movlb	0	; select bank0
 10847  05CF  0829               	movf	work_i2c_handler@reg+1,w
 10848  05D0  3A80               	xorlw	128
 10849  05D1  00FF               	movwf	127
 10850  05D2  3080               	movlw	128
 10851  05D3  027F               	subwf	127,w
 10852  05D4  1D03               	skipz
 10853  05D5  2DD8               	goto	u442_25
 10854  05D6  30FF               	movlw	255
 10855  05D7  0228               	subwf	work_i2c_handler@reg,w
 10856  05D8                     u442_25:	
 10857  05D8  1803               	skipnc
 10858  05D9  2DE5               	goto	i1l4624
 10859                           
 10860                           ;i2c_Api.c: 626: {
 10861                           ;i2c_Api.c: 632: SSPBUF = i2c_read_handler(reg);
 10862  05DA  0020               	movlb	0	; select bank0
 10863  05DB  0829               	movf	work_i2c_handler@reg+1,w
 10864  05DC  01F7               	clrf	?_i2c_read_handler+1
 10865  05DD  07F7               	addwf	?_i2c_read_handler+1,f
 10866  05DE  0828               	movf	work_i2c_handler@reg,w
 10867  05DF  01F6               	clrf	?_i2c_read_handler
 10868  05E0  07F6               	addwf	?_i2c_read_handler,f
 10869  05E1  3195  2587  3185   	fcall	_i2c_read_handler
 10870  05E4  2DE6               	goto	L6
 10871  05E5                     i1l4624:	
 10872                           ;i2c_Api.c: 635: } else
 10873                           
 10874                           ;i2c_Api.c: 634: PIR1bits.SSPIF = 0;
 10875                           
 10876                           ;i2c_Api.c: 633: SSPCON1bits.CKP = 1;
 10877                           
 10878                           
 10879                           ;i2c_Api.c: 636: {
 10880                           ;i2c_Api.c: 655: SSPBUF = 0xFF;
 10881  05E5  30FF               	movlw	255
 10882  05E6                     L6:	
 10883  05E6  0024               	movlb	4	; select bank4
 10884  05E7  0091               	movwf	17	;volatile
 10885                           
 10886                           ;i2c_Api.c: 656: SSPCON1bits.CKP = 1;
 10887  05E8  1615               	bsf	21,4	;volatile
 10888                           
 10889                           ;i2c_Api.c: 657: PIR1bits.SSPIF = 0;
 10890  05E9  0020               	movlb	0	; select bank0
 10891  05EA  1191               	bcf	17,3	;volatile
 10892                           
 10893                           ;i2c_Api.c: 661: }
 10894                           ;i2c_Api.c: 662: }
 10895                           ;i2c_Api.c: 663: }
 10896                           ;i2c_Api.c: 665: }
 10897                           ;i2c_Api.c: 666: } else
 10898  05EB  2E21               	goto	i1l4644
 10899  05EC                     i1l4630:	
 10900                           
 10901                           ;i2c_Api.c: 667: {
 10902                           ;i2c_Api.c: 668: if (i2c_bit_info() == 1)
 10903  05EC  3195  25AD  3185   	fcall	_i2c_bit_info
 10904  05EF  3001               	movlw	1
 10905  05F0  0670               	xorwf	?_i2c_bit_info,w
 10906  05F1  0471               	iorwf	?_i2c_bit_info+1,w
 10907  05F2  1D03               	skipz
 10908  05F3  2E21               	goto	i1l4644
 10909  05F4                     i1l712:	
 10910                           ;i2c_Api.c: 669: {
 10911                           ;i2c_Api.c: 670: while (PIR1bits.SSPIF == 0);
 10912                           
 10913  05F4  0020               	movlb	0	; select bank0
 10914  05F5  1D91               	btfss	17,3	;volatile
 10915  05F6  2DF4               	goto	i1l712
 10916                           
 10917                           ;i2c_Api.c: 671: reg_add = SSPBUF;
 10918  05F7  0024               	movlb	4	; select bank4
 10919  05F8  0811               	movf	17,w	;volatile
 10920  05F9  0020               	movlb	0	; select bank0
 10921  05FA  00A0               	movwf	??_work_i2c_handler
 10922  05FB  0820               	movf	??_work_i2c_handler,w
 10923  05FC  00A7               	movwf	work_i2c_handler@reg_add
 10924                           
 10925                           ;i2c_Api.c: 672: reg = verify_byte_address(reg_add);
 10926  05FD  0827               	movf	work_i2c_handler@reg_add,w
 10927  05FE  3188  200D  3185   	fcall	i1_verify_byte_address
 10928  0601  0871               	movf	?i1_verify_byte_address+1,w
 10929  0602  0020               	movlb	0	; select bank0
 10930  0603  01A9               	clrf	work_i2c_handler@reg+1
 10931  0604  07A9               	addwf	work_i2c_handler@reg+1,f
 10932  0605  0870               	movf	?i1_verify_byte_address,w
 10933  0606  01A8               	clrf	work_i2c_handler@reg
 10934  0607  07A8               	addwf	work_i2c_handler@reg,f
 10935                           
 10936                           ;i2c_Api.c: 673: if (reg < 0xFF)
 10937  0608  0829               	movf	work_i2c_handler@reg+1,w
 10938  0609  3A80               	xorlw	128
 10939  060A  00FF               	movwf	127
 10940  060B  3080               	movlw	128
 10941  060C  027F               	subwf	127,w
 10942  060D  1D03               	skipz
 10943  060E  2E11               	goto	u445_25
 10944  060F  30FF               	movlw	255
 10945  0610  0228               	subwf	work_i2c_handler@reg,w
 10946  0611                     u445_25:	
 10947  0611  1803               	skipnc
 10948  0612  2E21               	goto	i1l4644
 10949                           
 10950                           ;i2c_Api.c: 674: {
 10951                           ;i2c_Api.c: 675: SSPCON1bits.CKP = 1;
 10952  0613  0024               	movlb	4	; select bank4
 10953  0614  1615               	bsf	21,4	;volatile
 10954                           
 10955                           ;i2c_Api.c: 676: PIR1bits.SSPIF = 0;
 10956  0615  0020               	movlb	0	; select bank0
 10957  0616  1191               	bcf	17,3	;volatile
 10958                           
 10959                           ;i2c_Api.c: 677: SSPBUF = i2c_read_handler(reg);
 10960  0617  0829               	movf	work_i2c_handler@reg+1,w
 10961  0618  01F7               	clrf	?_i2c_read_handler+1
 10962  0619  07F7               	addwf	?_i2c_read_handler+1,f
 10963  061A  0828               	movf	work_i2c_handler@reg,w
 10964  061B  01F6               	clrf	?_i2c_read_handler
 10965  061C  07F6               	addwf	?_i2c_read_handler,f
 10966  061D  3195  2587         	fcall	_i2c_read_handler
 10967  061F  0024               	movlb	4	; select bank4
 10968  0620  0091               	movwf	17	;volatile
 10969  0621                     i1l4644:	
 10970                           
 10971                           ;i2c_Api.c: 679: }
 10972                           ;i2c_Api.c: 680: }
 10973                           ;i2c_Api.c: 681: }
 10974                           ;i2c_Api.c: 683: }
 10975                           ;i2c_Api.c: 684: }
 10976                           ;i2c_Api.c: 689: SSPCON1bits.CKP = 1;
 10977  0621  0024               	movlb	4	; select bank4
 10978  0622  1615               	bsf	21,4	;volatile
 10979                           
 10980                           ;i2c_Api.c: 690: PIR1bits.SSPIF = 0;
 10981  0623  0020               	movlb	0	; select bank0
 10982  0624  1191               	bcf	17,3	;volatile
 10983                           
 10984                           ;i2c_Api.c: 691: i2c_start_flag = 0;
 10985  0625  0021               	movlb	1	; select bank1
 10986  0626  01AA               	clrf	_i2c_start_flag^(0+128)
 10987  0627  01AB               	clrf	(_i2c_start_flag+1)^(0+128)
 10988                           
 10989                           ;i2c_Api.c: 692: wtimer = 0;
 10990  0628  01C8               	clrf	_wtimer^(0+128)
 10991  0629  01C9               	clrf	(_wtimer+1)^(0+128)
 10992                           
 10993                           ;i2c_Api.c: 693: wtimer_prescale = 0;
 10994  062A  01CC               	clrf	_wtimer_prescale^(0+128)
 10995  062B  01CD               	clrf	(_wtimer_prescale+1)^(0+128)
 10996  062C  0008               	return
 10997  062D                     __end_of_work_i2c_handler:	
 10998                           
 10999                           	psect	text62
 11000  080D                     __ptext62:	
 11001 ;; *************** function i1_verify_byte_address *****************
 11002 ;; Defined at:
 11003 ;;		line 459 in file "i2c_Api.c"
 11004 ;; Parameters:    Size  Location     Type
 11005 ;;  register_add    1    wreg     unsigned char 
 11006 ;; Auto vars:     Size  Location     Type
 11007 ;;  register_add    1    3[COMMON] unsigned char 
 11008 ;;  verify_byte_    2    4[COMMON] int 
 11009 ;; Return value:  Size  Location     Type
 11010 ;;                  2    0[COMMON] int 
 11011 ;; Registers used:
 11012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
 11013 ;; Tracked objects:
 11014 ;;		On entry : 0/0
 11015 ;;		On exit  : 0/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11018 ;;      Params:         3       0       0       0       0       0       0       0
 11019 ;;      Locals:         3       0       0       0       0       0       0       0
 11020 ;;      Temps:          0       0       0       0       0       0       0       0
 11021 ;;      Totals:         6       0       0       0       0       0       0       0
 11022 ;;Total ram usage:        6 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; This function calls:
 11025 ;;		Nothing
 11026 ;; This function is called by:
 11027 ;;		_work_i2c_handler
 11028 ;; This function uses a non-reentrant model
 11029 ;;
 11030                           
 11031                           
 11032                           ;psect for function i1_verify_byte_address
 11033  080D                     i1_verify_byte_address:	
 11034                           
 11035                           ;incstack = 0
 11036                           ; Regs used in i1_verify_byte_address: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1]
 11037                           ;i1verify_byte_address@register_add stored from wreg
 11038  080D  00F3               	movwf	i1verify_byte_address@register_add
 11039                           
 11040                           ;i2c_Api.c: 460: for (int i = 0; i < 36; i++)
 11041  080E  01F4               	clrf	i1verify_byte_address@i
 11042  080F  01F5               	clrf	i1verify_byte_address@i+1
 11043  0810  0875               	movf	i1verify_byte_address@i+1,w
 11044  0811  3A80               	xorlw	128
 11045  0812  00FF               	movwf	127
 11046  0813  3080               	movlw	128
 11047  0814  027F               	subwf	127,w
 11048  0815  1D03               	skipz
 11049  0816  2819               	goto	u425_25
 11050  0817  3024               	movlw	36
 11051  0818  0274               	subwf	i1verify_byte_address@i,w
 11052  0819                     u425_25:	
 11053  0819  1803               	btfsc	3,0
 11054  081A  283B               	goto	i1l4520
 11055  081B                     i1l4510:	
 11056                           
 11057                           ;i2c_Api.c: 461: {
 11058                           ;i2c_Api.c: 462: if (register_add == i2c_reg_add_byte[i])
 11059  081B  0874               	movf	i1verify_byte_address@i,w
 11060  081C  3EA0               	addlw	_i2c_reg_add_byte& (0+255)
 11061  081D  0086               	movwf	6
 11062  081E  3001               	movlw	1	; select bank3/4
 11063  081F  0087               	movwf	7
 11064  0820  0801               	movf	1,w
 11065  0821  0673               	xorwf	i1verify_byte_address@register_add,w
 11066  0822  1D03               	skipz
 11067  0823  282C               	goto	i1l4516
 11068                           
 11069                           ;i2c_Api.c: 463: {
 11070                           ;i2c_Api.c: 464: return i;
 11071  0824  0875               	movf	i1verify_byte_address@i+1,w
 11072  0825  01F1               	clrf	?i1_verify_byte_address+1
 11073  0826  07F1               	addwf	?i1_verify_byte_address+1,f
 11074  0827  0874               	movf	i1verify_byte_address@i,w
 11075  0828  01F0               	clrf	?i1_verify_byte_address
 11076  0829  07F0               	addwf	?i1_verify_byte_address,f
 11077  082A  0020               	movlb	0	; select bank0
 11078  082B  0008               	return
 11079  082C                     i1l4516:	
 11080  082C  3001               	movlw	1
 11081  082D  07F4               	addwf	i1verify_byte_address@i,f
 11082  082E  3000               	movlw	0
 11083  082F  3DF5               	addwfc	i1verify_byte_address@i+1,f
 11084  0830  0875               	movf	i1verify_byte_address@i+1,w
 11085  0831  3A80               	xorlw	128
 11086  0832  00FF               	movwf	127
 11087  0833  3080               	movlw	128
 11088  0834  027F               	subwf	127,w
 11089  0835  1D03               	skipz
 11090  0836  2839               	goto	u427_25
 11091  0837  3024               	movlw	36
 11092  0838  0274               	subwf	i1verify_byte_address@i,w
 11093  0839                     u427_25:	
 11094  0839  1C03               	skipc
 11095  083A  281B               	goto	i1l4510
 11096  083B                     i1l4520:	
 11097                           
 11098                           ;i2c_Api.c: 465: }
 11099                           ;i2c_Api.c: 466: }
 11100                           ;i2c_Api.c: 467: return 0XFF;
 11101  083B  30FF               	movlw	255
 11102  083C  00F0               	movwf	?i1_verify_byte_address
 11103  083D  3000               	movlw	0
 11104  083E  00F1               	movwf	?i1_verify_byte_address+1
 11105  083F  0020               	movlb	0	; select bank0
 11106  0840  0008               	return
 11107  0841                     __end_ofi1_verify_byte_address:	
 11108                           
 11109                           	psect	text63
 11110  17CC                     __ptext63:	
 11111 ;; *************** function i1_verify_word_address *****************
 11112 ;; Defined at:
 11113 ;;		line 350 in file "i2c_Api.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;  register_add    1    wreg     unsigned char 
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;  register_add    1    3[COMMON] unsigned char 
 11118 ;;  verify_word_    2    4[COMMON] int 
 11119 ;; Return value:  Size  Location     Type
 11120 ;;                  2    0[COMMON] int 
 11121 ;; Registers used:
 11122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
 11123 ;; Tracked objects:
 11124 ;;		On entry : 0/0
 11125 ;;		On exit  : 0/0
 11126 ;;		Unchanged: 0/0
 11127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11128 ;;      Params:         3       0       0       0       0       0       0       0
 11129 ;;      Locals:         3       0       0       0       0       0       0       0
 11130 ;;      Temps:          0       0       0       0       0       0       0       0
 11131 ;;      Totals:         6       0       0       0       0       0       0       0
 11132 ;;Total ram usage:        6 bytes
 11133 ;; Hardware stack levels used:    1
 11134 ;; This function calls:
 11135 ;;		Nothing
 11136 ;; This function is called by:
 11137 ;;		_work_i2c_handler
 11138 ;; This function uses a non-reentrant model
 11139 ;;
 11140                           
 11141                           
 11142                           ;psect for function i1_verify_word_address
 11143  17CC                     i1_verify_word_address:	
 11144                           
 11145                           ;incstack = 0
 11146                           ; Regs used in i1_verify_word_address: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1]
 11147                           ;i1verify_word_address@register_add stored from wreg
 11148  17CC  00F3               	movwf	i1verify_word_address@register_add
 11149                           
 11150                           ;i2c_Api.c: 351: for (int i = 0; i < 6; i++)
 11151  17CD  01F4               	clrf	i1verify_word_address@i
 11152  17CE  01F5               	clrf	i1verify_word_address@i+1
 11153  17CF  0875               	movf	i1verify_word_address@i+1,w
 11154  17D0  3A80               	xorlw	128
 11155  17D1  00FF               	movwf	127
 11156  17D2  3080               	movlw	128
 11157  17D3  027F               	subwf	127,w
 11158  17D4  1D03               	skipz
 11159  17D5  2FD8               	goto	u422_25
 11160  17D6  3006               	movlw	6
 11161  17D7  0274               	subwf	i1verify_word_address@i,w
 11162  17D8                     u422_25:	
 11163  17D8  1803               	btfsc	3,0
 11164  17D9  2FFA               	goto	i1l4500
 11165  17DA                     i1l4490:	
 11166                           
 11167                           ;i2c_Api.c: 352: {
 11168                           ;i2c_Api.c: 353: if (register_add == i2c_reg_add_word[i])
 11169  17DA  0874               	movf	i1verify_word_address@i,w
 11170  17DB  3E68               	addlw	_i2c_reg_add_word& (0+255)
 11171  17DC  0086               	movwf	6
 11172  17DD  3001               	movlw	1	; select bank2/3
 11173  17DE  0087               	movwf	7
 11174  17DF  0801               	movf	1,w
 11175  17E0  0673               	xorwf	i1verify_word_address@register_add,w
 11176  17E1  1D03               	skipz
 11177  17E2  2FEB               	goto	i1l4496
 11178                           
 11179                           ;i2c_Api.c: 354: {
 11180                           ;i2c_Api.c: 355: return i;
 11181  17E3  0875               	movf	i1verify_word_address@i+1,w
 11182  17E4  01F1               	clrf	?i1_verify_word_address+1
 11183  17E5  07F1               	addwf	?i1_verify_word_address+1,f
 11184  17E6  0874               	movf	i1verify_word_address@i,w
 11185  17E7  01F0               	clrf	?i1_verify_word_address
 11186  17E8  07F0               	addwf	?i1_verify_word_address,f
 11187  17E9  0020               	movlb	0	; select bank0
 11188  17EA  0008               	return
 11189  17EB                     i1l4496:	
 11190  17EB  3001               	movlw	1
 11191  17EC  07F4               	addwf	i1verify_word_address@i,f
 11192  17ED  3000               	movlw	0
 11193  17EE  3DF5               	addwfc	i1verify_word_address@i+1,f
 11194  17EF  0875               	movf	i1verify_word_address@i+1,w
 11195  17F0  3A80               	xorlw	128
 11196  17F1  00FF               	movwf	127
 11197  17F2  3080               	movlw	128
 11198  17F3  027F               	subwf	127,w
 11199  17F4  1D03               	skipz
 11200  17F5  2FF8               	goto	u424_25
 11201  17F6  3006               	movlw	6
 11202  17F7  0274               	subwf	i1verify_word_address@i,w
 11203  17F8                     u424_25:	
 11204  17F8  1C03               	skipc
 11205  17F9  2FDA               	goto	i1l4490
 11206  17FA                     i1l4500:	
 11207                           
 11208                           ;i2c_Api.c: 356: }
 11209                           ;i2c_Api.c: 357: }
 11210                           ;i2c_Api.c: 358: return 0XFF;
 11211  17FA  30FF               	movlw	255
 11212  17FB  00F0               	movwf	?i1_verify_word_address
 11213  17FC  3000               	movlw	0
 11214  17FD  00F1               	movwf	?i1_verify_word_address+1
 11215  17FE  0020               	movlb	0	; select bank0
 11216  17FF  0008               	return
 11217  1800                     __end_ofi1_verify_word_address:	
 11218                           
 11219                           	psect	text64
 11220  099D                     __ptext64:	
 11221 ;; *************** function _read_dataword *****************
 11222 ;; Defined at:
 11223 ;;		line 362 in file "i2c_Api.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;  reg             2    7[COMMON] int 
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;  msb             1   12[COMMON] unsigned char 
 11228 ;;  lsb             1   11[COMMON] unsigned char 
 11229 ;; Return value:  Size  Location     Type
 11230 ;;		None               void
 11231 ;; Registers used:
 11232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11238 ;;      Params:         2       0       0       0       0       0       0       0
 11239 ;;      Locals:         2       0       0       0       0       0       0       0
 11240 ;;      Temps:          2       0       0       0       0       0       0       0
 11241 ;;      Totals:         6       0       0       0       0       0       0       0
 11242 ;;Total ram usage:        6 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; Hardware stack levels required when called:    1
 11245 ;; This function calls:
 11246 ;;		_i2c_write_handler_word
 11247 ;; This function is called by:
 11248 ;;		_work_i2c_handler
 11249 ;; This function uses a non-reentrant model
 11250 ;;
 11251                           
 11252                           
 11253                           ;psect for function _read_dataword
 11254  099D                     _read_dataword:	
 11255                           
 11256                           ;i2c_Api.c: 363: unsigned char lsb = 0x00;
 11257                           
 11258                           ;incstack = 0
 11259                           ; Regs used in _read_dataword: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 11260  099D  01FB               	clrf	read_dataword@lsb
 11261                           
 11262                           ;i2c_Api.c: 364: unsigned char msb = 0x00;
 11263  099E  01FC               	clrf	read_dataword@msb
 11264                           
 11265                           ;i2c_Api.c: 365: lsb = SSPBUF;
 11266  099F  0024               	movlb	4	; select bank4
 11267  09A0  0811               	movf	17,w	;volatile
 11268  09A1  00F9               	movwf	??_read_dataword
 11269  09A2  0879               	movf	??_read_dataword,w
 11270  09A3  00FB               	movwf	read_dataword@lsb
 11271                           
 11272                           ;i2c_Api.c: 366: SSPCON1bits.CKP = 1;
 11273  09A4  1615               	bsf	21,4	;volatile
 11274                           
 11275                           ;i2c_Api.c: 367: PIR1bits.SSPIF = 0;
 11276  09A5  0020               	movlb	0	; select bank0
 11277  09A6  1191               	bcf	17,3	;volatile
 11278  09A7                     i1l648:	
 11279                           ;i2c_Api.c: 368: while (PIR1bits.SSPIF == 0);
 11280                           
 11281  09A7  1D91               	btfss	17,3	;volatile
 11282  09A8  29A7               	goto	i1l648
 11283                           
 11284                           ;i2c_Api.c: 369: msb = SSPBUF;
 11285  09A9  0024               	movlb	4	; select bank4
 11286  09AA  0811               	movf	17,w	;volatile
 11287  09AB  00F9               	movwf	??_read_dataword
 11288  09AC  0879               	movf	??_read_dataword,w
 11289  09AD  00FC               	movwf	read_dataword@msb
 11290                           
 11291                           ;i2c_Api.c: 371: i2c_reg_dataword_msb[reg][0] = msb;
 11292  09AE  087C               	movf	read_dataword@msb,w
 11293  09AF  00F9               	movwf	??_read_dataword
 11294  09B0  0877               	movf	read_dataword@reg,w
 11295  09B1  3E38               	addlw	_i2c_reg_dataword_msb& (0+255)
 11296  09B2  0086               	movwf	6
 11297  09B3  3001               	movlw	1	; select bank2/3
 11298  09B4  0087               	movwf	7
 11299  09B5  0879               	movf	??_read_dataword,w
 11300  09B6  0081               	movwf	1
 11301                           
 11302                           ;i2c_Api.c: 372: i2c_reg_dataword_lsb[reg][0] = lsb;
 11303  09B7  087B               	movf	read_dataword@lsb,w
 11304  09B8  00F9               	movwf	??_read_dataword
 11305  09B9  0877               	movf	read_dataword@reg,w
 11306  09BA  3ECB               	addlw	_i2c_reg_dataword_lsb& (0+255)
 11307  09BB  0086               	movwf	6
 11308  09BC  3001               	movlw	1	; select bank3/4
 11309  09BD  0087               	movwf	7
 11310  09BE  0879               	movf	??_read_dataword,w
 11311  09BF  0081               	movwf	1
 11312                           
 11313                           ;i2c_Api.c: 375: i2c_write_handler_word(reg, i2c_reg_dataword_msb[reg][0], i2c_reg_dataw
      +                          ord_lsb[reg][0]);
 11314  09C0  0878               	movf	read_dataword@reg+1,w
 11315  09C1  01F1               	clrf	?_i2c_write_handler_word+1
 11316  09C2  07F1               	addwf	?_i2c_write_handler_word+1,f
 11317  09C3  0877               	movf	read_dataword@reg,w
 11318  09C4  01F0               	clrf	?_i2c_write_handler_word
 11319  09C5  07F0               	addwf	?_i2c_write_handler_word,f
 11320  09C6  0877               	movf	read_dataword@reg,w
 11321  09C7  3E38               	addlw	_i2c_reg_dataword_msb& (0+255)
 11322  09C8  0086               	movwf	6
 11323  09C9  3001               	movlw	1	; select bank2/3
 11324  09CA  0087               	movwf	7
 11325  09CB  0801               	movf	1,w
 11326  09CC  00F9               	movwf	??_read_dataword
 11327  09CD  0879               	movf	??_read_dataword,w
 11328  09CE  00F2               	movwf	?_i2c_write_handler_word+2
 11329  09CF  0877               	movf	read_dataword@reg,w
 11330  09D0  3ECB               	addlw	_i2c_reg_dataword_lsb& (0+255)
 11331  09D1  0086               	movwf	6
 11332  09D2  3001               	movlw	1	; select bank3/4
 11333  09D3  0087               	movwf	7
 11334  09D4  0801               	movf	1,w
 11335  09D5  00FA               	movwf	??_read_dataword+1
 11336  09D6  087A               	movf	??_read_dataword+1,w
 11337  09D7  00F3               	movwf	?_i2c_write_handler_word+3
 11338  09D8  3189  21DB         	fcall	_i2c_write_handler_word
 11339  09DA  0008               	return
 11340  09DB                     __end_of_read_dataword:	
 11341                           
 11342                           	psect	text65
 11343  09DB                     __ptext65:	
 11344 ;; *************** function _i2c_write_handler_word *****************
 11345 ;; Defined at:
 11346 ;;		line 443 in file "i2c_Api.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;  reg             2    0[COMMON] int 
 11349 ;;  i2c_data_msb    1    2[COMMON] unsigned char 
 11350 ;;  i2c_data_lsb    1    3[COMMON] unsigned char 
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;  i               2    5[COMMON] int 
 11353 ;; Return value:  Size  Location     Type
 11354 ;;		None               void
 11355 ;; Registers used:
 11356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11362 ;;      Params:         4       0       0       0       0       0       0       0
 11363 ;;      Locals:         2       0       0       0       0       0       0       0
 11364 ;;      Temps:          1       0       0       0       0       0       0       0
 11365 ;;      Totals:         7       0       0       0       0       0       0       0
 11366 ;;Total ram usage:        7 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; This function calls:
 11369 ;;		Nothing
 11370 ;; This function is called by:
 11371 ;;		_read_dataword
 11372 ;; This function uses a non-reentrant model
 11373 ;;
 11374                           
 11375                           
 11376                           ;psect for function _i2c_write_handler_word
 11377  09DB                     _i2c_write_handler_word:	
 11378                           
 11379                           ;i2c_Api.c: 444: int i;
 11380                           ;i2c_Api.c: 446: for (i = 0; i < 7; i++)
 11381                           
 11382                           ;incstack = 0
 11383                           ; Regs used in _i2c_write_handler_word: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1]
 11384  09DB  01F5               	clrf	i2c_write_handler_word@i
 11385  09DC  01F6               	clrf	i2c_write_handler_word@i+1
 11386  09DD                     L7:	
 11387  09DD  0876               	movf	i2c_write_handler_word@i+1,w
 11388  09DE  3A80               	xorlw	128
 11389  09DF  00FF               	movwf	127
 11390  09E0  3080               	movlw	128
 11391  09E1  027F               	subwf	127,w
 11392  09E2  1D03               	skipz
 11393  09E3  29E6               	goto	u387_25
 11394  09E4  3007               	movlw	7
 11395  09E5  0275               	subwf	i2c_write_handler_word@i,w
 11396  09E6                     u387_25:	
 11397  09E6  1803               	btfsc	3,0
 11398  09E7  0008               	return
 11399                           
 11400                           ;i2c_Api.c: 447: {
 11401                           ;i2c_Api.c: 448: if (i2c_rx_data_buff_word_lsb[i] == 0xFB && i2c_rx_data_buff_word_msb[i
      +                          ] == 0xFB)
 11402  09E8  0875               	movf	i2c_write_handler_word@i,w
 11403  09E9  3E53               	addlw	_i2c_rx_data_buff_word_lsb& (0+255)
 11404  09EA  0086               	movwf	6
 11405  09EB  3001               	movlw	1	; select bank2/3
 11406  09EC  0087               	movwf	7
 11407  09ED  0801               	movf	1,w
 11408  09EE  3AFB               	xorlw	251
 11409  09EF  1D03               	skipz
 11410  09F0  2A16               	goto	i1l4308
 11411  09F1  0875               	movf	i2c_write_handler_word@i,w
 11412  09F2  3E5A               	addlw	_i2c_rx_data_buff_word_msb& (0+255)
 11413  09F3  0086               	movwf	6
 11414  09F4  3001               	movlw	1	; select bank2/3
 11415  09F5  0087               	movwf	7
 11416  09F6  0801               	movf	1,w
 11417  09F7  3AFB               	xorlw	251
 11418  09F8  1D03               	skipz
 11419  09F9  2A16               	goto	i1l4308
 11420                           
 11421                           ;i2c_Api.c: 449: {
 11422                           ;i2c_Api.c: 450: i2c_rx_radd_buff_word[i] = reg;
 11423  09FA  3575               	lslf	i2c_write_handler_word@i,w
 11424  09FB  3ED1               	addlw	_i2c_rx_radd_buff_word& (0+255)
 11425  09FC  0086               	movwf	6
 11426  09FD  3001               	movlw	1	; select bank3/4
 11427  09FE  0087               	movwf	7
 11428  09FF  0870               	movf	i2c_write_handler_word@reg,w
 11429  0A00  3FC0               	movwi [0]fsr1
 11430  0A01  0871               	movf	i2c_write_handler_word@reg+1,w
 11431  0A02  3FC1               	movwi [1]fsr1
 11432                           
 11433                           ;i2c_Api.c: 451: i2c_rx_data_buff_word_lsb[i] = i2c_data_lsb;
 11434  0A03  0873               	movf	i2c_write_handler_word@i2c_data_lsb,w
 11435  0A04  00F4               	movwf	??_i2c_write_handler_word
 11436  0A05  0875               	movf	i2c_write_handler_word@i,w
 11437  0A06  3E53               	addlw	_i2c_rx_data_buff_word_lsb& (0+255)
 11438  0A07  0086               	movwf	6
 11439  0A08  3001               	movlw	1	; select bank2/3
 11440  0A09  0087               	movwf	7
 11441  0A0A  0874               	movf	??_i2c_write_handler_word,w
 11442  0A0B  0081               	movwf	1
 11443                           
 11444                           ;i2c_Api.c: 452: i2c_rx_data_buff_word_msb[i] = i2c_data_msb;
 11445  0A0C  0872               	movf	i2c_write_handler_word@i2c_data_msb,w
 11446  0A0D  00F4               	movwf	??_i2c_write_handler_word
 11447  0A0E  0875               	movf	i2c_write_handler_word@i,w
 11448  0A0F  3E5A               	addlw	_i2c_rx_data_buff_word_msb& (0+255)
 11449  0A10  0086               	movwf	6
 11450  0A11  3001               	movlw	1	; select bank2/3
 11451  0A12  0087               	movwf	7
 11452  0A13  0874               	movf	??_i2c_write_handler_word,w
 11453  0A14  0081               	movwf	1
 11454                           
 11455                           ;i2c_Api.c: 453: break;
 11456  0A15  0008               	return
 11457  0A16                     i1l4308:	
 11458  0A16  3001               	movlw	1
 11459  0A17  07F5               	addwf	i2c_write_handler_word@i,f
 11460  0A18  3000               	movlw	0
 11461  0A19  3DF6               	addwfc	i2c_write_handler_word@i+1,f
 11462  0A1A  29DD               	goto	L7
 11463  0A1B                     __end_of_i2c_write_handler_word:	
 11464                           
 11465                           	psect	text66
 11466  16A9                     __ptext66:	
 11467 ;; *************** function _read_databyte *****************
 11468 ;; Defined at:
 11469 ;;		line 321 in file "i2c_Api.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;  reg             2    6[COMMON] int 
 11472 ;; Auto vars:     Size  Location     Type
 11473 ;;		None
 11474 ;; Return value:  Size  Location     Type
 11475 ;;		None               void
 11476 ;; Registers used:
 11477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 11478 ;; Tracked objects:
 11479 ;;		On entry : 0/0
 11480 ;;		On exit  : 0/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11483 ;;      Params:         2       0       0       0       0       0       0       0
 11484 ;;      Locals:         0       0       0       0       0       0       0       0
 11485 ;;      Temps:          1       0       0       0       0       0       0       0
 11486 ;;      Totals:         3       0       0       0       0       0       0       0
 11487 ;;Total ram usage:        3 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; Hardware stack levels required when called:    1
 11490 ;; This function calls:
 11491 ;;		_i2c_write_handler_byte
 11492 ;; This function is called by:
 11493 ;;		_work_i2c_handler
 11494 ;; This function uses a non-reentrant model
 11495 ;;
 11496                           
 11497                           
 11498                           ;psect for function _read_databyte
 11499  16A9                     _read_databyte:	
 11500                           
 11501                           ;i2c_Api.c: 322: i2c_reg_databyte[reg][0] = SSPBUF;
 11502                           
 11503                           ;incstack = 0
 11504                           ; Regs used in _read_databyte: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 11505  16A9  0024               	movlb	4	; select bank4
 11506  16AA  0811               	movf	17,w	;volatile
 11507  16AB  00F8               	movwf	??_read_databyte
 11508  16AC  0876               	movf	read_databyte@reg,w
 11509  16AD  3E20               	addlw	_i2c_reg_databyte& (0+255)
 11510  16AE  0086               	movwf	6
 11511  16AF  3002               	movlw	2	; select bank4/5
 11512  16B0  0087               	movwf	7
 11513  16B1  0878               	movf	??_read_databyte,w
 11514  16B2  0081               	movwf	1
 11515                           
 11516                           ;i2c_Api.c: 323: i2c_write_handler_byte(reg, i2c_reg_databyte[reg][0]);
 11517  16B3  0877               	movf	read_databyte@reg+1,w
 11518  16B4  01F1               	clrf	?_i2c_write_handler_byte+1
 11519  16B5  07F1               	addwf	?_i2c_write_handler_byte+1,f
 11520  16B6  0876               	movf	read_databyte@reg,w
 11521  16B7  01F0               	clrf	?_i2c_write_handler_byte
 11522  16B8  07F0               	addwf	?_i2c_write_handler_byte,f
 11523  16B9  0876               	movf	read_databyte@reg,w
 11524  16BA  3E20               	addlw	_i2c_reg_databyte& (0+255)
 11525  16BB  0086               	movwf	6
 11526  16BC  3002               	movlw	2	; select bank4/5
 11527  16BD  0087               	movwf	7
 11528  16BE  0801               	movf	1,w
 11529  16BF  00F8               	movwf	??_read_databyte
 11530  16C0  0878               	movf	??_read_databyte,w
 11531  16C1  00F2               	movwf	?_i2c_write_handler_byte+2
 11532  16C2  3197  279E         	fcall	_i2c_write_handler_byte
 11533  16C4  0008               	return
 11534  16C5                     __end_of_read_databyte:	
 11535                           
 11536                           	psect	text67
 11537  179E                     __ptext67:	
 11538 ;; *************** function _i2c_write_handler_byte *****************
 11539 ;; Defined at:
 11540 ;;		line 306 in file "i2c_Api.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;  reg             2    0[COMMON] int 
 11543 ;;  i2c_data        1    2[COMMON] unsigned char 
 11544 ;; Auto vars:     Size  Location     Type
 11545 ;;  i               2    4[COMMON] int 
 11546 ;; Return value:  Size  Location     Type
 11547 ;;		None               void
 11548 ;; Registers used:
 11549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
 11550 ;; Tracked objects:
 11551 ;;		On entry : 0/0
 11552 ;;		On exit  : 0/0
 11553 ;;		Unchanged: 0/0
 11554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11555 ;;      Params:         3       0       0       0       0       0       0       0
 11556 ;;      Locals:         2       0       0       0       0       0       0       0
 11557 ;;      Temps:          1       0       0       0       0       0       0       0
 11558 ;;      Totals:         6       0       0       0       0       0       0       0
 11559 ;;Total ram usage:        6 bytes
 11560 ;; Hardware stack levels used:    1
 11561 ;; This function calls:
 11562 ;;		Nothing
 11563 ;; This function is called by:
 11564 ;;		_read_databyte
 11565 ;; This function uses a non-reentrant model
 11566 ;;
 11567                           
 11568                           
 11569                           ;psect for function _i2c_write_handler_byte
 11570  179E                     _i2c_write_handler_byte:	
 11571                           
 11572                           ;i2c_Api.c: 307: int i;
 11573                           ;i2c_Api.c: 309: for (i = 0; i < 7; i++)
 11574                           
 11575                           ;incstack = 0
 11576                           ; Regs used in _i2c_write_handler_byte: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1]
 11577  179E  01F4               	clrf	i2c_write_handler_byte@i
 11578  179F  01F5               	clrf	i2c_write_handler_byte@i+1
 11579  17A0                     L8:	
 11580  17A0  0875               	movf	i2c_write_handler_byte@i+1,w
 11581  17A1  3A80               	xorlw	128
 11582  17A2  00FF               	movwf	127
 11583  17A3  3080               	movlw	128
 11584  17A4  027F               	subwf	127,w
 11585  17A5  1D03               	skipz
 11586  17A6  2FA9               	goto	u384_25
 11587  17A7  3007               	movlw	7
 11588  17A8  0274               	subwf	i2c_write_handler_byte@i,w
 11589  17A9                     u384_25:	
 11590  17A9  1803               	btfsc	3,0
 11591  17AA  0008               	return
 11592                           
 11593                           ;i2c_Api.c: 310: {
 11594                           ;i2c_Api.c: 311: if (i2c_rx_data_buff_byte[i] == 0xFB)
 11595  17AB  0874               	movf	i2c_write_handler_byte@i,w
 11596  17AC  3E4C               	addlw	_i2c_rx_data_buff_byte& (0+255)
 11597  17AD  0086               	movwf	6
 11598  17AE  3001               	movlw	1	; select bank2/3
 11599  17AF  0087               	movwf	7
 11600  17B0  0801               	movf	1,w
 11601  17B1  3AFB               	xorlw	251
 11602  17B2  1D03               	skipz
 11603  17B3  2FC7               	goto	i1l4290
 11604                           
 11605                           ;i2c_Api.c: 312: {
 11606                           ;i2c_Api.c: 313: i2c_rx_radd_buff_byte[i] = reg;
 11607  17B4  3574               	lslf	i2c_write_handler_byte@i,w
 11608  17B5  3E3E               	addlw	_i2c_rx_radd_buff_byte& (0+255)
 11609  17B6  0086               	movwf	6
 11610  17B7  3001               	movlw	1	; select bank2/3
 11611  17B8  0087               	movwf	7
 11612  17B9  0870               	movf	i2c_write_handler_byte@reg,w
 11613  17BA  3FC0               	movwi [0]fsr1
 11614  17BB  0871               	movf	i2c_write_handler_byte@reg+1,w
 11615  17BC  3FC1               	movwi [1]fsr1
 11616                           
 11617                           ;i2c_Api.c: 314: i2c_rx_data_buff_byte[i] = i2c_data;
 11618  17BD  0872               	movf	i2c_write_handler_byte@i2c_data,w
 11619  17BE  00F3               	movwf	??_i2c_write_handler_byte
 11620  17BF  0874               	movf	i2c_write_handler_byte@i,w
 11621  17C0  3E4C               	addlw	_i2c_rx_data_buff_byte& (0+255)
 11622  17C1  0086               	movwf	6
 11623  17C2  3001               	movlw	1	; select bank2/3
 11624  17C3  0087               	movwf	7
 11625  17C4  0873               	movf	??_i2c_write_handler_byte,w
 11626  17C5  0081               	movwf	1
 11627                           
 11628                           ;i2c_Api.c: 315: break;
 11629  17C6  0008               	return
 11630  17C7                     i1l4290:	
 11631  17C7  3001               	movlw	1
 11632  17C8  07F4               	addwf	i2c_write_handler_byte@i,f
 11633  17C9  3000               	movlw	0
 11634  17CA  3DF5               	addwfc	i2c_write_handler_byte@i+1,f
 11635  17CB  2FA0               	goto	L8
 11636  17CC                     __end_of_i2c_write_handler_byte:	
 11637                           
 11638                           	psect	text68
 11639  1587                     __ptext68:	
 11640 ;; *************** function _i2c_read_handler *****************
 11641 ;; Defined at:
 11642 ;;		line 277 in file "i2c_Api.c"
 11643 ;; Parameters:    Size  Location     Type
 11644 ;;  reg             2    6[COMMON] int 
 11645 ;; Auto vars:     Size  Location     Type
 11646 ;;		None
 11647 ;; Return value:  Size  Location     Type
 11648 ;;                  1    wreg      unsigned char 
 11649 ;; Registers used:
 11650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 11651 ;; Tracked objects:
 11652 ;;		On entry : 0/0
 11653 ;;		On exit  : 0/0
 11654 ;;		Unchanged: 0/0
 11655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11656 ;;      Params:         2       0       0       0       0       0       0       0
 11657 ;;      Locals:         0       0       0       0       0       0       0       0
 11658 ;;      Temps:          0       0       0       0       0       0       0       0
 11659 ;;      Totals:         2       0       0       0       0       0       0       0
 11660 ;;Total ram usage:        2 bytes
 11661 ;; Hardware stack levels used:    1
 11662 ;; Hardware stack levels required when called:    1
 11663 ;; This function calls:
 11664 ;;		_pop_i2c_reply_status
 11665 ;; This function is called by:
 11666 ;;		_work_i2c_handler
 11667 ;; This function uses a non-reentrant model
 11668 ;;
 11669                           
 11670                           
 11671                           ;psect for function _i2c_read_handler
 11672  1587                     _i2c_read_handler:	
 11673                           
 11674                           ;i2c_Api.c: 278: return pop_i2c_reply_status(reg);
 11675                           
 11676                           ;incstack = 0
 11677                           ; Regs used in _i2c_read_handler: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 11678  1587  0877               	movf	i2c_read_handler@reg+1,w
 11679  1588  01F1               	clrf	?_pop_i2c_reply_status+1
 11680  1589  07F1               	addwf	?_pop_i2c_reply_status+1,f
 11681  158A  0876               	movf	i2c_read_handler@reg,w
 11682  158B  01F0               	clrf	?_pop_i2c_reply_status
 11683  158C  07F0               	addwf	?_pop_i2c_reply_status,f
 11684  158D  318F  2757         	fcall	_pop_i2c_reply_status
 11685  158F  0008               	return
 11686  1590                     __end_of_i2c_read_handler:	
 11687                           
 11688                           	psect	text69
 11689  0F57                     __ptext69:	
 11690 ;; *************** function _pop_i2c_reply_status *****************
 11691 ;; Defined at:
 11692 ;;		line 204 in file "i2c_Api.c"
 11693 ;; Parameters:    Size  Location     Type
 11694 ;;  reg             2    0[COMMON] int 
 11695 ;; Auto vars:     Size  Location     Type
 11696 ;;  i               2    4[COMMON] int 
 11697 ;;  buff            1    3[COMMON] unsigned char 
 11698 ;; Return value:  Size  Location     Type
 11699 ;;                  1    wreg      unsigned char 
 11700 ;; Registers used:
 11701 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11707 ;;      Params:         2       0       0       0       0       0       0       0
 11708 ;;      Locals:         3       0       0       0       0       0       0       0
 11709 ;;      Temps:          1       0       0       0       0       0       0       0
 11710 ;;      Totals:         6       0       0       0       0       0       0       0
 11711 ;;Total ram usage:        6 bytes
 11712 ;; Hardware stack levels used:    1
 11713 ;; This function calls:
 11714 ;;		Nothing
 11715 ;; This function is called by:
 11716 ;;		_i2c_read_handler
 11717 ;; This function uses a non-reentrant model
 11718 ;;
 11719                           
 11720                           
 11721                           ;psect for function _pop_i2c_reply_status
 11722  0F57                     _pop_i2c_reply_status:	
 11723                           
 11724                           ;i2c_Api.c: 205: int i;
 11725                           ;i2c_Api.c: 206: unsigned char buff;
 11726                           ;i2c_Api.c: 208: for (i = 0; i < 6; i++)
 11727                           
 11728                           ;incstack = 0
 11729                           ; Regs used in _pop_i2c_reply_status: [wreg-fsr1h+status,2+status,0+btemp+1]
 11730  0F57  01F4               	clrf	pop_i2c_reply_status@i
 11731  0F58  01F5               	clrf	pop_i2c_reply_status@i+1
 11732  0F59  0875               	movf	pop_i2c_reply_status@i+1,w
 11733  0F5A  3A80               	xorlw	128
 11734  0F5B  00FF               	movwf	127
 11735  0F5C  3080               	movlw	128
 11736  0F5D  027F               	subwf	127,w
 11737  0F5E  1D03               	skipz
 11738  0F5F  2F62               	goto	u378_25
 11739  0F60  3006               	movlw	6
 11740  0F61  0274               	subwf	pop_i2c_reply_status@i,w
 11741  0F62                     u378_25:	
 11742  0F62  1803               	btfsc	3,0
 11743  0F63  2F8F               	goto	i1l4246
 11744  0F64                     i1l4236:	
 11745                           
 11746                           ;i2c_Api.c: 209: {
 11747                           ;i2c_Api.c: 210: if (i2c_tx_radd_buff_byte[i] == i2c_reg_add_byte[reg])
 11748  0F64  0870               	movf	pop_i2c_reply_status@reg,w
 11749  0F65  3EA0               	addlw	_i2c_reg_add_byte& (0+255)
 11750  0F66  0086               	movwf	6
 11751  0F67  3001               	movlw	1	; select bank3/4
 11752  0F68  0087               	movwf	7
 11753  0F69  0874               	movf	pop_i2c_reply_status@i,w
 11754  0F6A  3ED1               	addlw	_i2c_tx_radd_buff_byte& (0+255)
 11755  0F6B  0084               	movwf	4
 11756  0F6C  0185               	clrf	5
 11757  0F6D  0800               	movf	0,w
 11758  0F6E  0601               	xorwf	1,w
 11759  0F6F  1D03               	skipz
 11760  0F70  2F80               	goto	i1l4242
 11761                           
 11762                           ;i2c_Api.c: 211: {
 11763                           ;i2c_Api.c: 212: buff = i2c_tx_data_buff_byte[i];
 11764  0F71  0874               	movf	pop_i2c_reply_status@i,w
 11765  0F72  3E61               	addlw	_i2c_tx_data_buff_byte& (0+255)
 11766  0F73  0086               	movwf	6
 11767  0F74  3001               	movlw	1	; select bank2/3
 11768  0F75  0087               	movwf	7
 11769  0F76  0801               	movf	1,w
 11770  0F77  00F2               	movwf	??_pop_i2c_reply_status
 11771  0F78  0872               	movf	??_pop_i2c_reply_status,w
 11772  0F79  00F3               	movwf	pop_i2c_reply_status@buff
 11773                           
 11774                           ;i2c_Api.c: 213: i2c_interrupt_flag--;
 11775  0F7A  30FF               	movlw	255
 11776  0F7B  0021               	movlb	1	; select bank1
 11777  0F7C  07A6               	addwf	_i2c_interrupt_flag^(0+128),f
 11778  0F7D  30FF               	movlw	255
 11779  0F7E  3DA7               	addwfc	(_i2c_interrupt_flag+1)^(0+128),f
 11780                           
 11781                           ;i2c_Api.c: 214: break;
 11782  0F7F  2F8F               	goto	i1l4246
 11783  0F80                     i1l4242:	
 11784  0F80  3001               	movlw	1
 11785  0F81  07F4               	addwf	pop_i2c_reply_status@i,f
 11786  0F82  3000               	movlw	0
 11787  0F83  3DF5               	addwfc	pop_i2c_reply_status@i+1,f
 11788  0F84  0875               	movf	pop_i2c_reply_status@i+1,w
 11789  0F85  3A80               	xorlw	128
 11790  0F86  00FF               	movwf	127
 11791  0F87  3080               	movlw	128
 11792  0F88  027F               	subwf	127,w
 11793  0F89  1D03               	skipz
 11794  0F8A  2F8D               	goto	u380_25
 11795  0F8B  3006               	movlw	6
 11796  0F8C  0274               	subwf	pop_i2c_reply_status@i,w
 11797  0F8D                     u380_25:	
 11798  0F8D  1C03               	skipc
 11799  0F8E  2F64               	goto	i1l4236
 11800  0F8F                     i1l4246:	
 11801                           
 11802                           ;i2c_Api.c: 215: }
 11803                           ;i2c_Api.c: 216: }
 11804                           ;i2c_Api.c: 217: if (i >= 6)
 11805  0F8F  0875               	movf	pop_i2c_reply_status@i+1,w
 11806  0F90  3A80               	xorlw	128
 11807  0F91  00FF               	movwf	127
 11808  0F92  3080               	movlw	128
 11809  0F93  027F               	subwf	127,w
 11810  0F94  1D03               	skipz
 11811  0F95  2F98               	goto	u381_25
 11812  0F96  3006               	movlw	6
 11813  0F97  0274               	subwf	pop_i2c_reply_status@i,w
 11814  0F98                     u381_25:	
 11815  0F98  1803               	btfsc	3,0
 11816  0F99  2FB0               	goto	i1l4266
 11817  0F9A  2FE2               	goto	i1l4272
 11818  0F9B                     i1l4250:	
 11819                           ;i2c_Api.c: 236: {
 11820                           ;i2c_Api.c: 237: case 0xAA:
 11821                           
 11822                           ;i2c_Api.c: 218: {
 11823                           ;i2c_Api.c: 235: switch (i2c_reg_add_byte[reg])
 11824                           
 11825                           
 11826                           ;i2c_Api.c: 238: if (i2c_tx_radd_buff_byte[0] == 0xFF)
 11827  0F9B  0021               	movlb	1	; select bank1
 11828  0F9C  0851               	movf	_i2c_tx_radd_buff_byte^(0+128),w
 11829  0F9D  3AFF               	xorlw	255
 11830  0F9E  1903               	btfsc	3,2
 11831  0F9F  2FAB               	goto	i1l4262
 11832                           
 11833                           ;i2c_Api.c: 242: {
 11834                           ;i2c_Api.c: 243: buff = i2c_tx_radd_buff_byte[0];
 11835                           
 11836                           ;i2c_Api.c: 241: } else
 11837                           
 11838                           ;i2c_Api.c: 239: {
 11839                           ;i2c_Api.c: 240: buff = 0xFF;
 11840  0FA0  0851               	movf	_i2c_tx_radd_buff_byte^(0+128),w
 11841  0FA1  2FAC               	goto	L13
 11842  0FA2                     i1l4256:	
 11843                           ;i2c_Api.c: 246: case 0xBC:
 11844                           
 11845                           ;i2c_Api.c: 244: }
 11846                           ;i2c_Api.c: 245: break;
 11847                           
 11848                           
 11849                           ;i2c_Api.c: 247: buff = relay0_status;
 11850  0FA2  0021               	movlb	1	; select bank1
 11851  0FA3  0838               	movf	_relay0_status^(0+128),w
 11852  0FA4  2FAC               	goto	L13
 11853  0FA5                     i1l4258:	
 11854                           ;i2c_Api.c: 249: case 0xBD:
 11855                           
 11856                           ;i2c_Api.c: 248: break;
 11857                           
 11858                           
 11859                           ;i2c_Api.c: 250: buff = relay1_status;
 11860  0FA5  0021               	movlb	1	; select bank1
 11861  0FA6  083C               	movf	_relay1_status^(0+128),w
 11862  0FA7  2FAC               	goto	L13
 11863  0FA8                     i1l4260:	
 11864                           ;i2c_Api.c: 252: case 0x60:
 11865                           
 11866                           ;i2c_Api.c: 251: break;
 11867                           
 11868                           
 11869                           ;i2c_Api.c: 253: buff = ldr_value;
 11870  0FA8  0021               	movlb	1	; select bank1
 11871  0FA9  0832               	movf	_ldr_value^(0+128),w
 11872  0FAA  2FAC               	goto	L13
 11873  0FAB                     i1l4262:	
 11874                           ;i2c_Api.c: 256: default:
 11875                           
 11876                           ;i2c_Api.c: 254: break;
 11877                           
 11878                           
 11879                           ;i2c_Api.c: 257: buff = 0xFF;
 11880  0FAB  30FF               	movlw	255
 11881  0FAC                     L13:	
 11882  0FAC  00F2               	movwf	??_pop_i2c_reply_status
 11883  0FAD  0872               	movf	??_pop_i2c_reply_status,w
 11884  0FAE  00F3               	movwf	pop_i2c_reply_status@buff
 11885                           
 11886                           ;i2c_Api.c: 259: }
 11887                           
 11888                           ;i2c_Api.c: 258: break;
 11889  0FAF  2FFE               	goto	i1l4276
 11890  0FB0                     i1l4266:	
 11891  0FB0  0870               	movf	pop_i2c_reply_status@reg,w
 11892  0FB1  3EA0               	addlw	_i2c_reg_add_byte& (0+255)
 11893  0FB2  0086               	movwf	6
 11894  0FB3  3001               	movlw	1	; select bank3/4
 11895  0FB4  0087               	movwf	7
 11896  0FB5  0801               	movf	1,w
 11897                           
 11898                           ; Switch size 1, requested type "space"
 11899                           ; Number of cases is 4, Range of values is 96 to 189
 11900                           ; switch strategies available:
 11901                           ; Name         Instructions Cycles
 11902                           ; simple_byte           13     7 (average)
 11903                           ; direct_byte          197     9 (fixed)
 11904                           ; jumptable            263     9 (fixed)
 11905                           ;	Chosen strategy is simple_byte
 11906  0FB6  3A60               	xorlw	96	; case 96
 11907  0FB7  1903               	skipnz
 11908  0FB8  2FA8               	goto	i1l4260
 11909  0FB9  3ACA               	xorlw	202	; case 170
 11910  0FBA  1903               	skipnz
 11911  0FBB  2F9B               	goto	i1l4250
 11912  0FBC  3A16               	xorlw	22	; case 188
 11913  0FBD  1903               	skipnz
 11914  0FBE  2FA2               	goto	i1l4256
 11915  0FBF  3A01               	xorlw	1	; case 189
 11916  0FC0  1903               	skipnz
 11917  0FC1  2FA5               	goto	i1l4258
 11918  0FC2  2FAB               	goto	i1l4262
 11919                           
 11920                           ;i2c_Api.c: 261: } else
 11921  0FC3  2FFE               	goto	i1l4276
 11922  0FC4                     i1l4268:	
 11923                           ;i2c_Api.c: 262: {
 11924                           ;i2c_Api.c: 264: while (i < (6 - 1))
 11925                           
 11926                           
 11927                           ;i2c_Api.c: 265: {
 11928                           ;i2c_Api.c: 266: i2c_tx_radd_buff_byte[i] = i2c_tx_radd_buff_byte[i + 1];
 11929  0FC4  0A74               	incf	pop_i2c_reply_status@i,w
 11930  0FC5  3ED1               	addlw	_i2c_tx_radd_buff_byte& (0+255)
 11931  0FC6  0086               	movwf	6
 11932  0FC7  0187               	clrf	7
 11933  0FC8  0801               	movf	1,w
 11934  0FC9  00F2               	movwf	??_pop_i2c_reply_status
 11935  0FCA  0874               	movf	pop_i2c_reply_status@i,w
 11936  0FCB  3ED1               	addlw	_i2c_tx_radd_buff_byte& (0+255)
 11937  0FCC  0086               	movwf	6
 11938  0FCD  0187               	clrf	7
 11939  0FCE  0872               	movf	??_pop_i2c_reply_status,w
 11940  0FCF  0081               	movwf	1
 11941                           
 11942                           ;i2c_Api.c: 267: i2c_tx_data_buff_byte[i] = i2c_tx_data_buff_byte[i + 1];
 11943  0FD0  0A74               	incf	pop_i2c_reply_status@i,w
 11944  0FD1  3E61               	addlw	_i2c_tx_data_buff_byte& (0+255)
 11945  0FD2  0086               	movwf	6
 11946  0FD3  3001               	movlw	1	; select bank2/3
 11947  0FD4  0087               	movwf	7
 11948  0FD5  0801               	movf	1,w
 11949  0FD6  00F2               	movwf	??_pop_i2c_reply_status
 11950  0FD7  0874               	movf	pop_i2c_reply_status@i,w
 11951  0FD8  3E61               	addlw	_i2c_tx_data_buff_byte& (0+255)
 11952  0FD9  0086               	movwf	6
 11953  0FDA  3001               	movlw	1	; select bank2/3
 11954  0FDB  0087               	movwf	7
 11955  0FDC  0872               	movf	??_pop_i2c_reply_status,w
 11956  0FDD  0081               	movwf	1
 11957                           
 11958                           ;i2c_Api.c: 268: i++;
 11959  0FDE  3001               	movlw	1
 11960  0FDF  07F4               	addwf	pop_i2c_reply_status@i,f
 11961  0FE0  3000               	movlw	0
 11962  0FE1  3DF5               	addwfc	pop_i2c_reply_status@i+1,f
 11963  0FE2                     i1l4272:	
 11964  0FE2  0875               	movf	pop_i2c_reply_status@i+1,w
 11965  0FE3  3A80               	xorlw	128
 11966  0FE4  00FF               	movwf	127
 11967  0FE5  3080               	movlw	128
 11968  0FE6  027F               	subwf	127,w
 11969  0FE7  1D03               	skipz
 11970  0FE8  2FEB               	goto	u383_25
 11971  0FE9  3005               	movlw	5
 11972  0FEA  0274               	subwf	pop_i2c_reply_status@i,w
 11973  0FEB                     u383_25:	
 11974  0FEB  1C03               	skipc
 11975  0FEC  2FC4               	goto	i1l4268
 11976                           
 11977                           ;i2c_Api.c: 269: }
 11978                           ;i2c_Api.c: 270: i2c_tx_radd_buff_byte[i] = 0xFF;
 11979  0FED  30FF               	movlw	255
 11980  0FEE  00F2               	movwf	??_pop_i2c_reply_status
 11981  0FEF  0874               	movf	pop_i2c_reply_status@i,w
 11982  0FF0  3ED1               	addlw	_i2c_tx_radd_buff_byte& (0+255)
 11983  0FF1  0086               	movwf	6
 11984  0FF2  0187               	clrf	7
 11985  0FF3  0872               	movf	??_pop_i2c_reply_status,w
 11986  0FF4  0081               	movwf	1
 11987                           
 11988                           ;i2c_Api.c: 271: i2c_tx_data_buff_byte[i] = 0xFF;
 11989  0FF5  30FF               	movlw	255
 11990  0FF6  00F2               	movwf	??_pop_i2c_reply_status
 11991  0FF7  0874               	movf	pop_i2c_reply_status@i,w
 11992  0FF8  3E61               	addlw	_i2c_tx_data_buff_byte& (0+255)
 11993  0FF9  0086               	movwf	6
 11994  0FFA  3001               	movlw	1	; select bank2/3
 11995  0FFB  0087               	movwf	7
 11996  0FFC  0872               	movf	??_pop_i2c_reply_status,w
 11997  0FFD  0081               	movwf	1
 11998  0FFE                     i1l4276:	
 11999                           
 12000                           ;i2c_Api.c: 272: }
 12001                           ;i2c_Api.c: 273: return buff;
 12002  0FFE  0873               	movf	pop_i2c_reply_status@buff,w
 12003  0FFF  0008               	return
 12004  1000                     __end_of_pop_i2c_reply_status:	
 12005                           
 12006                           	psect	text70
 12007  15AD                     __ptext70:	
 12008 ;; *************** function _i2c_bit_info *****************
 12009 ;; Defined at:
 12010 ;;		line 117 in file "i2c_Api.c"
 12011 ;; Parameters:    Size  Location     Type
 12012 ;;		None
 12013 ;; Auto vars:     Size  Location     Type
 12014 ;;		None
 12015 ;; Return value:  Size  Location     Type
 12016 ;;                  2    0[COMMON] int 
 12017 ;; Registers used:
 12018 ;;		wreg, status,2, status,0
 12019 ;; Tracked objects:
 12020 ;;		On entry : 0/0
 12021 ;;		On exit  : 0/0
 12022 ;;		Unchanged: 0/0
 12023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12024 ;;      Params:         2       0       0       0       0       0       0       0
 12025 ;;      Locals:         0       0       0       0       0       0       0       0
 12026 ;;      Temps:          2       0       0       0       0       0       0       0
 12027 ;;      Totals:         4       0       0       0       0       0       0       0
 12028 ;;Total ram usage:        4 bytes
 12029 ;; Hardware stack levels used:    1
 12030 ;; This function calls:
 12031 ;;		Nothing
 12032 ;; This function is called by:
 12033 ;;		_work_i2c_handler
 12034 ;; This function uses a non-reentrant model
 12035 ;;
 12036                           
 12037                           
 12038                           ;psect for function _i2c_bit_info
 12039  15AD                     _i2c_bit_info:	
 12040                           
 12041                           ;i2c_Api.c: 118: return SSPSTATbits.R_nW;
 12042                           
 12043                           ;incstack = 0
 12044                           ; Regs used in _i2c_bit_info: [wreg+status,2+status,0]
 12045  15AD  0024               	movlb	4	; select bank4
 12046  15AE  0C14               	rrf	20,w	;volatile
 12047  15AF  0C89               	rrf	9,f
 12048  15B0  3901               	andlw	1
 12049  15B1  00F2               	movwf	??_i2c_bit_info
 12050  15B2  01F3               	clrf	??_i2c_bit_info+1
 12051  15B3  0872               	movf	??_i2c_bit_info,w
 12052  15B4  00F0               	movwf	?_i2c_bit_info
 12053  15B5  0873               	movf	??_i2c_bit_info+1,w
 12054  15B6  00F1               	movwf	?_i2c_bit_info+1
 12055  15B7  0008               	return
 12056  15B8                     __end_of_i2c_bit_info:	
 12057                           
 12058                           	psect	text71
 12059  15A2                     __ptext71:	
 12060 ;; *************** function _i2c_data_rcv *****************
 12061 ;; Defined at:
 12062 ;;		line 112 in file "i2c_Api.c"
 12063 ;; Parameters:    Size  Location     Type
 12064 ;;		None
 12065 ;; Auto vars:     Size  Location     Type
 12066 ;;		None
 12067 ;; Return value:  Size  Location     Type
 12068 ;;                  2    0[COMMON] int 
 12069 ;; Registers used:
 12070 ;;		wreg, status,2, status,0
 12071 ;; Tracked objects:
 12072 ;;		On entry : 0/0
 12073 ;;		On exit  : 0/0
 12074 ;;		Unchanged: 0/0
 12075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12076 ;;      Params:         2       0       0       0       0       0       0       0
 12077 ;;      Locals:         0       0       0       0       0       0       0       0
 12078 ;;      Temps:          2       0       0       0       0       0       0       0
 12079 ;;      Totals:         4       0       0       0       0       0       0       0
 12080 ;;Total ram usage:        4 bytes
 12081 ;; Hardware stack levels used:    1
 12082 ;; This function calls:
 12083 ;;		Nothing
 12084 ;; This function is called by:
 12085 ;;		_work_i2c_handler
 12086 ;; This function uses a non-reentrant model
 12087 ;;
 12088                           
 12089                           
 12090                           ;psect for function _i2c_data_rcv
 12091  15A2                     _i2c_data_rcv:	
 12092                           
 12093                           ;i2c_Api.c: 113: return SSPSTATbits.D_nA;
 12094                           
 12095                           ;incstack = 0
 12096                           ; Regs used in _i2c_data_rcv: [wreg+status,2+status,0]
 12097  15A2  0024               	movlb	4	; select bank4
 12098  15A3  0E14               	swapf	20,w	;volatile
 12099  15A4  0C89               	rrf	9,f
 12100  15A5  3901               	andlw	1
 12101  15A6  00F2               	movwf	??_i2c_data_rcv
 12102  15A7  01F3               	clrf	??_i2c_data_rcv+1
 12103  15A8  0872               	movf	??_i2c_data_rcv,w
 12104  15A9  00F0               	movwf	?_i2c_data_rcv
 12105  15AA  0873               	movf	??_i2c_data_rcv+1,w
 12106  15AB  00F1               	movwf	?_i2c_data_rcv+1
 12107  15AC  0008               	return
 12108  15AD                     __end_of_i2c_data_rcv:	
 12109  007E                     btemp	set	126	;btemp
 12110  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    13
    Data        54
    BSS         204
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     54      67
    BANK1            80     10      78
    BANK2            80      0      78
    BANK3            80     15      78
    BANK4            80      0      36
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    ?___lbtoft	float  size(1) Largest target is 0

    ?___ftpack	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___ftdiv	float  size(1) Largest target is 0

    ?_verify_byte_address	int  size(1) Largest target is 0

    ?_get_i2c_regadd_from_master_word	int  size(1) Largest target is 0

    ?_verify_word_address	int  size(1) Largest target is 0

    ?_get_i2c_regadd_from_master_byte	int  size(1) Largest target is 0

    ?_i2c_bit_info	int  size(1) Largest target is 0

    ?_i2c_data_rcv	int  size(1) Largest target is 0

    ?_memset	PTR void  size(2) Largest target is 14
		 -> i2c_rx_data_buff_word_msb(BANK2[7]), i2c_rx_data_buff_word_lsb(BANK2[7]), i2c_rx_radd_buff_word(BANK3[14]), i2c_rx_radd_buff_byte(BANK2[14]), 
		 -> i2c_rx_data_buff_byte(BANK2[7]), i2c_tx_data_buff_byte(BANK2[7]), i2c_tx_radd_buff_byte(BANK1[7]), 

    memset@p1	PTR void  size(2) Largest target is 14
		 -> i2c_rx_data_buff_word_msb(BANK2[7]), i2c_rx_data_buff_word_lsb(BANK2[7]), i2c_rx_radd_buff_word(BANK3[14]), i2c_rx_radd_buff_byte(BANK2[14]), 
		 -> i2c_rx_data_buff_byte(BANK2[7]), i2c_tx_data_buff_byte(BANK2[7]), i2c_tx_radd_buff_byte(BANK1[7]), 

    memset@p	PTR unsigned char  size(2) Largest target is 14
		 -> i2c_rx_data_buff_word_msb(BANK2[7]), i2c_rx_data_buff_word_lsb(BANK2[7]), i2c_rx_radd_buff_word(BANK3[14]), i2c_rx_radd_buff_byte(BANK2[14]), 
		 -> i2c_rx_data_buff_byte(BANK2[7]), i2c_tx_data_buff_byte(BANK2[7]), i2c_tx_radd_buff_byte(BANK1[7]), 

    sp__memset	PTR void  size(2) Largest target is 14
		 -> i2c_rx_data_buff_word_msb(BANK2[7]), i2c_rx_data_buff_word_lsb(BANK2[7]), i2c_rx_radd_buff_word(BANK3[14]), i2c_rx_radd_buff_byte(BANK2[14]), 
		 -> i2c_rx_data_buff_byte(BANK2[7]), i2c_tx_data_buff_byte(BANK2[7]), i2c_tx_radd_buff_byte(BANK1[7]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _InterruptServiceRoutine in COMMON

    _work_i2c_handler->_read_dataword
    _read_dataword->_i2c_write_handler_word
    _read_databyte->_i2c_write_handler_byte
    _i2c_read_handler->_pop_i2c_reply_status

Critical Paths under _main in BANK0

    _main->_adc_read_service
    _i2c_dataword_handler->_cs6422_write_word
    _cs6422_write_word->_data_ready
    _cs6422_write_word->_cs6422_write_bit
    _cs6422_write_bit->_strobe_pulse
    _i2c_databyte_handler->_get_i2c_regadd_from_master_byte
    _adc_read_service->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lbtoft
    _motion_detect->_push_i2c_reply_status
    _sensor1_detect->_push_i2c_reply_status
    _sensor0_detect->_push_i2c_reply_status
    _GetKeyPressed->_push_i2c_reply_status
    _push_i2c_reply_status->_verify_byte_address
    _push_i2c_reply_status->_verify_word_address
    _init_i2c->_memset
    _cpu_watchdog_handler->_auto_on

Critical Paths under _InterruptServiceRoutine in BANK0

    _InterruptServiceRoutine->_work_i2c_handler

Critical Paths under _main in BANK1

    _adc_read_service->___fttol

Critical Paths under _InterruptServiceRoutine in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptServiceRoutine in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InterruptServiceRoutine in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _InterruptServiceRoutine in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _InterruptServiceRoutine in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _InterruptServiceRoutine in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    15      4   10746
                                              6 BANK1      4     0      4
                                              0 BANK3     15    15      0
               _cpu_watchdog_handler
                            _auto_on
                           _init_mcu
                        _init_keypad
                      _GetKeyPressed
                     _sensor0_detect
                     _sensor1_detect
                      _motion_detect
                   _adc_read_service
                   _ir_level_service
              _i2c_interrupt_handler
                   _shutdown_service
               _i2c_databyte_handler
               _i2c_dataword_handler
 ---------------------------------------------------------------------------------
 (1) _i2c_dataword_handler                                 8     8      0    1932
                                             29 BANK0      8     8      0
    _get_i2c_regadd_from_master_word
   _get_i2c_msg_from_master_word_msb
   _get_i2c_msg_from_master_word_lsb
                  _cs6422_write_word
 ---------------------------------------------------------------------------------
 (2) _cs6422_write_word                                   13     9      4     560
                                             16 BANK0     13     9      4
                       _strobe_pulse
                         _data_ready
                   _cs6422_write_bit
 ---------------------------------------------------------------------------------
 (3) _cs6422_write_bit                                     2     0      2      31
                                             14 BANK0      2     0      2
                       _strobe_pulse
 ---------------------------------------------------------------------------------
 (4) _strobe_pulse                                         1     1      0       0
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _data_ready                                           3     1      2      31
                                             13 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _get_i2c_msg_from_master_word_lsb                     4     4      0     164
                                             13 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _get_i2c_msg_from_master_word_msb                     4     4      0     164
                                             13 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _get_i2c_regadd_from_master_word                      6     4      2     164
                                             13 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _i2c_databyte_handler                                 6     6      0    2228
                                             19 BANK0      6     6      0
    _get_i2c_regadd_from_master_byte
       _get_i2c_msg_from_master_byte
                     _echo_cancel_on
                    _echo_cancel_off
                       _init_sensor0
                     _deinit_sensor0
                       _init_sensor1
                     _deinit_sensor1
                        _init_motion
                      _deinit_motion
                           _init_ldr
                         _deinit_ldr
                            _init_ir
                          _deinit_ir
                      _deinit_keypad
 ---------------------------------------------------------------------------------
 (2) _deinit_keypad                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _deinit_ir                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ir                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _deinit_ldr                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ldr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _deinit_motion                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_motion                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _deinit_sensor1                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_sensor1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _deinit_sensor0                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_sensor0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _echo_cancel_off                                      2     2      0       0
                                             13 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _echo_cancel_on                                       2     2      0       0
                                             13 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _get_i2c_msg_from_master_byte                         4     4      0     164
                                             13 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _get_i2c_regadd_from_master_byte                      6     4      2     164
                                             13 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _shutdown_service                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_interrupt_handler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ir_level_service                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_read_service                                     1     1      0    2338
                                             53 BANK0      1     1      0
              _push_i2c_reply_status
                           _read_ldr
                            ___ftdiv
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3     343
                                             21 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     371
                                             45 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftdiv (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6     732
                                             29 BANK0     16    10      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     312
                                             13 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _read_ldr                                             2     2      0       0
                                             13 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motion_detect                                        1     1      0     892
                                             26 BANK0      1     1      0
              _push_i2c_reply_status
 ---------------------------------------------------------------------------------
 (1) _sensor1_detect                                       1     1      0     892
                                             26 BANK0      1     1      0
              _push_i2c_reply_status
 ---------------------------------------------------------------------------------
 (1) _sensor0_detect                                       1     1      0     892
                                             26 BANK0      1     1      0
              _push_i2c_reply_status
 ---------------------------------------------------------------------------------
 (1) _GetKeyPressed                                        6     6      0    1232
                                             26 BANK0      4     4      0
              _push_i2c_reply_status
 ---------------------------------------------------------------------------------
 (2) _push_i2c_reply_status                                7     6      1     892
                                             19 BANK0      7     6      1
                _verify_byte_address
                _verify_word_address
 ---------------------------------------------------------------------------------
 (3) _verify_word_address                                  6     3      3     161
                                             13 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _verify_byte_address                                  6     3      3     161
                                             13 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _init_keypad                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_mcu                                             0     0      0     137
                          _init_gpio
                _init_internal_clock
                           _init_i2c
 ---------------------------------------------------------------------------------
 (2) _init_i2c                                             0     0      0     137
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               9     3      6     137
                                             13 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _init_internal_clock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_gpio                                            0     0      0       0
                       _init_auto_on
                        _init_relay1
                        _init_relay2
                     _init_led_light
                 _init_led_flash_en1
                 _init_led_flash_en2
                        _init_led_ol
                      _init_led_lock
                    _init_led_unlock
              _init_led_phone_button
                  _init_audio_switch
 ---------------------------------------------------------------------------------
 (3) _init_audio_switch                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_led_phone_button                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_led_unlock                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_led_lock                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_led_ol                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_led_flash_en2                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_led_flash_en1                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_led_light                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_relay2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_relay1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_auto_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cpu_watchdog_handler                                 2     2      0       0
                                             16 BANK0      2     2      0
                            _auto_on
 ---------------------------------------------------------------------------------
 (1) _auto_on                                              3     3      0       0
                                             13 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterruptServiceRoutine                              4     4      0    2025
                                             13 COMMON     1     1      0
                                             10 BANK0      3     3      0
                   _work_i2c_handler
 ---------------------------------------------------------------------------------
 (6) _work_i2c_handler                                    10    10      0    2001
                                              0 BANK0     10    10      0
                       _i2c_data_rcv
                       _i2c_bit_info
                   _i2c_read_handler
                      _read_databyte
                      _read_dataword
              i1_verify_word_address
              i1_verify_byte_address
 ---------------------------------------------------------------------------------
 (7) i1_verify_byte_address                                6     3      3     369
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (7) i1_verify_word_address                                6     3      3     369
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (7) _read_dataword                                        6     4      2     380
                                              7 COMMON     6     4      2
             _i2c_write_handler_word
 ---------------------------------------------------------------------------------
 (8) _i2c_write_handler_word                               7     3      4     222
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (7) _read_databyte                                        3     1      2     222
                                              6 COMMON     3     1      2
             _i2c_write_handler_byte
 ---------------------------------------------------------------------------------
 (8) _i2c_write_handler_byte                               6     3      3     156
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (7) _i2c_read_handler                                     2     0      2     362
                                              6 COMMON     2     0      2
               _pop_i2c_reply_status
 ---------------------------------------------------------------------------------
 (8) _pop_i2c_reply_status                                 6     4      2     340
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (7) _i2c_bit_info                                         4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) _i2c_data_rcv                                         4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cpu_watchdog_handler
     _auto_on
   _auto_on
   _init_mcu
     _init_gpio
       _init_auto_on
       _init_relay1
       _init_relay2
       _init_led_light
       _init_led_flash_en1
       _init_led_flash_en2
       _init_led_ol
       _init_led_lock
       _init_led_unlock
       _init_led_phone_button
       _init_audio_switch
     _init_internal_clock
     _init_i2c
       _memset
   _init_keypad
   _GetKeyPressed
     _push_i2c_reply_status
       _verify_byte_address
       _verify_word_address
   _sensor0_detect
     _push_i2c_reply_status
       _verify_byte_address
       _verify_word_address
   _sensor1_detect
     _push_i2c_reply_status
       _verify_byte_address
       _verify_word_address
   _motion_detect
     _push_i2c_reply_status
       _verify_byte_address
       _verify_word_address
   _adc_read_service
     _push_i2c_reply_status
       _verify_byte_address
       _verify_word_address
     _read_ldr
     ___ftdiv
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
   _ir_level_service
   _i2c_interrupt_handler
   _shutdown_service
   _i2c_databyte_handler
     _get_i2c_regadd_from_master_byte
     _get_i2c_msg_from_master_byte
     _echo_cancel_on
     _echo_cancel_off
     _init_sensor0
     _deinit_sensor0
     _init_sensor1
     _deinit_sensor1
     _init_motion
     _deinit_motion
     _init_ldr
     _deinit_ldr
     _init_ir
     _deinit_ir
     _deinit_keypad
   _i2c_dataword_handler
     _get_i2c_regadd_from_master_word
     _get_i2c_msg_from_master_word_msb
     _get_i2c_msg_from_master_word_lsb
     _cs6422_write_word
       _strobe_pulse
       _data_ready
       _cs6422_write_bit
         _strobe_pulse

 _InterruptServiceRoutine (ROOT)
   _work_i2c_handler
     _i2c_data_rcv
     _i2c_bit_info
     _i2c_read_handler
       _pop_i2c_reply_status
     _read_databyte
       _i2c_write_handler_byte
     _read_dataword
       _i2c_write_handler_word
     i1_verify_word_address
     i1_verify_byte_address

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       C       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     15F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     36      43       6       83.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      A      4E       8       97.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4E      10       97.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      F      4E      12       97.5%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      24      14       45.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     16B      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Dec  8 09:37:40 2016

              __size_of_init_led_flash_en1 0005                __size_of_init_led_flash_en2 0007  
                 cs6422_write_bit@data_bit 002E                                __CFG_CP$OFF 0000  
                              _SSPSTATbits 0214                           _ir_level_service 1750  
                              __CFG_LVP$ON 0000                                        l241 06C6  
                                      l412 16FE                                        l244 06E4  
                    i1_verify_byte_address 080D                                        l346 025B  
                                      l387 03E0                                        l591 1792  
                                      l399 050C                                        l930 175B  
                                      l931 1760                                        l927 1751  
                                      l929 1756                                        _CKP 10AC  
                                      _SEN 10B0                      main@i2c_prescaler_ctr 01EA  
                             __CFG_BORV$LO 0000                              _shutdown_flag 00C6  
                                      wreg 0009                              ?_i2c_data_rcv 0070  
                            ?_i2c_bit_info 0070                               ___ftdiv@cntr 0047  
                    pop_i2c_reply_status@i 0074                               ___ftdiv@sign 004C  
                                     l1005 0AC3                                       l1230 0B4A  
                                     l1071 0B90                                       l1080 0BC3  
                                     l1074 0B99                                       l1075 0BB3  
                                     l1076 0B9D                                       l1236 0B61  
                                     l1077 0BA2                                       l1078 0BB9  
                                     l1079 0BBE                                       l5002 0ACA  
                                     l5012 0B05                                       l5100 0100  
                                     l5022 1765                                       l5110 0112  
                                     l5008 0B00                                       l6000 176B  
                                     l6002 0B0B                                       l5034 1794  
                                     l5130 013C                                       l5122 0128  
                                     l5114 0118                                       l5106 010A  
                                     l5036 1798                                       l5300 02C4  
                                     l5220 01E3                                       l5212 01D2  
                                     l5204 01C1                                       l5230 01F8  
                                     l5222 01E7                                       l5214 01D8  
                                     l5206 01C7                                       l5150 015C  
                                     l5142 014F                                       l5134 0142  
                                     l5126 0134                                       l5118 0120  
                                     l5062 00B6                                       l5054 00A4  
                                     l5320 02FD                                       l5080 00D7  
                                     l5330 0331                                       l5314 02E0  
                                     l5250 0229                                       l5170 017F  
                                     l5162 0171                                       l5154 0163  
                                     l5146 0156                                       l5138 0149  
                                     l5074 00CD                                       l5420 0A53  
                                     l5332 0337                                       l5324 0314  
                                     l5308 02D5                                       l5252 022D  
                                     l5244 021A                                       l5236 0203  
                                     l5228 01F2                                       l5180 0190  
                                     l5068 00C0                                       l5404 04F2  
                                     l5414 0A34                                       l5350 036D  
                                     l5326 031A                                       l5318 02F7  
                                     l5262 0247                                       l5246 021E  
                                     l5238 0209                                       l5190 01A7  
                                     l5182 0196                                       l5174 0185  
                                     l5166 0178                                       l5158 0169  
                                     l5094 00F3                                       l5510 07F2  
                                     l5432 08FB                                       l5344 0362  
                                     l5336 034E                                       l5256 0239  
                                     l5088 00E9                                       l5504 07D3  
                                     l5354 0379                                       l5338 0354  
                                     l5282 026E                                       l5274 0260  
                                     l5266 024F                                       l5258 023D  
                                     l5362 0384                                       l5522 0938  
                                     l4802 06ED                                       l4740 08D6  
                                     l5292 02A1                                       l5196 01B2  
                                     l5188 01A1                                       l4902 0C4D  
                                     l4910 0C60                                       l5438 091A  
                                     l5294 02A7                                       l5286 0284  
                                     l5278 0268                                       l5198 01B6  
                                     l5390 0486                                       l5382 043E  
                                     l5288 028A                                       l5528 0957  
                                     l5544 0994                                       l4816 070B  
                                     l4738 08D0                                       l5730 16CC  
                                     l5802 08A5                                       l5298 02BE  
                                     l5538 0975                                       l5394 04AA  
                                     l5386 0462                                       l5378 041A  
                                     l4770 0679                                       l4762 065A  
                                     l4908 0C5C                                       l4932 0C9F  
                                     l4780 069D                                       l4772 067E  
                                     l4756 064E                                       l4862 0BD3  
                                     l4950 0CD2                                       l4926 0C90  
                                     l4934 0CA3                                       l4942 0CB4  
                                     l5582 0DE2                                       l5566 0DB7  
                                     l5398 04CE                                       l4790 06C1  
                                     l4782 06A2                                       l5752 0D3D  
                                     l5760 0D5D                                       l4848 0BA7  
                                     l5904 0798                                       l5592 0E07  
                                     l5576 0DDC                                       l5762 0D72  
                                     l5746 0D22                                       l5738 0D13  
                                     l4858 0BCB                                       l5850 0B31  
                                     l5772 0850                                       l4868 0BE6  
                                     l4884 0C1A                                       l4956 0CE1  
                                     l4980 0A8D                                       l5860 0B57  
                                     l5852 0B36                                       l5844 0B20  
                                     l5782 0870                                       l4878 0C0B  
                                     l4886 0C1E                                       l4894 0C2F  
                                     l4958 0CE5                                       l4974 0A7F  
                                     l5918 0ED3                                       l4798 06DF  
                                     l5792 0885                                       l4992 0AB6  
                                     l5848 0B27                                       l5952 0F47  
                                     l5944 0F2B                                       l5936 0F0C  
                                     l5778 0861                                       l4978 0A89  
                                     l5858 0B4F                                       l5882 073E  
                                     l5946 0F35                                       l5938 0F1D  
                                     l4988 0AAC                                       l5876 0728  
                                     l5948 0F39                                       l4996 0ABB  
                                     l5798 0896                                       l5896 077F  
                                     _BOEN 10BC                                       u5015 1781  
                                     _PIE2 0092                                       u5025 178D  
                                     _PCIE 10BE                                       u5045 16F4  
                                     u6115 0B68                                       u6045 0B2C  
                                     u4605 0694                                       u4615 06AC  
                                     u4545 08BA                                       u6065 0B45  
                                     u6225 0EDB                                       u4625 06B8  
                                     u4555 08C8                                       u6155 0750  
                                     u6085 0B52                                       u6165 0760  
                                     u4645 06D6                                       u6317 0644  
                                     u4815 0C45                                       u6175 0780  
                                     u6255 0F0D                                       u6327 1652  
                                     u4575 0664                                       u6185 078F  
                                     u6337 165B                                       u4665 0700  
                                     u4585 0670                                       u4915 0CCA  
                                     u6195 0799                                       u5715 0A32  
                                     u5635 02EA                                       u6347 15E4  
                                     u4595 0688                                       _SCIE 10BD  
                                     u4765 0C03                                       u6285 0F2C  
                                     u5725 0A51                                       u6357 15CA  
                                     u5645 0307                                       u5805 0992  
                                     u5735 08F9                                       u6367 15BE  
                                     u5655 0324                                       u5575 0277  
                                     u5495 0216                                       u5824 0DC1  
                                     u4865 0C88                                       u6377 1686  
                                     u5745 0918                                       u5665 0341  
                                     u5585 0294                                       u5825 0DBE  
                                     u6387 08DB                                       u5595 02B1  
                                     u5755 07D1                                       u6397 1631  
                                     u4965 0A77                                       u5765 07F0  
                                     u5854 0DEC                                       u5935 0D80  
                                     u5775 0936                                       u5855 0DE9  
                                     u5945 084E                                       u5785 0955  
                                     u5875 16D6                                       u4995 0AA4  
                                     u5795 0973                                       u5965 086E  
                                     u5975 0883                                       u5895 0D1C  
                                     u5995 08A3         i2c_write_handler_word@i2c_data_lsb 0073  
       i2c_write_handler_word@i2c_data_msb 0072                                       _WCOL 10AF  
                             __CFG_WRT$OFF 0000                  _i2c_rx_data_buff_word_lsb 0153  
                _i2c_rx_data_buff_word_msb 015A                  __size_of_shutdown_service 0021  
                                     _main 062D                               ___ftpack@arg 002D  
                             ___ftpack@exp 0030                                       fsr0h 0005  
                                     fsr1h 0007                                       fsr0l 0004  
                                     indf0 0000                                       indf1 0001  
                                     fsr1l 0006                                       btemp 007E  
         __size_of_InterruptServiceRoutine 0036                  i2c_write_handler_byte@reg 0070  
                                     start 003A                              __CFG_IESO$OFF 0000  
                            __CFG_MCLRE$ON 0000                   __end_of_cs6422_write_bit 15A2  
                             ___fttol@exp1 00E9                     _i2c_write_handler_byte 179E  
                             ___fttol@lval 00E5                        _verify_word_address 0876  
                   _i2c_write_handler_word 09DB                          ??_echo_cancel_off 002D  
                                    ?_main 00EA                                      _ACKEN 10B4  
                                    _ACKDT 10B5                              __CFG_WDTE$OFF 0000  
                          __end_of___ftdiv 07BA                            __end_of___fttol 0F57  
                                    i1l230 0036                                      i1l226 0029  
                                    _SBCDE 10BA                                      i1l701 059B  
                                    i1l712 05F4                                      i1l648 09A7  
                                    i1l687 053F                                      i1l696 0577  
                                    _SDAHT 10BB                               ?_init_led_ol 0070  
                i2c_write_handler_word@reg 0070                                      _SSPEN 10AD  
                             ?_init_keypad 0070                                      _SSPOV 10AE  
                             ?_init_relay1 0070                               ?_init_relay2 0070  
                           ??_i2c_data_rcv 0072                            _sensor0_counter 00BE  
                             ?_init_motion 0070                      __size_of_strobe_pulse 0013  
                           __CFG_FCMEN$OFF 0000               __end_of_i2c_dataword_handler 050D  
                           ??_i2c_bit_info 0072                            _sensor1_counter 00C0  
                                    _debug 00A2                      __end_of_GetKeyPressed 0BEC  
                          __end_of_auto_on 163B                                      _ir_en 00AC  
                          __end_of_init_ir 15F9                                _wtimer_flag 00CA  
                            ___ftpack@sign 0031                       ?_verify_word_address 002D  
                           __CFG_BOREN$OFF 0000                                      status 0003  
                                    wtemp0 007E                            __initialization 003C  
                             __end_of_main 0711                          ?_adc_read_service 0070  
                  __size_of_deinit_sensor0 0007                    __size_of_deinit_sensor1 0007  
                 i2c_databyte_handler@data 0037                             __CFG_LPBOR$OFF 0000  
                       ??_adc_read_service 0055                               _strobe_pulse 164E  
                   ?i1_verify_byte_address 0070                                     ??_main 01DF  
                            ___fttol@sign1 00E4                             _echo_cancel_on 15B8  
                    _push_i2c_reply_status 0CF6                    pop_i2c_reply_status@reg 0070  
                                   _ADCON0 009D                                     _ADCON1 009E  
                    ??_verify_word_address 0030                                     _ADRESH 009C  
           ??_get_i2c_msg_from_master_byte 002D                                     _ANSELA 018C  
                                   _ANSELB 018D                                     _ANSELC 018E  
                                   _ANSELD 018F                           __end_of___ftpack 0B78  
                         __end_of___lbtoft 16A9                                     i1l4250 0F9B  
                                   i1l4242 0F80                                     i1l4260 0FA8  
                                   i1l4236 0F64                                     i1l4308 0A16  
                                   i1l4500 17FA                                     i1l4262 0FAB  
                                   i1l4246 0F8F                                     i1l4510 081B  
                                   i1l4256 0FA2                                     i1l4272 0FE2  
                                   i1l4520 083B                                     i1l4258 0FA5  
                                   i1l4266 0FB0                                     i1l4290 17C7  
                                   i1l4610 05A8                                     i1l4602 0584  
                                   i1l4268 0FC4                                     i1l4276 0FFE  
                                   i1l4516 082C                                     i1l4612 05AF  
                                   i1l4630 05EC                                     i1l4624 05E5  
                                   i1l4490 17DA                                     i1l4644 0621  
                                   i1l4662 0015                                     i1l4496 17EB  
                                   _INTCON 000B                  __size_of_work_i2c_handler 0120  
                                   u422_25 17D8                                     u424_25 17F8  
                                   u425_25 0819                                     u442_25 05D8  
                                   u427_25 0839                                     u380_25 0F8D  
                                   u436_25 0575                                     u381_25 0F98  
                                   u445_25 0611                                     u438_25 0599  
                                   u383_25 0FEB                                     u384_25 17A9  
                                   u378_25 0F62                                     u387_25 09E6  
                            ?_init_auto_on 0070                                     _SSPADD 0212  
                                   _SSPBUF 0211             __size_of_i2c_interrupt_handler 0027  
                                   _SSPMSK 0213                        _init_internal_clock 157F  
                  _i2c_interrupt_prescaler 00A8              __end_of_i2c_interrupt_handler 179E  
                            ?_init_sensor0 0070                              ?_init_sensor1 0070  
                           __CFG_PWRTE$OFF 0000                      __end_of_deinit_keypad 1675  
                           _i2c_start_flag 00AA             __size_ofi1_verify_word_address 0034  
            __size_of_cpu_watchdog_handler 003B                      __end_of_deinit_motion 157F  
            __end_ofi1_verify_word_address 1800                     __size_of_init_led_lock 0005  
                                   _ec_lsb 0120                                     _ec_msb 012C  
                           __CFG_STVREN$ON 0000                                  ??___ftdiv 0043  
                                ??___fttol 0051                  __size_of_i2c_read_handler 0009  
                         __end_of_init_i2c 0EB8                                     _ldr_en 0056  
                          _init_led_unlock 1514                           __end_of_init_ldr 1629  
                         __end_of_init_mcu 1599                                     _memset 16C5  
                         __end_of_read_ldr 168E                       ?_init_internal_clock 0070  
                   __end_of_echo_cancel_on 15C4                                     _wtimer 00C8  
                                ??_auto_on 002D                     __size_of_read_databyte 001C  
                   __size_of_read_dataword 003E                                  ??_init_ir 002D  
                     _i2c_reg_dataword_lsb 01CB                       _i2c_reg_dataword_msb 0138  
                         _shutdown_counter 00C4                             ??_init_auto_on 002D  
                 __end_of_ir_level_service 1777                    __end_of__initialization 0087  
                         _shutdown_service 16E5                    _InterruptServiceRoutine 0004  
                           ??_init_sensor0 002D                             ??_init_sensor1 002D  
            __size_of_pop_i2c_reply_status 00A9        get_i2c_regadd_from_master_byte@buff 002F  
                               ___ftdiv@f1 0040                                 ___ftdiv@f2 003D  
                               ___ftdiv@f3 0048                                 ___lbtoft@c 003C  
                     __end_of_i2c_data_rcv 15AD                                 ___fttol@f1 004D  
                           __pcstackCOMMON 0070                       __end_of_i2c_bit_info 15B8  
                     _i2c_dataword_handler 03E1                               __pidataBANK1 0801  
                             __pidataBANK2 1525                               __pidataBANK3 1706  
                    GetKeyPressed@keypress 003B                      _i2c_rx_data_buff_byte 014C  
            __size_of_i2c_databyte_handler 0357                      ??_init_internal_clock 002D  
                       __size_of_deinit_ir 000F                            ?_echo_cancel_on 0070  
                   ?_push_i2c_reply_status 0033                      __end_of_motion_detect 0ABA  
                     __end_of_keyPadMatrix 100E                       __size_of_init_led_ol 0005  
                            _init_led_lock 150F                       __size_of_init_keypad 0010  
                     __size_of_init_relay1 0007                       __size_of_init_relay2 0007  
                     __size_of_init_motion 0007                                 __pbssBANK0 0056  
                               __pbssBANK1 00A0                                 __pbssBANK2 0120  
                               __pbssBANK3 01C4                                 __pbssBANK4 0220  
                               _data_ready 15DC                            __CFG_VCAPEN$OFF 0000  
             i2c_dataword_handler@data_lsb 0041               i2c_dataword_handler@data_msb 0043  
                            _read_databyte 16A9               __size_of_verify_byte_address 0035  
      get_i2c_regadd_from_master_word@buff 002F                            _echo_cancel_off 15C4  
                            _read_dataword 099D                         __size_of_init_gpio 0026  
                         read_databyte@reg 0076                 __end_of_init_led_flash_en1 150A  
               __end_of_init_led_flash_en2 154E                   pop_i2c_reply_status@buff 0073  
                  __end_of_init_led_unlock 1519                    ?_i2c_write_handler_byte 0070  
                               _deinit_ldr 15D0                      _init_led_phone_button 154E  
                               __pmaintext 062D                    ?_i2c_write_handler_word 0070  
                    ?_i2c_dataword_handler 0070                  cs6422_write_word@data_bit 0039  
                           _deinit_sensor0 155C                             _deinit_sensor1 156A  
                cs6422_write_word@data_lsb 0032                  cs6422_write_word@data_msb 0030  
                               __pintentry 0004                          ?_cs6422_write_bit 002E  
                                  ?_memset 002D                    __size_of_sensor0_detect 0085  
                                ?___ftpack 002D                                  ?___lbtoft 0035  
                  __size_of_sensor1_detect 0085                         ??_cs6422_write_bit 0030  
                         GetKeyPressed@key 003C                           read_dataword@lsb 007B  
                         read_dataword@reg 0077                           read_dataword@msb 007C  
                           ?_init_led_lock 0070                        work_i2c_handler@reg 0028  
                                  _SSPCON1 0215                                    _SSPCON2 0216  
                                  _SSPCON3 0217                                    _SSPSTAT 0214  
                ??_InterruptServiceRoutine 002A                                 __stringtab 1000  
                         _work_i2c_handler 050D                                  ?_init_i2c 0070  
                           ?_read_databyte 0076                                  ?_init_ldr 0070  
                                ?_init_mcu 0070                          __end_of_deinit_ir 1608  
                                ?_read_ldr 0070                             ?_read_dataword 0077  
           __end_of_i2c_write_handler_byte 17CC             __end_of_i2c_write_handler_word 0A1B  
                   __end_of_deinit_sensor0 1563                     __end_of_deinit_sensor1 1571  
                  ??i1_verify_byte_address 0073                    __size_of_init_led_light 0007  
                                  ___ftdiv 0711                                    ___fttol 0EB8  
                         _i2c_read_handler 1587                                 ??___ftpack 0032  
                               ??___lbtoft 0038                            __size_of_memset 0020  
                     __end_of_init_auto_on 1532                                    __ptext1 03E1  
                                  __ptext2 0D83                                    __ptext3 1599  
                                  __ptext4 164E                                    __ptext5 15DC  
                                  __ptext6 0960                                    __ptext7 0923  
                                  __ptext8 07BA                                    __ptext9 008A  
                                  _auto_on 1629                                    _init_ir 15EA  
                        __end_of_init_gpio 1750                       __end_of_init_sensor0 155C  
                     __end_of_init_sensor1 156A                                    _old_key 0062  
                __size_of_adc_read_service 005D                           _i2c_reg_add_byte 01A0  
                         _i2c_reg_add_word 0168                                    clrloop0 1520  
                  __end_of_echo_cancel_off 15D0                      _i2c_tx_data_buff_byte 0161  
                     end_of_initialization 0087                      _i2c_tx_data_buff_word 01C4  
                         _i2c_reg_databyte 0220                                 ??_init_i2c 0036  
                                  init_ram 1519                                    memset@c 002F  
                                  memset@n 0031                                    memset@p 0034  
                    __size_of_i2c_data_rcv 000B                                 ??_init_ldr 002D  
                              ?_data_ready 002D                                 ??_init_mcu 0036  
                                  initloop 151A                                 ??_read_ldr 002D  
        get_i2c_msg_from_master_word_lsb@i 002F          get_i2c_msg_from_master_word_msb@i 002F  
                    __size_of_i2c_bit_info 000B                     ?_init_led_phone_button 0070  
                   ??_i2c_dataword_handler 003D                           ?_init_led_unlock 0070  
                              ?_deinit_ldr 0070                            ?_deinit_sensor0 0070  
                          ?_deinit_sensor1 0070                                 _sensor0_en 005A  
                               _sensor1_en 005E                     __size_of_GetKeyPressed 0074  
           i2c_write_handler_byte@i2c_data 0072                                  _PORTAbits 000C  
                                _PORTBbits 000D                                  _PORTCbits 000E  
                 __end_of_shutdown_service 1706                              _relay0_status 00B8  
                                _PORTDbits 000F                                  _PORTEbits 0010  
                            _relay1_status 00BC                            ??_init_led_lock 002D  
              __end_of_verify_word_address 08AB                       cs6422_write_word@ctr 003B  
                         __CFG_FOSC$INTOSC 0000               __end_of_cpu_watchdog_handler 08E6  
                                _TRISAbits 008C                                  _TRISBbits 008D  
                                _TRISCbits 008E                                  _TRISDbits 008F  
                                _TRISEbits 0090                               _i2c_data_rcv 15A2  
  __end_of_get_i2c_regadd_from_master_byte 0A60   __size_of_get_i2c_regadd_from_master_byte 0045  
        ??_get_i2c_regadd_from_master_byte 002F           ?_get_i2c_regadd_from_master_byte 002D  
          _get_i2c_regadd_from_master_byte 0A1B                               _i2c_bit_info 15AD  
  __end_of_get_i2c_regadd_from_master_word 07FF   __size_of_get_i2c_regadd_from_master_word 0045  
        ??_get_i2c_regadd_from_master_word 002F           ?_get_i2c_regadd_from_master_word 002D  
          _get_i2c_regadd_from_master_word 07BA                            ??_read_databyte 0078  
                          ??_read_dataword 0079                          ?_ir_level_service 0070  
                              ___ftdiv@exp 004B                         ??_ir_level_service 002D  
                    _i2c_interrupt_handler 1777                               _keyPadMatrix 1001  
                         ??_echo_cancel_on 002D                             _motion_counter 00B4  
                    i1_verify_word_address 17CC       __end_of_get_i2c_msg_from_master_byte 0923  
    __size_of_get_i2c_msg_from_master_byte 003D               _get_i2c_msg_from_master_byte 08E6  
                           _sensor0_detect 0BEC                             _sensor1_detect 0C71  
                  ??_push_i2c_reply_status 0034                             __end_of_memset 16E5  
             __end_of_pop_i2c_reply_status 1000                             _sensor0_status 005C  
                      _verify_byte_address 0841                        __size_of_data_ready 000E  
                          data_ready@logic 002D                             _sensor1_status 0060  
                      start_initialization 003C                     __size_of_deinit_keypad 0014  
                      __size_of_deinit_ldr 000C                     __size_of_deinit_motion 0007  
                  i2c_databyte_handler@reg 0035                              _GetKeyPressed 0B78  
                         ?_echo_cancel_off 0070               __end_of_i2c_databyte_handler 03E1  
                     ?_verify_byte_address 002D                __end_of_init_internal_clock 1587  
                           _init_led_light 1540                     __end_of_sensor0_detect 0C71  
                    __size_of_init_auto_on 0007                     __end_of_sensor1_detect 0CF6  
                              __pdataBANK1 00D8                                __pdataBANK2 0168  
                              __pdataBANK3 01A0              get_i2c_msg_from_master_byte@i 002F  
                    __size_of_init_sensor0 0007                      __size_of_init_sensor1 0007  
                                 ??_memset 0033                   __end_of_work_i2c_handler 062D  
            ?_get_i2c_msg_from_master_byte 0070                         _init_led_flash_en1 1505  
                       _init_led_flash_en2 1547                              ??_init_led_ol 002D  
                            ??_init_keypad 002D                          __size_of___ftpack 0061  
                        __size_of___lbtoft 001B                              ??_init_relay1 002D  
                            ??_init_relay2 002D                              ??_init_motion 002D  
                            __pcstackBANK0 0020                              __pcstackBANK1 00E4  
                            __pcstackBANK3 01DF                           _adc_read_service 0ABA  
                      ?_init_led_flash_en1 0070                        ?_init_led_flash_en2 0070  
                           ?_GetKeyPressed 0070                  __size_of_cs6422_write_bit 0009  
                 __end_of_i2c_read_handler 1590                      ??_verify_byte_address 0030  
                             _init_auto_on 152B                     ?_i2c_interrupt_handler 0070  
                                _debug_lsb 00CE                                  _debug_reg 00A4  
                                _debug_msb 00CF                          __size_of_init_i2c 009E  
                   __end_of_init_led_light 1547                          __size_of_init_ldr 0011  
                        __size_of_init_mcu 0009                               _init_sensor0 1555  
                             _init_sensor1 1563                          __size_of_read_ldr 0019  
                     _cpu_watchdog_handler 08AB                                  _deinit_ir 15F9  
                            _deinit_keypad 1661                       ??_init_led_flash_en1 002D  
                     ??_init_led_flash_en2 002D                     __size_of_motion_detect 005A  
                   ?i1_verify_word_address 0070                              _deinit_motion 1578  
                          ?_sensor0_detect 0070   __end_of_get_i2c_msg_from_master_word_lsb 099D  
__size_of_get_i2c_msg_from_master_word_lsb 003D         ??_get_i2c_msg_from_master_word_lsb 002D  
        ?_get_i2c_msg_from_master_word_lsb 0070           _get_i2c_msg_from_master_word_lsb 0960  
 __end_of_get_i2c_msg_from_master_word_msb 0960  __size_of_get_i2c_msg_from_master_word_msb 003D  
       ??_get_i2c_msg_from_master_word_msb 002D          ?_get_i2c_msg_from_master_word_msb 0070  
         _get_i2c_msg_from_master_word_msb 0923                            ?_sensor1_detect 0070  
                                 ?___ftdiv 003D                                   ?___fttol 004D  
           __size_ofi1_verify_byte_address 0034                              ?_strobe_pulse 0070  
            __end_ofi1_verify_byte_address 0841                      _i2c_rx_radd_buff_byte 013E  
                        _cs6422_write_word 0D83                      _i2c_rx_radd_buff_word 01D1  
                                __pstrings 1000                         ?_cs6422_write_word 0030  
                                 ?_auto_on 0070                                   ?_init_ir 0070  
                                _ldr_value 00B2                                  _init_gpio 172A  
                      ??_cs6422_write_word 0034                        __end_of_init_led_ol 150F  
                                _keypad_en 00B0                        __end_of_init_keypad 1618  
                      __end_of_init_relay1 1539                        __end_of_init_relay2 1540  
                      __end_of_init_motion 1578                    ??_init_led_phone_button 002D  
                      _sensor0_sensitivity 00E0                                  _relay0_en 00B6  
                                _relay1_en 00BA                               ??_data_ready 002F  
                         ??_deinit_sensor0 002D                           ??_deinit_sensor1 002D  
                                 _LATAbits 010C                                   _LATBbits 010D  
                                 _LATCbits 010E                                   _LATEbits 0110  
                                clear_ram0 151F                                   _PIE1bits 0091  
                     _pop_i2c_reply_status 0F57                           main@shk_prescale 01E2  
                   i1verify_byte_address@i 0074                            ?_init_led_light 0070  
                    ?_cpu_watchdog_handler 0070                             ?_deinit_keypad 0070  
                             ??_deinit_ldr 002D                                   _PIR1bits 0011  
                               ?_deinit_ir 0070                             ?_deinit_motion 0070  
                                 _GO_nDONE 04E9                                  _motion_en 0058  
                __end_of_cs6422_write_word 0E1A                             ??_strobe_pulse 002D  
                          _wtimer_prescale 00CC                       _i2c_databyte_handler 008A  
                         main@mtn_prescale 01E4                          ?_shutdown_service 0070  
                 push_i2c_reply_status@reg 0035                         __end_of_data_ready 15EA  
                          ??_GetKeyPressed 003A                         ??_shutdown_service 002D  
                 ?_InterruptServiceRoutine 0070            verify_byte_address@register_add 0030  
        i1verify_byte_address@register_add 0073                              _shock_counter 00C2  
                            _motion_detect 0A60                          _init_audio_switch 163B  
                               ?_init_gpio 0070                         __end_of_deinit_ldr 15DC  
                       ?_init_audio_switch 0070                        _sensor1_sensitivity 00E2  
         get_i2c_regadd_from_master_byte@i 0031                      ?_pop_i2c_reply_status 0070  
                      ??_init_audio_switch 002D           get_i2c_regadd_from_master_word@i 0031  
                     verify_byte_address@i 0031              __size_of_i2c_dataword_handler 012C  
                   i1verify_word_address@i 0074                           __size_of___ftdiv 00A9  
                         __size_of___fttol 009F                  __size_of_ir_level_service 0027  
                    ?_i2c_databyte_handler 0070                        GetKeyPressed@column 003D  
                       _motion_sensitivity 00DE                                   ___ftpack 0B17  
                                 ___lbtoft 168E                   __size_of_init_led_unlock 0005  
                                 _adc_flag 00A0                         __end_of__stringtab 1001  
           __size_of_push_i2c_reply_status 008D                                 _ANSELAbits 018C  
                               _ANSELBbits 018D                                 _ANSELCbits 018E  
                               _ANSELDbits 018F              __end_of_push_i2c_reply_status 0D83  
                               _ANSELEbits 0190                                _init_led_ol 150A  
                __end_of_init_audio_switch 164E                                _init_keypad 1608  
                         __size_of_auto_on 0012                                _init_relay1 1532  
                              _init_relay2 1539                             ?_motion_detect 0070  
                    __end_of_init_led_lock 1514                           __size_of_init_ir 000F  
                              _init_motion 1571       get_i2c_msg_from_master_word_lsb@buff 002E  
                      i2c_read_handler@reg 0076       get_i2c_msg_from_master_word_msb@buff 002E  
                                 __ptext10 1661                                   __ptext11 15F9  
                                 __ptext20 1555                                   __ptext12 15EA  
                                 __ptext21 15C4                                   __ptext13 15D0  
                                 __ptext30 0EB8                                   __ptext22 15B8  
                                 __ptext14 1618                                   __ptext31 0711  
                                 __ptext23 08E6                                   __ptext15 1578  
                                 __ptext40 0841                                   __ptext32 0B17  
                                 __ptext24 0A1B                                   __ptext16 1571  
                                 __ptext41 1608                                   __ptext33 1675  
                                 __ptext25 16E5                                   __ptext17 156A  
                                 __ptext50 150F                                   __ptext42 1590  
                                 __ptext34 0A60                                   __ptext26 1777  
                                 __ptext18 1563                                   __ptext51 150A  
                                 __ptext43 0E1A                                   __ptext35 0C71  
                                 __ptext27 1750                                   __ptext19 155C  
                                 __ptext52 1547                                   __ptext44 16C5  
                                 __ptext36 0BEC                                   __ptext28 0ABA  
                                 __ptext61 050D                                   __ptext53 1505  
                                 __ptext45 157F                                   __ptext37 0B78  
                                 __ptext29 168E                                   __ptext70 15AD  
                                 __ptext62 080D                                   __ptext54 1540  
                                 __ptext46 172A                                   __ptext38 0CF6  
                                 __ptext71 15A2                                   __ptext63 17CC  
                                 __ptext55 1539                                   __ptext47 163B  
                                 __ptext39 0876                                   __ptext64 099D  
                                 __ptext56 1532                                   __ptext48 154E  
                                 __ptext65 09DB                                   __ptext57 152B  
                                 __ptext49 1514                                   __ptext66 16A9  
                                 __ptext58 08AB                                   __ptext67 179E  
                                 __ptext59 1629                                   __ptext68 1587  
                                 __ptext69 0F57               push_i2c_reply_status@reg_add 0037  
                         _cs6422_write_bit 1599                   ??_i2c_write_handler_byte 0073  
             __size_of_verify_word_address 0035                   ??_i2c_write_handler_word 0074  
                    _i2c_tx_radd_buff_byte 00D1                                   _init_i2c 0E1A  
                                 _ir_level 00AE                      __end_of_read_databyte 16C5  
                                 _init_ldr 1618                                   _init_mcu 1590  
                            __size_of_main 00E4                      __end_of_read_dataword 09DB  
                                 _read_ldr 1675                            ??_deinit_keypad 002D  
                         _ldr_sensitivity1 00D8                           _ldr_sensitivity2 00DA  
                         _ldr_sensitivity3 00DC                     ??_cpu_watchdog_handler 0030  
                                 _keypress 00D0           get_i2c_msg_from_master_byte@buff 002E  
                          ??_deinit_motion 002D                                ??_deinit_ir 002D  
                  i2c_write_handler_byte@i 0074                   __end_of_adc_read_service 0B17  
               __size_of_cs6422_write_word 0097                    i2c_write_handler_word@i 0075  
                                 main@argc 00EA                                   main@argv 00EC  
                     verify_word_address@i 0031            __end_of_InterruptServiceRoutine 003A  
                        ?_work_i2c_handler 0070                   cs6422_write_word@reg_num 0037  
          verify_word_address@register_add 0030          i1verify_word_address@register_add 0073  
                       ??_work_i2c_handler 0020                                 _INTCONbits 000B  
                  i2c_dataword_handler@reg 003F                                   memset@p1 002D  
                              ??_init_gpio 002D                                   intlevel1 0000  
                     __end_of_strobe_pulse 1661                          ?_i2c_read_handler 0076  
                  ??_i2c_interrupt_handler 002D                     ??_pop_i2c_reply_status 0072  
                       ??_i2c_read_handler 0078                          __CFG_CLKOUTEN$OFF 0000  
                         ??_sensor0_detect 003A                    work_i2c_handler@i2c_add 0026  
                         ??_sensor1_detect 003A                   work_i2c_handler@reg_data 0024  
                  ??i1_verify_word_address 0073                   __size_of_echo_cancel_off 000C  
                               _OSCCONbits 0099                     push_i2c_reply_status@i 0038  
                        main@sen0_prescale 01E6                         _i2c_interrupt_flag 00A6  
                   ??_i2c_databyte_handler 0033                          main@sen1_prescale 01E8  
                  work_i2c_handler@garbage 0025               __size_of_init_internal_clock 0008  
                          ??_motion_detect 003A                 __size_of_init_audio_switch 0013  
                  work_i2c_handler@reg_add 0027                    __size_of_echo_cancel_on 000C  
                        ??_init_led_unlock 002D                                _SSPCON1bits 0215  
              __end_of_verify_byte_address 0876             push_i2c_reply_status@i2c_event 0033  
          __size_of_i2c_write_handler_byte 002E                           ??_init_led_light 002D  
          __size_of_i2c_write_handler_word 0040                           main@adc_prescale 01EC  
              _InterruptServiceRoutine$449 007D             __size_of_init_led_phone_button 0007  
            __end_of_init_led_phone_button 1555  
